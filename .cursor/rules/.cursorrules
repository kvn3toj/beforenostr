# ü§ñ REGLAS CONSOLIDADAS PARA EL AGENTE IA - PROYECTO COOMUNITY
# =====================================================================
# VERSI√ìN CONSOLIDADA - JUNIO 2025
# Estas reglas referencian y complementan workspace-management.mdc
# =====================================================================

> **Contexto**: Reglas principales para el desarrollo del proyecto Coom√únity SuperApp. 
> **REGLA PRINCIPAL**: Ver `workspace-management.mdc` para protocolo completo de desarrollo.

## üéØ CONTEXTO Y ARQUITECTURA ACTUAL

**Coom√únity Global** es una plataforma gamificada para econom√≠a colaborativa basada en filosof√≠a de Bien Com√∫n y reciprocidad (Ayni).

### **Arquitectura Real Confirmada:**
- **Backend NestJS**: Puerto 3002 (FUNCIONAL - requiere PostgreSQL + Redis)
- **SuperApp Frontend**: Puerto 3001 en `Demo/apps/superapp-unified/` (EN DESARROLLO ACTIVO)
- **Stack Principal**: React, TypeScript, Material UI, Tailwind CSS, Vite, React Query

### **üÜï DEPENDENCIAS CR√çTICAS DEL BACKEND:**
- **PostgreSQL@15**: Puerto 5432 (obligatorio)
- **Redis**: Puerto 6379 (obligatorio)
- **Verificaci√≥n**: `brew services list | grep postgresql && brew services list | grep redis`

---

## üìã REGLAS ESENCIALES (CONSOLIDADAS)

### 1. **PROTOCOLO PRE-FLIGHT OBLIGATORIO**
**Referencia**: Ver `workspace-management.mdc` secci√≥n "PROTOCOLO PRE-FLIGHT CHECK EXPANDIDO"
```bash
# Verificar ubicaci√≥n (ra√≠z del monorepo)
pwd  # Debe mostrar: /Users/kevinp/Movies/GAMIFIER-copy

# Verificar dependencias cr√≠ticas
brew services list | grep postgresql
brew services list | grep redis

# Limpiar procesos m√∫ltiples
pkill -f "vite" && pkill -f "npm run dev" && pkill -f "turbo"

# Verificar servicios
curl http://localhost:3002/health  # Backend
curl http://localhost:3001 -I      # SuperApp
```

### 2. **MANEJO DE ARCHIVOS SENSIBLES**
- **NUNCA** leer/escribir archivos `.env` directamente
- **SIEMPRE** usar comandos de terminal: `cat .env`, `ls -la .env`

### 3. **ERRORES DE IMPORTACIONES LAZY LOADING**
**üÜï CR√çTICO**: Problema resuelto en sesi√≥n de junio 2025
- Verificar que importaciones coincidan con archivos reales: `ls Demo/apps/superapp-unified/src/pages/`
- Mapeo correcto: `UPlay.tsx` ‚Üí `import('../pages/UPlay')`
- Funciones obligatorias: `preloadCriticalComponents`, `preloadRouteComponents`

### 4. **ARQUITECTURA REACT OBLIGATORIA**
- Componentes funcionales √∫nicamente
- Hooks personalizados para l√≥gica reutilizable 
- React Query para todas las llamadas API
- Context API para estado global (NO prop drilling)
- Memoizaci√≥n con `useMemo`/`useCallback`

### 5. **INTEGRACI√ìN CON BACKEND**
- Backend NestJS en puerto 3002 (requiere PostgreSQL + Redis activos)
- SuperApp se conecta a `http://localhost:3002` v√≠a `VITE_API_BASE_URL`
- Usar JWT del Backend NestJS para autenticaci√≥n
- Credenciales de desarrollo: `admin@gamifier.com / admin123`

### 6. **TESTING CON PLAYWRIGHT**
- **Versi√≥n confirmada**: `@playwright/test@1.53.0` üÜï ACTUALIZADO
- **CR√çTICO**: Una sola instalaci√≥n en `Demo/apps/superapp-unified/` (NO en directorio padre)
- Usar `baseURL` relativo en `page.goto()` (ej. `/login`)
- Selectores sem√°nticos preferidos sobre text-based
- Configuraci√≥n: `VITE_ENABLE_MOCK_AUTH=false`

### 7. **GESTI√ìN DE DEPENDENCIAS**
- **Material UI**: Resolver conflictos con `npm install --legacy-peer-deps`
- **React**: 18+ (compatible con MUI v7 y Playwright 1.53.0)
- **Playwright**: Detectar conflictos con `find . -name "@playwright" -type d`

### 8. **PATRONES UI/UX OBLIGATORIOS**
- MUI components con `sx` prop (NO styled-components)
- Loading, Error y Empty states OBLIGATORIOS
- Accesibilidad con aria-labels apropiados
- Responsive design por defecto

### 9. **PROTOCOLO DE COMUNICACI√ìN**
Usar prefijos para claridad:
- `[BACKEND]` - Backend NestJS (puerto 3002, requiere PostgreSQL + Redis)
- `[SUPERAPP]` - Frontend SuperApp (puerto 3001)
- `[GLOBAL]` - Afecta m√∫ltiples componentes

### 10. **ALINEACI√ìN FILOS√ìFICA**
- Evaluar c√≥mo las implementaciones se alinean con Coom√únity (Bien Com√∫n, Ayni, Reciprocidad)
- Evitar dise√±os que fomenten adicci√≥n o rompan principios de reciprocidad

---

## üö® ERRORES CR√çTICOS A EVITAR (ACTUALIZADOS)

### ‚ùå NO Hagas:
1. **üÜï Iniciar backend sin PostgreSQL Y Redis ejecut√°ndose**
2. **üÜï Importaciones lazy loading incorrectas** (verificar archivos reales primero)
3. Instalar Playwright en m√∫ltiples directorios (solo en SuperApp)
4. Leer archivos `.env` directamente con herramientas de archivo
5. Hardcodear URLs completas en tests de Playwright
6. M√∫ltiples procesos simult√°neos (causa conflictos)

### ‚úÖ S√ç Haz:
1. **üÜï Verificar PostgreSQL + Redis antes de iniciar backend**
2. **üÜï Mapear importaciones lazy loading a archivos reales**
3. Conectar con Backend NestJS en puerto 3002
4. Trabajar en el directorio correcto (`Demo/apps/superapp-unified/`)
5. Usar comandos de terminal para archivos sensibles
6. Limpiar procesos m√∫ltiples antes de desarrollo

---

## üîß COMANDOS CLAVE ACTUALIZADOS

### **Pre-flight Check Completo:**
```bash
# Ubicaci√≥n correcta
pwd  # /Users/kevinp/Movies/GAMIFIER-copy

# Dependencias cr√≠ticas (NUEVAS)
brew services start postgresql@15   # OBLIGATORIO
brew services start redis          # OBLIGATORIO

# Verificar conectividad
lsof -i :5432  # PostgreSQL
lsof -i :6379  # Redis

# Limpiar procesos m√∫ltiples
pkill -f "vite" && pkill -f "npm run dev"

# Verificar servicios
curl http://localhost:3002/health  # Backend
curl http://localhost:3001 -I      # SuperApp
```

### **Desarrollo:**
```bash
# Desde la ra√≠z del monorepo
npm run dev:backend              # Backend (requiere PostgreSQL + Redis)
npm run dev:superapp            # SuperApp

# Tests E2E
npm run test:e2e --workspace=coomunity-superapp
```

---

## üìö **REFERENCIAS A REGLAS COMPLEMENTARIAS**

1. **`workspace-management.mdc`** - üéØ **REGLA PRINCIPAL**
   - Protocolo completo de desarrollo
   - Pre-flight check expandido
   - Gesti√≥n de procesos m√∫ltiples
   - Dependencias cr√≠ticas (PostgreSQL + Redis)

2. **`slack-agents-coomunity.md`** - Configuraci√≥n para Background Agents
3. **`env.mdc`** - Manejo espec√≠fico de archivos .env

---

**üîÑ VERSI√ìN**: Consolidada Junio 2025 - Incluye aprendizajes de Redis y lazy loading
**üìã ESTADO**: Reglas activas y verificadas contra experiencia real de desarrollo 