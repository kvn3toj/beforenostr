# ü§ñ REGLAS PARA EL AGENTE IA - PROYECTO COOMUNITY
# =================================================

> **Contexto**: Estas son las reglas principales para el desarrollo del proyecto Coom√únity SuperApp. Todas las reglas anteriores han sido consolidadas aqu√≠ para m√°xima claridad y eficiencia.

## üéØ CONTEXTO Y ARQUITECTURA ACTUAL

**Coom√únity Global** es una plataforma gamificada para econom√≠a colaborativa basada en filosof√≠a de Bien Com√∫n y reciprocidad (Ayni).

### **Arquitectura Real Confirmada:**
- **Backend NestJS**: Puerto 3002 (YA COMPLETADO Y FUNCIONAL)
- **SuperApp Frontend**: Puerto 3000 en `Demo/apps/superapp-unified/` (EN DESARROLLO ACTIVO)
- **Stack Principal**: React, TypeScript, Material UI, Tailwind CSS, Vite, React Query

---

## üìã REGLAS ESENCIALES

### 1. **MANEJO DE ARCHIVOS SENSIBLES**
- **NUNCA** leer/escribir archivos `.env` directamente
- **SIEMPRE** usar comandos de terminal: `cat .env`, `ls -la .env`

### 2. **ARQUITECTURA REACT OBLIGATORIA**
- Componentes funcionales √∫nicamente
- Hooks personalizados para l√≥gica reutilizable 
- React Query para todas las llamadas API
- Context API para estado global (NO prop drilling)
- Memoizaci√≥n con `useMemo`/`useCallback`

### 3. **INTEGRACI√ìN CON BACKEND**
- Backend NestJS en puerto 3002 (externo al workspace)
- SuperApp se conecta a `http://localhost:3002` v√≠a `VITE_API_BASE_URL`
- Usar JWT del Backend NestJS para autenticaci√≥n
- Implementar llamadas API REST al Backend NestJS

### 4. **PATRONES UI/UX OBLIGATORIOS**
- MUI components con `sx` prop (NO styled-components)
- Loading, Error y Empty states OBLIGATORIOS
- Accesibilidad con aria-labels apropiados
- Responsive design por defecto

### 5. **TESTING CON PLAYWRIGHT**
- Usar `baseURL` relativo en `page.goto()` (ej. `/login`, NO `http://localhost:3000/login`)
- Selectores sem√°nticos preferidos sobre text-based
- M√∫ltiples estrategias de verificaci√≥n
- Screenshots autom√°ticos en errores

### 6. **CONVENCIONES DE NAMING**
- Componentes: `PascalCase` (VideoItemCard)
- Hooks: `camelCase` con prefijo `use` (useVideoData)
- Services: `camelCase` con sufijo `Service` (videoItemService)
- Types/Interfaces: `PascalCase` con sufijo descriptivo (VideoItemProps)

### 7. **PROTOCOLO DE COMUNICACI√ìN**
Usar prefijos para claridad:
- `[BACKEND]` - Backend NestJS (puerto 3002)
- `[SUPERAPP]` - Frontend SuperApp (puerto 3000)
- `[GLOBAL]` - Afecta m√∫ltiples componentes

### 8. **DIRECTORIO DE TRABAJO**
- **SuperApp Principal**: `Demo/apps/superapp-unified/`
- **Puerto de desarrollo**: 3000 (confirmado en .env real)
- **API Backend**: `http://localhost:3002`

### 9. **DEFINICIONES DE M√ìDULOS**
- **√úPlay**: M√≥dulo principal de video gamificado para uso regular
- **Pilgrim Journey**: Experiencia de onboarding √∫nica para nuevos usuarios invitados

### 10. **ALINEACI√ìN FILOS√ìFICA**
- Evaluar c√≥mo las implementaciones se alinean con Coom√únity (Bien Com√∫n, Ayni, Reciprocidad)
- Evitar dise√±os que fomenten adicci√≥n o rompan principios de reciprocidad

---

## üö® ERRORES COMUNES A EVITAR

### ‚ùå NO Hagas:
1. Usar puerto 3001 para SuperApp (es 3000 seg√∫n .env real)
2. Leer archivos `.env` directamente con herramientas de archivo
3. Hardcodear URLs completas en tests de Playwright
4. Componentes sin manejo de errores
5. Dependencias faltantes en useEffect
6. Inyecci√≥n de dependencias impl√≠cita en NestJS

### ‚úÖ S√ç Haz:
1. Conectar con Backend NestJS en puerto 3002
2. Usar JWT del Backend NestJS compartido
3. Trabajar en el directorio correcto (`Demo/apps/superapp-unified/`)
4. Verificar disponibilidad de puertos antes de iniciar servidores
5. Usar comandos de terminal para archivos sensibles

---

## üîß COMANDOS CLAVE

### **Verificar Backend (Pre-flight Check):**
```bash
ps aux | grep -E "(node|tsx|npm)" | grep -v grep
curl http://localhost:3002/health -v
```

### **Iniciar SuperApp:**
```bash
cd Demo/apps/superapp-unified/ && npm run dev
```

### **Verificar .env:**
```bash
cat Demo/apps/superapp-unified/.env
```

---

**Estas reglas son las √öNICAS que deben seguirse. Todas las reglas anteriores han sido consolidadas aqu√≠.** 

---

## üîÑ **REGLA 8: VERIFICACI√ìN AUTOMATIZADA CON PLAYWRIGHT**

**OBLIGATORIO**: Al completar un prompt o una fase que involucre cambios en el Frontend, el Agente IA **DEBE** ejecutar un test de verificaci√≥n con Playwright para confirmar la implementaci√≥n.

### **Proceso de Verificaci√≥n:**

1. **Asegurar servicios operativos** en puertos definitivos:
   - Backend NestJS: Puerto 3002
   - SuperApp Frontend: Puerto 3000

2. **Identificar el test relevante** para verificar los cambios implementados

3. **Ejecutar test con navegador visible:**
   ```bash
   # Para SuperApp (Puerto 3000)
   [SUPERAPP] cd Demo/apps/superapp-unified/ && npx playwright test e2e/test-relevante.spec.ts --headed
   ```

4. **Analizar resultados** del test y capturas de pantalla para confirmar:
   - Los cambios se reflejan correctamente en la UI
   - No hay errores cr√≠ticos visibles
   - La funcionalidad implementada funciona como se esperaba

5. **Incluir resultados** de la verificaci√≥n en el resumen de la tarea

### **Validaci√≥n de Implementaci√≥n:**
- ¬øSe ejecut√≥ el test de verificaci√≥n con Playwright?
- ¬øEl test us√≥ el navegador visible (`--headed`)?
- ¬øSe analizaron los resultados del test y las capturas?
- ¬øSe incluyeron los resultados en el resumen de la tarea?

### **Beneficios de esta Regla:**
- **Verificaci√≥n Visual**: Confirmaci√≥n inmediata de que los cambios se implementaron correctamente
- **Detecci√≥n Temprana**: Identificaci√≥n r√°pida de errores antes de continuar
- **Calidad Asegurada**: Cada prompt/fase queda verificado antes del siguiente paso
- **Documentaci√≥n Visual**: Screenshots autom√°ticos como evidencia de funcionamiento

--- 