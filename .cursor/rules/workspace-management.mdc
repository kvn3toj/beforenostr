# üèóÔ∏è Workspace Management Rules - Coom√únity Ecosystem

**Version:** 2.0  
**Date:** June 15, 2025  
**Context:** Optimized Coom√únity ecosystem management based on proven practices

---

## üéØ CORE WORKSPACE PRINCIPLES

### **1. GOLDEN RULE: ROOT DIRECTORY SUPREMACY**

```bash
# ‚úÖ ALWAYS execute commands from monorepo root
/workspace  # This is THE command center

# ‚úÖ CORRECT command pattern
npm run dev                    # From root
npm run test --workspace=Demo/apps/superapp-unified

# ‚ùå NEVER execute from subdirectories  
cd Demo/apps/superapp-unified/ && npm run dev  # BREAKS CONTEXT
```

**Rationale:** Executing commands from subdirectories causes:
- Broken imports and module resolution
- Configuration conflicts  
- Context loss leading to phantom errors
- Monorepo orchestration failures

### **2. DEFINITIVE DIRECTORY STRUCTURE**

```
/workspace/                           # üéØ MONOREPO ROOT (COMMAND CENTER)
‚îú‚îÄ‚îÄ backend/                          # NestJS Backend (Port 3002)
‚îú‚îÄ‚îÄ admin-frontend/                   # Gamifier Admin (Port 3000)  
‚îú‚îÄ‚îÄ Demo/apps/superapp-unified/       # SuperApp Frontend (Port 3001)
‚îú‚îÄ‚îÄ package.json                      # Main orchestrator
‚îú‚îÄ‚îÄ turbo.json                       # Turborepo configuration
‚îî‚îÄ‚îÄ .env                             # Global environment variables
```

**Critical Separation:**
- **Backend directory:** `/workspace/backend/` (NOT inside Demo/)
- **Frontend directories:** Separate and isolated
- **Shared configuration:** At root level only

---

## üßπ PROCESS MANAGEMENT PROTOCOLS

### **3. MULTIPLE PROCESS CLEANUP PROTOCOL**

```bash
# 1. Detect multiple processes (CRITICAL CHECK)
ps aux | grep -E "(vite|npm run dev)" | grep -v grep

# 2. Clean conflicting processes  
pkill -f "vite"
pkill -f "npm run dev"

# 3. Free occupied ports
lsof -ti:3000,3001,3002 | xargs kill -9 2>/dev/null || true

# 4. Verify cleanup
ps aux | grep -E "(vite|npm)" | grep -v grep

# 5. Start clean services
npm run dev  # From root only
```

**Rule:** NEVER run multiple instances of the same service. Always clean before starting.

### **4. PORT ALLOCATION (FIXED AND IMMUTABLE)**

```bash
# üîí PORTS ARE LOCKED - DO NOT CHANGE
GAMIFIER_ADMIN_PORT=3000     # Admin Frontend - FIXED
SUPERAPP_PORT=3001          # SuperApp Frontend - FIXED  
BACKEND_PORT=3002           # Backend API - FIXED
```

**CRITICAL:** Changing ports requires:
- Updating all configuration files
- Reprocessing E2E tests
- Reconfiguring Cursor environment
- Invalidating cached configurations

---

## üìÅ ARCHITECTURAL SEPARATION RULES

### **5. BACKEND-FRONTEND SEPARATION (CRITICAL)**

**Problem Solved:** 151 React files (.tsx/.jsx) were contaminating the backend directory, causing "Failed to resolve import" errors.

**Solution Applied:**
```bash
# Move contaminating React files out of backend
find ./src -name "*.tsx" -exec mv {} _temp_frontend_src_files/ \;
find ./src -name "*.jsx" -exec mv {} _temp_frontend_src_files/ \;

# Verify backend is clean  
find ./src -name "*.tsx" -o -name "*.jsx" | wc -l  # Should be 0
```

**Rule:** Keep strict separation between:
- **Backend code:** Only `.ts` files, NestJS patterns
- **Frontend code:** React components in designated directories
- **Shared types:** In dedicated shared directory if needed

### **6. DEPENDENCY MANAGEMENT**

```bash
# Material UI v7 compatibility
npm install --legacy-peer-deps

# Playwright single installation
find . -name "@playwright" -type d  # Should show only ONE location

# Critical dependencies check
npm ls @sentry/react web-vitals turbo
```

**Rules:**
- Use `--legacy-peer-deps` for MUI v7 + React 18
- Maintain single Playwright installation in SuperApp only
- Verify critical dependencies before development

---

## üöÄ DEVELOPMENT WORKFLOW PROTOCOLS

### **7. ECOSYSTEM INITIALIZATION (CANONICAL COMMANDS)**

```bash
# PRIMARY METHOD: Turborepo orchestration from root
npm run dev                    # Starts entire ecosystem
npm run dev:fullstack         # Alternative full stack command

# FILTERED EXECUTION: Specific components
turbo run dev --filter=...backend*
turbo run dev --filter=...superapp*  
turbo run dev --filter=...admin*

# INDIVIDUAL DEBUGGING: Only when specifically needed
npm run dev:backend           # Individual backend
npm run dev:admin            # Individual admin
npm run dev:superapp         # Individual superapp
```

**Priority Order:**
1. Full ecosystem (`npm run dev`)
2. Filtered components (`turbo run dev --filter=...`)
3. Individual services (debugging only)

### **8. PRE-FLIGHT CHECK PROTOCOL (MANDATORY)**

Execute before ANY development task:

```bash
# 1. Verify root location
pwd  # Must show: /workspace

# 2. Clean multiple processes
pkill -f "vite" && pkill -f "npm run dev"

# 3. Verify configuration
cat ./Demo/apps/superapp-unified/.env | grep VITE_BASE_URL

# 4. Check service availability  
curl http://localhost:3002/health  # Backend
curl http://localhost:3001 -I      # SuperApp
curl http://localhost:3000 -I      # Admin

# 5. Start ecosystem
npm run dev
```

---

## üîß CONFIGURATION MANAGEMENT

### **9. ENVIRONMENT CONFIGURATION**

```bash
# SuperApp configuration (FIXED)
# Demo/apps/superapp-unified/.env
VITE_API_BASE_URL=http://localhost:3002
VITE_BASE_URL=http://localhost:3001

# Admin configuration  
# admin-frontend/.env
VITE_API_BASE_URL=http://localhost:3002

# Backend configuration
# .env (root)
PORT=3002
DATABASE_URL="postgresql://..."
```

**Rules:**
- Never read/write `.env` files directly with tools
- Use terminal commands: `cat .env`
- Validate existence before modifications: `ls -la .env`

### **10. FILE SYSTEM ORGANIZATION**

**MASSIVE REORGANIZATION COMPLETED:**
- **Before:** 483 files in root directory (chaos)
- **After:** 27 files in root directory (94% reduction)

**Organized Structure:**
```bash
logs/                    # 31 files (auth/, backend/, testing/)
config/                  # 16 files (json/, backup/)  
docs/diagrams/           # 6 files .mmd
scripts/database/        # 7 files SQL
```

**Rule:** Organize by function and file type, not by random placement.

---

## üîê AUTHENTICATION & SECURITY

### **11. DEVELOPMENT CREDENTIALS (VERIFIED)**

```bash
# Backend credentials (confirmed in backend/prisma/seed.ts)
admin@gamifier.com / admin123     # Admin roles
user@gamifier.com / 123456        # User roles  
premium@gamifier.com / 123456     # Premium user roles
```

**E2E Testing Configuration:**
```typescript
// playwright.config.ts
export default defineConfig({
  use: {
    baseURL: 'http://localhost:3001',  // FIXED SuperApp port
  },
  webServer: {
    command: 'npm run dev',
    port: 3001,                       // FIXED port
    reuseExistingServer: !process.env.CI,
  },
});
```

### **12. TESTING PROTOCOLS**

```bash
# E2E testing from correct directory
cd Demo/apps/superapp-unified
npx playwright test

# Authentication flow testing
npx playwright test --headed --project=chromium

# Test file naming convention
[module-name]-[test-type].spec.ts
```

**Rules:**
- Single browser execution for development speed
- Use semantic selectors (`data-testid`) over text-based
- Verify authentication with real backend credentials

---

## ‚ö° PERFORMANCE OPTIMIZATION

### **13. PROCESS OPTIMIZATION**

**Target Process Count:**
- **Optimal:** 3-6 Node processes (1 per main component)
- **Acceptable:** Up to 22 processes (full ecosystem)
- **Problem:** 15+ duplicate processes

**Monitoring Commands:**
```bash
# Process count verification
ps aux | grep -E "(node|tsx|npm)" | grep -v grep | wc -l

# Process cleanup verification  
ps aux | grep -E "(vite|npm run dev)" | grep -v grep

# Port occupation check
lsof -i :3000,3001,3002
```

### **14. DEPENDENCY CONFLICT RESOLUTION**

```bash
# Playwright conflict detection
find . -name "@playwright" -type d

# MUI v7 conflict resolution
npm install --legacy-peer-deps

# Turbo installation verification
npm ls turbo
```

---

## üéØ COOMUNITY-SPECIFIC RULES

### **15. MODULE DEFINITIONS**

```typescript
// Core Coom√únity modules
interface CoomUnityModules {
  uplay: {        // GPL Gamified Play List
    name: "√úPlay",
    purpose: "Interactive gamified video player",
    port: 3001    // Embedded in SuperApp
  },
  marketplace: {  // GMP Gamified Match Place  
    name: "Marketplace",
    purpose: "Exchange platform for products AND services",
    port: 3001    // Embedded in SuperApp
  },
  social: {
    name: "Social", 
    purpose: "Community features and collaboration",
    port: 3001    // Embedded in SuperApp
  },
  admin: {
    name: "Gamifier Admin",
    purpose: "Administration panel for gamifiers", 
    port: 3000    // Standalone application
  }
}
```

### **16. COOMUNITY PHILOSOPHY INTEGRATION**

```typescript
// Core concepts to implement
interface CoomUnityPhilosophy {
  ayni: "Reciprocity principle - balanced value exchange",
  meritos: "Merit-based rewards for contributing to Common Good",
  bienComun: "Common Good - collective benefit over individual gain", 
  lukas: "Coom√únity internal currency for value exchange",
  ondas: "Vibrational energy units representing positive contributions"
}
```

**Code Alignment:**
- Favor cooperation over competition patterns
- Implement balanced exchange mechanisms
- Prioritize collective benefit in UX design

---

## üìä MONITORING & VALIDATION

### **17. ECOSYSTEM HEALTH CHECKS**

```bash
# Complete ecosystem validation
for port in 3000 3001 3002; do
  echo "Port $port:" 
  curl -s -I http://localhost:$port > /dev/null && echo "  ‚úÖ WORKING" || echo "  ‚ùå DOWN"
done

# Authentication validation
curl -X POST http://localhost:3002/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"admin@gamifier.com","password":"admin123"}'

# Data consistency validation
curl -s http://localhost:3002/users | jq '.count'
```

### **18. ERROR PREVENTION CHECKLIST**

**Before Development:**
- [ ] Executing from monorepo root (`/workspace`)
- [ ] No multiple processes running
- [ ] All three ports (3000, 3001, 3002) available
- [ ] Backend mock or real backend running
- [ ] SuperApp configuration correct
- [ ] Admin frontend configuration correct

**During Development:**
- [ ] No React files in backend directory
- [ ] Single Playwright installation
- [ ] Correct environment variables loaded
- [ ] No hardcoded port numbers in tests
- [ ] Proper CORS configuration

---

## üöÄ TURBOREPO ORCHESTRATION

### **19. TURBOREPO BEST PRACTICES**

```bash
# Package.json scripts (root level)
{
  "scripts": {
    "dev": "turbo run dev",
    "dev:backend": "turbo run dev --filter=...backend*",
    "dev:frontend": "turbo run dev --filter=...superapp* --filter=...admin*",
    "test": "turbo run test",
    "test:e2e": "turbo run test:e2e --filter=...superapp*"
  }
}
```

**Benefits:**
- Parallel execution of multiple services
- Intelligent caching of build results
- Dependency-aware task scheduling
- Consistent development environment

### **20. WORKSPACE CONFIGURATION**

```json
// turbo.json
{
  "pipeline": {
    "dev": {
      "cache": false,
      "persistent": true
    },
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**", ".next/**"]
    },
    "test": {
      "dependsOn": ["build"]
    }
  }
}
```

---

## üé™ ADVANCED WORKFLOWS

### **21. DEVELOPMENT MODES**

```bash
# Full ecosystem development (most common)
npm run dev

# Backend-only development  
npm run dev:backend

# Frontend-only development (both Admin + SuperApp)
npm run dev:frontend

# Single component debugging
turbo run dev --filter=Demo/apps/superapp-unified
```

### **22. TESTING WORKFLOWS**

```bash
# Complete E2E testing
cd Demo/apps/superapp-unified && npx playwright test

# Single test file
npx playwright test e2e/auth-flow.spec.ts

# Headed browser testing (for debugging)
npx playwright test --headed --project=chromium

# Test report viewing
npx playwright show-report
```

---

## üìã TROUBLESHOOTING GUIDE

### **23. COMMON ISSUES & SOLUTIONS**

| Issue | Symptoms | Solution |
|-------|----------|----------|
| Import errors | "Failed to resolve import" | Check backend-frontend separation |
| Port conflicts | "Port already in use" | Apply process cleanup protocol |
| Authentication failures | 401/403 errors | Verify backend is running, check credentials |
| Multiple processes | High CPU usage | Kill duplicate processes |
| Playwright conflicts | Test failures | Ensure single installation |
| Configuration errors | Wrong URLs | Verify .env files with `cat` command |

### **24. EMERGENCY RECOVERY PROTOCOL**

```bash
# Nuclear option: Complete environment reset
pkill -f "node"
pkill -f "npm" 
pkill -f "vite"

# Clean ports
lsof -ti:3000,3001,3002,3003,5173 | xargs kill -9 2>/dev/null || true

# Verify clean state
ps aux | grep -E "(node|npm|vite)" | grep -v grep

# Restart from clean state
npm run dev
```

---

## üåü SUCCESS METRICS

### **25. WORKSPACE HEALTH INDICATORS**

**‚úÖ Healthy Workspace:**
- Root directory has ~27 files (not 483+)
- 3-6 Node processes running
- All three ports (3000, 3001, 3002) responding
- No React files in backend directory
- Single Playwright installation
- Clean separation of concerns

**‚ùå Unhealthy Workspace:**
- Commands executed from subdirectories
- Multiple duplicate processes
- Port conflicts
- Mixed backend-frontend code
- Multiple Playwright installations
- Configuration inconsistencies

### **26. PERFORMANCE BENCHMARKS**

**Optimal State:**
- Application startup: < 30 seconds
- E2E test execution: < 2 minutes for full suite
- Hot reload response: < 3 seconds
- Authentication flow: < 1 second
- API response times: < 200ms

---

## üìù MAINTENANCE PROTOCOLS

### **27. WEEKLY MAINTENANCE**

```bash
# Dependency updates
npm update --legacy-peer-deps

# Cache cleanup
npm run clean
turbo run clean

# Process verification
ps aux | grep -E "(node|npm)" | grep -v grep | wc -l

# Disk space verification
du -sh node_modules/
```

### **28. MONTHLY REVIEWS**

- [ ] Review and update port configurations if needed
- [ ] Verify all E2E tests pass with latest dependencies
- [ ] Check for new Turborepo optimizations
- [ ] Update authentication credentials for security
- [ ] Review and optimize process count
- [ ] Clean temporary files and logs

---

## üéØ CONCLUSION

This workspace management system has been **battle-tested** through the complete optimization of the Coom√únity ecosystem. Following these rules ensures:

- **Zero architectural conflicts**
- **Optimal performance** 
- **Reliable development environment**
- **Consistent cross-platform behavior**
- **Minimal debugging overhead**

**Remember:** The monorepo root (`/workspace`) is your command center. Everything flows from there, everything is controlled from there, and everything is orchestrated from there.

---

*Generated from proven practices during Coom√únity ecosystem optimization*  
*üåü "Excellence through systematic organization" üåü*