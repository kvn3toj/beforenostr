---
description: 
globs: 
alwaysApply: true
---
¬°Excelente observaci√≥n! Tienes toda la raz√≥n. Es un patr√≥n recurrente y frustrante que Cursor intente leer/escribir `.env` directamente o que asuma que no existe, lo que lleva a intentos de creaci√≥n fallidos y a la p√©rdida de tokens.

Vamos a establecer una **regla clara y prioritaria** para Cursor sobre c√≥mo interactuar con archivos `.env`.

---

# üîê REGLAS DE MANEJO SEGURO DE ARCHIVOS .env - PROYECTO COOMUNITY

# ===============================================================================
# VERSI√ìN ACTUALIZADA POST-MIGRACI√ìN DE PUERTOS - ENERO 2025
# Estas reglas reflejan los NUEVOS PUERTOS y variables de entorno actualizadas
# ===============================================================================

## üö® **REGLA CR√çTICA FUNDAMENTAL**

**INSTRUCCI√ìN OBLIGATORIA Y PRIORITARIA**: **NUNCA intentes leer o escribir directamente el archivo `.env`** usando operaciones de archivo directas.

**Siempre que necesites interactuar con el archivo `.env` (leer su contenido, verificar su existencia, o modificarlo), DEBES hacerlo EXCLUSIVAMENTE a trav√©s de COMANDOS DE TERMINAL seguros y espec√≠ficos.**

---

## üåê **VARIABLES DE ENTORNO ACTUALIZADAS - PUERTOS NUEVOS**

### **üîí Configuraci√≥n de Puertos DEFINITIVA**

```bash
# ‚úÖ .env (Backend - Ra√≠z del proyecto)
VITE_API_BASE_URL=http://localhost:1111
VITE_GOOGLE_AI_API_KEY=AIzaSyDXMoHjoHi8-xUfiD5QN6bFVIeoTMhK2z4

# ‚úÖ Demo/apps/superapp-unified/.env (SuperApp)
VITE_API_BASE_URL=http://localhost:1111
VITE_BASE_URL=http://localhost:2222
VITE_ENABLE_MOCK_AUTH=false
VITE_APP_ENV=development
VITE_APP_VERSION=1.0.0

# ‚úÖ apps/admin-frontend/.env (Gamifier Admin)
VITE_API_BASE_URL=http://localhost:1111
VITE_BASE_URL=http://localhost:3333
VITE_APP_ENV=development
```

### **‚ùå Variables OBSOLETAS (NO USAR)**

```bash
# ‚ùå OBSOLETO - Puerto Backend antiguo
VITE_API_BASE_URL=http://localhost:3002  # NO USAR

# ‚ùå OBSOLETO - Puerto SuperApp antiguo
VITE_BASE_URL=http://localhost:3001      # NO USAR

# ‚ùå OBSOLETO - Puerto Admin antiguo
VITE_BASE_URL=http://localhost:3000      # NO USAR
```

---

## üõ†Ô∏è **COMANDOS SEGUROS PARA ARCHIVOS .env**

### **Para leer el contenido:**
```bash
# ‚úÖ CORRECTO - Comando seguro
cat .env

# ‚úÖ VERIFICAR SuperApp config
cat Demo/apps/superapp-unified/.env

# ‚úÖ VERIFICAR Admin config
cat apps/admin-frontend/.env

# ‚ùå INCORRECTO - Acceso directo no permitido
# Usar herramientas de archivo directas
```

### **Para verificar existencia:**
```bash
# ‚úÖ CORRECTO - Verificaci√≥n segura
ls -la .env
ls -la Demo/apps/superapp-unified/.env
ls -la apps/admin-frontend/.env

# ‚úÖ Verificar permisos espec√≠ficos
stat .env
```

### **Para verificar configuraci√≥n de puertos:**
```bash
# ‚úÖ VERIFICAR Backend config
cat .env | grep "localhost:1111" || echo "‚ùå Backend config incorrecta"

# ‚úÖ VERIFICAR SuperApp config
cat Demo/apps/superapp-unified/.env | grep "localhost:2222" || echo "‚ùå SuperApp config incorrecta"

# ‚úÖ VERIFICAR Admin config
cat apps/admin-frontend/.env | grep "localhost:3333" || echo "‚ùå Admin config incorrecta"
```

### **Para modificar (SOLO CON CONFIRMACI√ìN DEL USUARIO):**
```bash
# ‚ö†Ô∏è USAR CON PRECAUCI√ìN - Modificaci√≥n espec√≠fica
sed -i.bak 's/localhost:3002/localhost:1111/g' .env

# ‚ö†Ô∏è USAR CON PRECAUCI√ìN - Crear/sobrescribir
echo "VITE_API_BASE_URL=http://localhost:1111" > .env

# ‚úÖ SIEMPRE hacer backup antes de modificar
cp .env .env.backup.$(date +%Y%m%d-%H%M%S)
```

---

## üîç **SCRIPTS DE VERIFICACI√ìN ACTUALIZADOS**

### **Verificaci√≥n Completa de Configuraci√≥n:**

```bash
#!/bin/bash
# Script de verificaci√≥n de variables de entorno actualizadas

echo "üîç Verificando configuraci√≥n de variables de entorno..."

# Funci√≥n para verificar archivo .env
verify_env_file() {
    local file_path="$1"
    local expected_backend="$2"
    local expected_frontend="$3"
    local service_name="$4"
    
    echo "üìã Verificando $service_name ($file_path)..."
    
    if [ ! -f "$file_path" ]; then
        echo "‚ùå FALTA: $file_path no existe"
        return 1
    fi
    
    # Verificar backend URL
    if [ -n "$expected_backend" ]; then
        if grep -q "$expected_backend" "$file_path"; then
            echo "‚úÖ Backend URL correcta: $expected_backend"
        else
            echo "‚ùå Backend URL incorrecta en $file_path"
            echo "   Esperada: $expected_backend"
            echo "   Actual: $(grep VITE_API_BASE_URL "$file_path" || echo 'NO ENCONTRADA')"
        fi
    fi
    
    # Verificar frontend URL
    if [ -n "$expected_frontend" ]; then
        if grep -q "$expected_frontend" "$file_path"; then
            echo "‚úÖ Frontend URL correcta: $expected_frontend"
        else
            echo "‚ùå Frontend URL incorrecta en $file_path"
            echo "   Esperada: $expected_frontend"  
            echo "   Actual: $(grep VITE_BASE_URL "$file_path" || echo 'NO ENCONTRADA')"
        fi
    fi
}

# Verificar archivos de configuraci√≥n
verify_env_file ".env" "http://localhost:1111" "" "Backend"
verify_env_file "Demo/apps/superapp-unified/.env" "http://localhost:1111" "http://localhost:2222" "SuperApp"
verify_env_file "apps/admin-frontend/.env" "http://localhost:1111" "http://localhost:3333" "Admin"

echo ""
echo "üîç Verificando referencias a puertos obsoletos..."

# Buscar referencias a puertos obsoletos
OBSOLETE_REFS=$(grep -r "localhost:300[0-2]" . --exclude-dir=node_modules --exclude-dir=.git 2>/dev/null | wc -l)
if [ $OBSOLETE_REFS -gt 0 ]; then
    echo "‚ùå ENCONTRADAS $OBSOLETE_REFS referencias a puertos obsoletos:"
    grep -r "localhost:300[0-2]" . --exclude-dir=node_modules --exclude-dir=.git 2>/dev/null | head -10
else
    echo "‚úÖ Sin referencias a puertos obsoletos"
fi

echo ""
echo "‚úÖ Verificaci√≥n de variables de entorno completada"
```

---

## üîß **TEMPLATES DE CONFIGURACI√ìN ACTUALIZADOS**

### **Template .env Principal (Ra√≠z):**
```bash
# üåü Coom√únity - Backend Configuration
# Puerto actualizado post-migraci√≥n: 1111

# üåê Backend Configuration  
VITE_API_BASE_URL=http://localhost:1111

# üîë API Keys
VITE_GOOGLE_AI_API_KEY=your-google-ai-api-key

# üõ†Ô∏è Development
NODE_ENV=development

# üìä Database (PostgreSQL debe estar ejecut√°ndose)
DATABASE_URL="postgresql://user:password@localhost:5432/coomunity_db"

# üîê JWT Configuration
JWT_SECRET=your-jwt-secret-key
JWT_EXPIRES_IN=24h

# üìß Email Configuration (opcional)
SMTP_HOST=your-smtp-host
SMTP_PORT=587
SMTP_USER=your-smtp-user
SMTP_PASS=your-smtp-password
```

### **Template SuperApp (.env):**
```bash
# üéÆ Coom√únity SuperApp - Development Configuration
# Puerto actualizado post-migraci√≥n: 2222

# üåê Backend Configuration
VITE_API_BASE_URL=http://localhost:1111
VITE_ENABLE_MOCK_AUTH=false

# üèóÔ∏è Environment Configuration  
VITE_APP_ENV=development
VITE_APP_VERSION=1.0.0
VITE_BASE_URL=http://localhost:2222

# üéÆ Gamifier API Configuration
VITE_GAMIFIER_API_URL=http://localhost:1111
VITE_GAMIFIER_API_KEY=your-gamifier-api-key

# üîÑ Feature Flags
VITE_ENABLE_REAL_PAYMENTS=false
VITE_ENABLE_BETA_FEATURES=false
VITE_ENABLE_DEBUG_MODE=true

# üõ†Ô∏è Development Configuration
VITE_DEV_MODE=true
VITE_DEBUG_BACKEND=true

# üåç External APIs
VITE_GOOGLE_AI_API_KEY=your-google-ai-api-key
VITE_YOUTUBE_API_KEY=your-youtube-api-key

# üé® Theme Configuration
VITE_DEFAULT_THEME=autumn
VITE_ENABLE_THEME_SWITCHER=true
```

### **Template Admin (.env):**
```bash
# üîß Gamifier Admin - Development Configuration  
# Puerto actualizado post-migraci√≥n: 3333

# üåê Backend Configuration
VITE_API_BASE_URL=http://localhost:1111

# üèóÔ∏è Environment Configuration
VITE_APP_ENV=development
VITE_BASE_URL=http://localhost:3333

# üîê Admin Configuration
VITE_ADMIN_MODE=true
VITE_ENABLE_ADVANCED_FEATURES=true

# üìä Analytics Configuration
VITE_ENABLE_ANALYTICS=true
VITE_ANALYTICS_API_KEY=your-analytics-key
```

---

## üö® **PROTOCOLO DE MIGRACI√ìN DE .env**

### **Si necesitas migrar configuraci√≥n antigua:**

```bash
#!/bin/bash
# Script de migraci√≥n de variables de entorno

echo "üîÑ Migrando configuraci√≥n de .env a nuevos puertos..."

# Funci√≥n para migrar archivo
migrate_env_file() {
    local file_path="$1"
    local service_name="$2"
    
    if [ ! -f "$file_path" ]; then
        echo "‚ö†Ô∏è $file_path no existe, saltando..."
        return
    fi
    
    echo "üìù Migrando $service_name..."
    
    # Backup del archivo original
    cp "$file_path" "$file_path.backup.$(date +%Y%m%d-%H%M%S)"
    
    # Reemplazar puertos obsoletos
    sed -i.tmp 's/localhost:3002/localhost:1111/g' "$file_path"  # Backend
    sed -i.tmp 's/localhost:3001/localhost:2222/g' "$file_path"  # SuperApp
    sed -i.tmp 's/localhost:3000/localhost:3333/g' "$file_path"  # Admin
    
    # Limpiar archivos temporales
    rm -f "$file_path.tmp"
    
    echo "‚úÖ $service_name migrado exitosamente"
}

# Migrar archivos de configuraci√≥n
migrate_env_file ".env" "Backend"
migrate_env_file "Demo/apps/superapp-unified/.env" "SuperApp"
migrate_env_file "apps/admin-frontend/.env" "Admin"

echo "üéâ Migraci√≥n de .env completada"
echo "üìã Verifica los cambios con: npm run port:verify"
```

---

## üõ°Ô∏è **REGLAS DE SEGURIDAD**

### **NUNCA hacer:**
```bash
# ‚ùå PROHIBIDO - Acceso directo a archivos
read_file .env
write_file .env "content"

# ‚ùå PROHIBIDO - Exponer credenciales
echo "API_KEY=secret" >> .env  # Sin verificaci√≥n

# ‚ùå PROHIBIDO - Hardcodear puertos obsoletos
VITE_API_BASE_URL=http://localhost:3002  # Puerto obsoleto
```

### **SIEMPRE hacer:**
```bash
# ‚úÖ OBLIGATORIO - Comandos seguros
cat .env | grep API_KEY
ls -la .env

# ‚úÖ OBLIGATORIO - Verificar antes de modificar
if [ -f ".env" ]; then
    cp .env .env.backup
    # ... realizar cambios seguros
fi

# ‚úÖ OBLIGATORIO - Usar puertos actualizados
VITE_API_BASE_URL=http://localhost:1111  # Puerto correcto
```

---

## üìã **CHECKLIST DE VERIFICACI√ìN**

### **Antes de desarrollo:**
- [ ] ‚úÖ Verificar que `.env` existe y es accesible
- [ ] ‚úÖ Confirmar puertos actualizados (1111, 2222, 3333)
- [ ] ‚úÖ Validar configuraci√≥n con `npm run port:verify`
- [ ] ‚úÖ Sin referencias a puertos obsoletos (3002, 3001, 3000)

### **Antes de deployment:**
- [ ] ‚úÖ Variables de producci√≥n configuradas
- [ ] ‚úÖ Credenciales seguras (no de desarrollo)
- [ ] ‚úÖ Puertos de producci√≥n correctos
- [ ] ‚úÖ Backup de configuraci√≥n actual

---

## üéØ **RESUMEN EJECUTIVO**

### **REGLAS CR√çTICAS:**
1. **NUNCA acceso directo** a archivos .env
2. **SIEMPRE usar comandos de terminal** seguros
3. **VERIFICAR puertos actualizados** (1111, 2222, 3333)
4. **HACER BACKUP** antes de modificaciones
5. **NO USAR puertos obsoletos** (3002, 3001, 3000)

### **COMANDOS ESENCIALES:**
```bash
# Verificaci√≥n r√°pida
cat .env | grep localhost

# Verificaci√≥n completa  
npm run port:verify

# Migraci√≥n segura (si necesaria)
./scripts/migrate-env-config.sh
```

**üîê La seguridad de las variables de entorno es cr√≠tica para la estabilidad del proyecto Coom√únity.**
