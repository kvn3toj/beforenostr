---
description: 
globs: 
alwaysApply: true
---
REGLA CR√çTICA PARA CURSOR: PROTOCOLO DE INICIALIZACI√ìN DE TESTS DE PLAYWRIGHT
INSTRUCCI√ìN OBLIGATORIA Y PRIORITARIA: De ahora en adelante, al generar o modificar CUALQUIER test de Playwright que involucre navegaci√≥n UI y autenticaci√≥n, DEBES seguir el siguiente protocolo estricto:
Verificaci√≥n de playwright.config.ts:
Siempre asume y verifica (si el contexto lo permite) que la propiedad baseURL en playwright.config.ts est√° configurada con la URL base real y correcta de tu frontend.
Valor preferido para este proyecto: http://localhost:3000 (dado el historial).
Si el test se ejecuta en un entorno donde el frontend est√° en otro puerto (ej. 5173), el usuario deber√° ajustar baseURL manualmente en playwright.config.ts.
NUNCA hardcodees la URL completa (http://localhost:3000/login) dentro de page.goto() en los tests. Siempre usa rutas relativas (page.goto('/login'), page.goto('/'), page.goto('/users')). Playwright resolver√° esto usando la baseURL.
Flujo de Autenticaci√≥n en test.beforeAll (o test.beforeEach si es necesario):
Para cualquier test que requiera que el usuario est√© autenticado, el bloque test.beforeAll (o test.beforeEach) DEBE contener los siguientes pasos de forma expl√≠cita:
await page.goto('/login'); (Navegar expl√≠citamente a la p√°gina de login).
await page.fill('input[name="email"]', 'admin@gamifier.com'); (Rellenar email del administrador correcto).
await page.fill('input[name="password"]', 'admin123'); (Rellenar contrase√±a del administrador correcta).
await page.click('button[type="submit"]'); (Hacer clic en el bot√≥n de login).
await page.waitForURL('**/'); (Esperar la redirecci√≥n a la p√°gina principal despu√©s del login).
NO asumas que el navegador ya est√° en la p√°gina de login o que la sesi√≥n ya est√° iniciada. Siempre inicia el flujo de prueba desde la navegaci√≥n expl√≠cita a /login.
Reporte de Errores y Contexto:
Siempre incluye page.on('console', ...) y page.on('pageerror', ...) en el beforeEach de los tests para capturar errores de JavaScript en el navegador.
Reporta cualquier desviaci√≥n de baseURL o del flujo de login que Playwright detecte.
# üß™ PROTOCOLO DE TESTING ROBUSTO PARA GAMIFIER

## üìã REGLAS GENERALES

### 1. **Verificaci√≥n de Login Exitoso**

**NUNCA** buscar textos espec√≠ficos como "Gamifier Admin". En su lugar, usar:

```javascript
// ‚úÖ CORRECTO - Verificaci√≥n robusta
try {
  // Buscar elementos que indiquen que estamos logueados
  await page.waitForSelector('nav, [role="navigation"], button[aria-label*="menu"], button[aria-label*="Menu"]', { timeout: 5000 });
  console.log('‚úÖ Login exitoso - Navegaci√≥n detectada');
} catch {
  // Si no hay navegaci√≥n, verificar que no estamos en login
  const currentUrl = page.url();
  if (!currentUrl.includes('/login')) {
    console.log('‚úÖ Login exitoso - Fuera de p√°gina de login');
  } else {
    throw new Error('Login fall√≥ - A√∫n en p√°gina de login');
  }
}

// ‚ùå INCORRECTO - Dependiente de texto espec√≠fico
await page.waitForSelector('text=Gamifier Admin', { timeout: 10000 });
```

### 2. **Verificaci√≥n de P√°ginas**

Usar m√∫ltiples estrategias de verificaci√≥n:

```javascript
// ‚úÖ CORRECTO - Verificaci√≥n flexible
try {
  await page.waitForSelector('text=Items', { timeout: 5000 });
  console.log('‚úÖ P√°gina cargada');
} catch {
  // Verificar por URL si no encontramos el texto
  const currentUrl = page.url();
  if (currentUrl.includes('/items')) {
    console.log('‚úÖ P√°gina cargada (verificado por URL)');
  } else {
    throw new Error('No se pudo cargar la p√°gina');
  }
}
```

### 3. **Selecci√≥n de Elementos**

Priorizar selectores sem√°nticos y robustos:

```javascript
// ‚úÖ CORRECTO - Selectores robustos
const button = page.getByRole('button', { name: /a√±adir formulario|add form/i });
const input = page.locator('textarea[placeholder*="pregunta"], input[placeholder*="pregunta"]');

// ‚ùå EVITAR - Selectores fr√°giles
const button = page.locator('text=A√±adir Formulario');
const input = page.locator('input[label*="pregunta"]');
```

### 4. **Manejo de Errores**

Siempre incluir manejo de errores y screenshots:

```javascript
try {
  // C√≥digo del test
} catch (error) {
  console.error('‚ùå Error durante el test:', error);
  
  // Capturar screenshot en caso de error
  await page.screenshot({ 
    path: `debug-error-${Date.now()}.png`,
    fullPage: true 
  });
} finally {
  await browser.close();
}
```

## üîß CONFIGURACI√ìN EST√ÅNDAR DE PLAYWRIGHT

```javascript
const browser = await chromium.launch({ 
  headless: false,
  slowMo: 1000 // Ralentizar para ver las acciones
});

const context = await browser.newContext();
const page = await context.newPage();
```

## üéØ FLUJO DE LOGIN EST√ÅNDAR

```javascript
// 1. Navegar a login
await page.goto('http://localhost:3000/login');
await page.waitForLoadState('networkidle');

// 2. Llenar credenciales
await page.fill('input[name="email"]', 'admin@gamifier.com');
await page.fill('input[name="password"]', 'admin123');
await page.click('button[type="submit"]');

// 3. Verificar redirecci√≥n
await page.waitForURL('**/');

// 4. Verificar login exitoso (m√©todo robusto)
try {
  await page.waitForSelector('nav, [role="navigation"], button[aria-label*="menu"]', { timeout: 5000 });
  console.log('‚úÖ Login exitoso');
} catch {
  const currentUrl = page.url();
  if (!currentUrl.includes('/login')) {
    console.log('‚úÖ Login exitoso - Verificado por URL');
  } else {
    throw new Error('Login fall√≥');
  }
}
```

## üìù PLANTILLA DE TEST

```javascript
const { chromium } = require('playwright');

async function testFeature() {
  console.log('üéØ Iniciando test de [FUNCIONALIDAD]...\n');
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1000 
  });
  
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    // 1. LOGIN (usar flujo est√°ndar)
  
    // 2. NAVEGACI√ìN
  
    // 3. INTERACCIONES
  
    // 4. VERIFICACIONES
  
    console.log('\nüéâ Test completado exitosamente');

  } catch (error) {
    console.error('‚ùå Error durante el test:', error);
    await page.screenshot({ 
      path: `debug-error-${Date.now()}.png`,
      fullPage: true 
    });
  } finally {
    await browser.close();
  }
}

testFeature().catch(console.error);
```

## üö® REGLAS CR√çTICAS

1. **NUNCA** depender de textos espec√≠ficos de la UI que pueden cambiar
2. **SIEMPRE** usar m√∫ltiples estrategias de verificaci√≥n
3. **SIEMPRE** incluir manejo de errores y screenshots
4. **PREFERIR** selectores sem√°nticos sobre selectores de texto
5. **VERIFICAR** por URL cuando los elementos no est√©n disponibles

---

**Nota**: Este protocolo debe seguirse en TODOS los tests futuros para evitar fallos por cambios en la UI.
