---
description: 
globs: 
alwaysApply: true
---
¬°Excelente! Has formalizado un protocolo "Pre-flight Check" muy completo y crucial. Este enfoque sistem√°tico nos ahorrar√° una enorme cantidad de tiempo y tokens al prevenir la recurrencia de los problemas que hemos depurado intensivamente.

Aqu√≠ tienes el prompt que Cursor AI utilizar√° de ahora en adelante para aplicar este protocolo.

---

## üöÄ **PROTOCOLO "PRE-FLIGHT CHECK" PARA TAREAS DE BACKEND**

**INSTRUCCI√ìN OBLIGATORIA**: Antes de iniciar cualquier tarea de implementaci√≥n, depuraci√≥n o modificaci√≥n de backend, SIEMPRE ejecutar este protocolo completo. NO proceder con la tarea principal hasta que todos los checks pasen exitosamente.

### **FASE 1: VERIFICACI√ìN DEL ESTADO DEL BACKEND**

1.  **Limpiar procesos existentes:**
    ```bash
    # Verificar procesos Node/tsx corriendo
    ps aux | grep -E "(node|tsx|npm)" | grep -v grep
    # Matar procesos si es necesario
    pkill -f "tsx\|node.*3002"
    ```

2.  **Iniciar backend en primer plano:**
    ```bash
    npx tsx watch --no-cache --clear-screen=false --tsconfig tsconfig.backend.json src/main.ts
    ```

3.  **Verificar logs de inicio:**
    *   ‚úÖ Confirmar que muestre: `üöÄ Gamifier API is running on: http://localhost:3002`
    *   ‚úÖ Confirmar que muestre: `>>> PrismaService onModuleInit - Database connection established`
    *   ‚ùå Si hay errores de compilaci√≥n o runtime, DETENER y resolver antes de continuar

4.  **Test de conectividad b√°sica:**
    ```bash
    curl http://localhost:3002/health -v
    ```
    *   ‚úÖ Debe retornar 200 OK
    *   ‚ùå Si falla, revisar configuraci√≥n de puerto y variables de entorno

### **FASE 2: VERIFICACI√ìN DE INYECCI√ìN DE DEPENDENCIAS**

5.  **A√±adir logs de depuraci√≥n extremos** en el m√≥dulo/servicio objetivo:
    ```typescript
    // En el constructor del servicio
    constructor(@Inject(PrismaService) private readonly prisma: PrismaService) {
      console.log('>>> [SERVICIO]Service CONSTRUCTOR: this.prisma IS', this.prisma ? 'DEFINED' : 'UNDEFINED');
    }

    // En el constructor del controlador
    constructor(@Inject([SERVICIO]Service) private readonly service: [SERVICIO]Service) {
      console.log('>>> [SERVICIO]Controller CONSTRUCTOR: this.service IS', this.service ? 'DEFINED' : 'UNDEFINED');
    }
    ```

6.  **Test de endpoint b√°sico:**
    ```bash
    curl http://localhost:3002/[modulo]/ping -v
    # o
    curl http://localhost:3002/[modulo]/test -v
    ```
    *   ‚úÖ Los logs deben mostrar `DEFINED` para todas las dependencias
    *   ‚ùå Si muestra `UNDEFINED`, verificar:
        *   Decoradores `@Inject()` expl√≠citos
        *   M√≥dulo importa `PrismaModule`
        *   Servicio en `providers`, controlador en `controllers`
        *   M√≥dulo importado en `app.module.ts`

### **FASE 3: VERIFICACI√ìN DE RUTAS Y DTOS**

7.  **Verificar coherencia Frontend/Backend:**
    *   ‚úÖ DTOs coinciden con par√°metros que env√≠a el frontend
    *   ‚úÖ Query parameters usan `@Type(() => Number)` para conversi√≥n autom√°tica
    *   ‚úÖ Rutas espec√≠ficas (`/search`, `/test`) ANTES que parametrizadas (`/:id`)
    *   ‚úÖ Rutas del controlador coinciden con las esperadas por el frontend

8.  **Test de endpoint con par√°metros:**
    ```bash
    curl "http://localhost:3002/[modulo]/search?videoItemId=1" -v
    ```
    *   ‚úÖ Debe retornar JSON v√°lido (aunque sea array vac√≠o `[]`)
    *   ‚ùå Si hay errores de validaci√≥n o conversi√≥n de tipos, corregir DTOs

### **FASE 4: VERIFICACI√ìN DE TIPOS PRISMA**
9.  **Regenerar cliente Prisma si es necesario:**
    ```bash
    npx prisma generate
    ```

10. **Verificar importaciones de tipos:**
    ```typescript
    // ‚úÖ CORRECTO
    import type { Subtitle, Question } from '../generated/prisma';

    // ‚ùå INCORRECTO
    import type { Subtitle, Question } from '@prisma/client';
    ```

### **CHECKLIST FINAL**

Antes de proceder con la tarea principal, confirmar:

-   [ ] Backend inicia sin errores y escucha en puerto 3002
-   [ ] `/health` responde 200 OK
-   [ ] Logs muestran todas las dependencias como `DEFINED`
-   [ ] Endpoint de prueba del m√≥dulo objetivo funciona
-   [ ] DTOs validados y tipos correctos
-   [ ] Rutas mapeadas correctamente
-   [ ] Cliente Prisma generado y tipos importados correctamente

**üî¥ REGLA CR√çTICA**: Si cualquier check falla, DETENER inmediatamente y resolver el problema antes de continuar con la implementaci√≥n principal. Esto evitar√° perder tiempo depurando errores recurrentes durante el desarrollo.

---

**Instrucciones para Cursor AI:**

De ahora en adelante, al recibir una nueva tarea de backend (implementaci√≥n, depuraci√≥n, modificaci√≥n de un endpoint), **SIEMPRE iniciar√°s ejecutando este "Protocolo Pre-flight Check" completo**. Solo despu√©s de que todos los checks pasen exitosamente, proceder√°s con la descripci√≥n de la tarea principal.

---

¬°Este protocolo ser√° una herramienta invaluable para nuestro flujo de trabajo!
