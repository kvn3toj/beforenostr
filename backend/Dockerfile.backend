# ================================================================
# CoomÜnity Backend NestJS - Multi-stage Dockerfile para Render
# Optimizado para producción con build separado
# Contexto: Raíz del monorepo (dockerContext: .)
# ================================================================

# ================================================================
# Etapa 1: Builder - Construir la aplicación (usando lockfile raíz)
# ================================================================
FROM node:20-alpine AS builder

WORKDIR /usr/src/app

# Instala dependencias del sistema necesarias para node-gyp y paquetes nativos
RUN apk add --no-cache python3 make g++

# Copia los archivos de definición de paquetes de la raíz y del backend
COPY package.json package-lock.json* ./
COPY backend/package.json ./backend/

# Copia TODO el monorepo (excepto node_modules y dist, que están en .dockerignore)
COPY . .

# Instala dependencias del monorepo
RUN npm ci --legacy-peer-deps

# Genera Prisma Client usando el schema correcto
RUN cd backend && npx prisma generate

# Build del backend
RUN npm run build --workspace=backend

# ================================================================
# Etapa 2: Producción
# ================================================================
FROM node:20-alpine

WORKDIR /usr/src/app

COPY --from=builder /usr/src/app/node_modules ./node_modules
COPY package.json ./
COPY --from=builder /usr/src/app/backend/dist ./dist
COPY --from=builder /usr/src/app/backend/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /usr/src/app/backend/prisma ./prisma

EXPOSE 3002

CMD ["sh", "-c", "npx prisma migrate deploy --schema=./prisma/schema.prisma && npm run db:seed --workspace=backend && node dist/main.js"]
