/**
 * üì± PWA Features Component - Advanced Native Capabilities
 * 
 * Componente que implementa funcionalidades PWA avanzadas:
 * - Compartir nativo (Web Share API)
 * - Vibraci√≥n del dispositivo
 * - Geolocalizaci√≥n y br√∫jula
 * - Acceso a c√°mara y micr√≥fono
 * - Notificaciones push
 * - Instalaci√≥n de la app
 * - Detecci√≥n de conectividad
 * - Almacenamiento offline
 */

import React, { useState, useEffect, useCallback } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  IconButton,
  Stack,
  Chip,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Switch,
  FormControlLabel,
  Snackbar,
  LinearProgress,
  Avatar,
  Tooltip,
  Fab,
  SpeedDial,
  SpeedDialAction,
  SpeedDialIcon,
  Badge,
} from '@mui/material';
import {
  Share as ShareIcon,
  Vibration as VibrationIcon,
  LocationOn as LocationIcon,
  CameraAlt as CameraIcon,
  Mic as MicIcon,
  Notifications as NotificationIcon,
  InstallMobile as InstallIcon,
  WifiOff as OfflineIcon,
  Wifi as OnlineIcon,
  Explore as CompassIcon,
  FlashlightOn as FlashIcon,
  VolumeUp as SoundIcon,
  Brightness6 as BrightnessIcon,
  Battery90 as BatteryIcon,
  Close as CloseIcon,
  CheckCircle as CheckIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
} from '@mui/icons-material';

// üéÆ Tipos para funcionalidades PWA
interface PWACapabilities {
  share: boolean;
  vibration: boolean;
  geolocation: boolean;
  camera: boolean;
  microphone: boolean;
  notifications: boolean;
  installation: boolean;
  deviceOrientation: boolean;
  battery: boolean;
  fullscreen: boolean;
}

interface GeolocationData {
  latitude: number;
  longitude: number;
  accuracy: number;
  heading?: number;
  speed?: number;
  timestamp: number;
}

interface DeviceInfo {
  online: boolean;
  battery?: {
    level: number;
    charging: boolean;
  };
  orientation: number;
  vibrationSupported: boolean;
  installPrompt?: any;
}

const PWAFeatures: React.FC = () => {
  // üéõÔ∏è Estados principales
  const [capabilities, setCapabilities] = useState<PWACapabilities>({
    share: false,
    vibration: false,
    geolocation: false,
    camera: false,
    microphone: false,
    notifications: false,
    installation: false,
    deviceOrientation: false,
    battery: false,
    fullscreen: false,
  });

  // üì± Estados de funcionalidades
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo>({
    online: navigator.onLine,
    orientation: 0,
    vibrationSupported: false,
  });

  const [location, setLocation] = useState<GeolocationData | null>(null);
  const [isTracking, setIsTracking] = useState(false);
  const [notificationsEnabled, setNotificationsEnabled] = useState(false);
  const [installPrompt, setInstallPrompt] = useState<any>(null);

  // üé® Estados de UI
  const [showPWADialog, setShowPWADialog] = useState(false);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState<'success' | 'error' | 'info'>('info');

  // üîç Detectar capacidades PWA al cargar
  useEffect(() => {
    const detectCapabilities = () => {
      setCapabilities({
        share: 'share' in navigator,
        vibration: 'vibrate' in navigator,
        geolocation: 'geolocation' in navigator,
        camera: 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices,
        microphone: 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices,
        notifications: 'Notification' in window,
        installation: 'serviceWorker' in navigator,
        deviceOrientation: 'DeviceOrientationEvent' in window,
        battery: 'getBattery' in navigator,
        fullscreen: 'requestFullscreen' in document.documentElement,
      });

      setDeviceInfo(prev => ({
        ...prev,
        vibrationSupported: 'vibrate' in navigator,
      }));
    };

    detectCapabilities();
  }, []);

  // üîã Monitorear estado del dispositivo
  useEffect(() => {
    // Conectividad
    const handleOnline = () => setDeviceInfo(prev => ({ ...prev, online: true }));
    const handleOffline = () => setDeviceInfo(prev => ({ ...prev, online: false }));

    // Orientaci√≥n
    const handleOrientationChange = () => {
      setDeviceInfo(prev => ({ ...prev, orientation: window.orientation || 0 }));
    };

    // Bater√≠a (si est√° disponible)
    if ('getBattery' in navigator) {
      (navigator as any).getBattery().then((battery: any) => {
        const updateBattery = () => {
          setDeviceInfo(prev => ({
            ...prev,
            battery: {
              level: Math.round(battery.level * 100),
              charging: battery.charging,
            },
          }));
        };

        updateBattery();
        battery.addEventListener('levelchange', updateBattery);
        battery.addEventListener('chargingchange', updateBattery);
      });
    }

    // Event listeners
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    window.addEventListener('orientationchange', handleOrientationChange);

    // Prompt de instalaci√≥n
    const handleBeforeInstallPrompt = (e: any) => {
      e.preventDefault();
      setInstallPrompt(e);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      window.removeEventListener('orientationchange', handleOrientationChange);
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    };
  }, []);

  // üìç Funciones de geolocalizaci√≥n
  const startLocationTracking = useCallback(() => {
    if (!capabilities.geolocation) {
      showSnackbar('Geolocalizaci√≥n no disponible', 'error');
      return;
    }

    setIsTracking(true);
    
    const options = {
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 60000,
    };

    const success = (position: GeolocationPosition) => {
      const locationData: GeolocationData = {
        latitude: position.coords.latitude,
        longitude: position.coords.longitude,
        accuracy: position.coords.accuracy,
        heading: position.coords.heading || undefined,
        speed: position.coords.speed || undefined,
        timestamp: position.timestamp,
      };
      
      setLocation(locationData);
      showSnackbar('Ubicaci√≥n actualizada üìç', 'success');
    };

    const error = (err: GeolocationPositionError) => {
      setIsTracking(false);
      showSnackbar(`Error de geolocalizaci√≥n: ${err.message}`, 'error');
    };

    navigator.geolocation.getCurrentPosition(success, error, options);
    
    // Tracking continuo
    const watchId = navigator.geolocation.watchPosition(success, error, options);
    
    // Cleanup despu√©s de 30 segundos
    setTimeout(() => {
      navigator.geolocation.clearWatch(watchId);
      setIsTracking(false);
    }, 30000);
  }, [capabilities.geolocation]);

  // üì§ Funci√≥n de compartir nativo
  const handleNativeShare = useCallback(async (data: { title: string; text: string; url?: string }) => {
    if (!capabilities.share) {
      showSnackbar('Compartir nativo no disponible', 'error');
      return;
    }

    try {
      await navigator.share(data);
      showSnackbar('Contenido compartido exitosamente üéâ', 'success');
      
      // Vibraci√≥n de confirmaci√≥n
      if (capabilities.vibration) {
        navigator.vibrate([100, 50, 100]);
      }
    } catch (error) {
      if ((error as Error).name !== 'AbortError') {
        showSnackbar('Error al compartir', 'error');
      }
    }
  }, [capabilities.share, capabilities.vibration]);

  // üì≥ Funciones de vibraci√≥n
  const triggerVibration = useCallback((pattern: number | number[]) => {
    if (!capabilities.vibration) {
      showSnackbar('Vibraci√≥n no disponible', 'error');
      return;
    }

    navigator.vibrate(pattern);
    showSnackbar('Vibraci√≥n activada üì≥', 'info');
  }, [capabilities.vibration]);

  // üîî Gesti√≥n de notificaciones
  const requestNotificationPermission = useCallback(async () => {
    if (!capabilities.notifications) {
      showSnackbar('Notificaciones no disponibles', 'error');
      return;
    }

    try {
      const permission = await Notification.requestPermission();
      setNotificationsEnabled(permission === 'granted');
      
      if (permission === 'granted') {
        showSnackbar('Notificaciones habilitadas ‚úÖ', 'success');
        
        // Notificaci√≥n de prueba
        new Notification('¬°Coom√únity PWA!', {
          body: 'Las notificaciones est√°n ahora habilitadas üéâ',
          icon: '/icon-192x192.png',
          badge: '/icon-72x72.png',
        });
      } else {
        showSnackbar('Permisos de notificaci√≥n denegados', 'warning');
      }
    } catch (error) {
      showSnackbar('Error al solicitar permisos', 'error');
    }
  }, [capabilities.notifications]);

  // üì± Instalaci√≥n de la app
  const handleInstallApp = useCallback(async () => {
    if (!installPrompt) {
      showSnackbar('Instalaci√≥n no disponible', 'info');
      return;
    }

    try {
      const result = await installPrompt.prompt();
      
      if (result.outcome === 'accepted') {
        showSnackbar('¬°App instalada exitosamente! üéâ', 'success');
        triggerVibration([200, 100, 200]);
      }
      
      setInstallPrompt(null);
    } catch (error) {
      showSnackbar('Error durante la instalaci√≥n', 'error');
    }
  }, [installPrompt, triggerVibration]);

  // üì∏ Acceso a c√°mara
  const handleCameraAccess = useCallback(async () => {
    if (!capabilities.camera) {
      showSnackbar('C√°mara no disponible', 'error');
      return;
    }

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: 'environment' },
        audio: false 
      });
      
      showSnackbar('Acceso a c√°mara concedido üì∏', 'success');
      
      // Detener el stream despu√©s de 3 segundos (demo)
      setTimeout(() => {
        stream.getTracks().forEach(track => track.stop());
        showSnackbar('C√°mara desconectada', 'info');
      }, 3000);
      
    } catch (error) {
      showSnackbar('Error al acceder a la c√°mara', 'error');
    }
  }, [capabilities.camera]);

  // üé§ Acceso a micr√≥fono
  const handleMicrophoneAccess = useCallback(async () => {
    if (!capabilities.microphone) {
      showSnackbar('Micr√≥fono no disponible', 'error');
      return;
    }

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: true,
        video: false 
      });
      
      showSnackbar('Acceso a micr√≥fono concedido üé§', 'success');
      
      // Detener el stream despu√©s de 3 segundos (demo)
      setTimeout(() => {
        stream.getTracks().forEach(track => track.stop());
        showSnackbar('Micr√≥fono desconectado', 'info');
      }, 3000);
      
    } catch (error) {
      showSnackbar('Error al acceder al micr√≥fono', 'error');
    }
  }, [capabilities.microphone]);

  // üîß Funci√≥n auxiliar para mostrar snackbar
  const showSnackbar = (message: string, severity: 'success' | 'error' | 'info' | 'warning') => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity as 'success' | 'error' | 'info');
    setSnackbarOpen(true);
  };

  // üé® Componente de estado del dispositivo
  const DeviceStatus = () => (
    <Card sx={{ mb: 2 }}>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
          üì± Estado del Dispositivo
        </Typography>
        
        <Stack direction="row" spacing={1} flexWrap="wrap">
          <Chip 
            icon={deviceInfo.online ? <OnlineIcon /> : <OfflineIcon />}
            label={deviceInfo.online ? 'Online' : 'Offline'}
            color={deviceInfo.online ? 'success' : 'error'}
            size="small"
          />
          
          {deviceInfo.battery && (
            <Chip 
              icon={<BatteryIcon />}
              label={`${deviceInfo.battery.level}% ${deviceInfo.battery.charging ? '‚ö°' : ''}`}
              color={deviceInfo.battery.level > 20 ? 'success' : 'warning'}
              size="small"
            />
          )}
          
          <Chip 
            icon={<CompassIcon />}
            label={`${deviceInfo.orientation}¬∞`}
            size="small"
          />
          
          {location && (
            <Chip 
              icon={<LocationIcon />}
              label={`${location.latitude.toFixed(4)}, ${location.longitude.toFixed(4)}`}
              color="primary"
              size="small"
            />
          )}
        </Stack>
      </CardContent>
    </Card>
  );

  // üéõÔ∏è Panel de capacidades PWA
  const PWACapabilitiesPanel = () => (
    <Card sx={{ mb: 2 }}>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
          üöÄ Capacidades PWA
        </Typography>
        
        <Stack spacing={2}>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <ShareIcon sx={{ mr: 1, color: capabilities.share ? 'success.main' : 'text.disabled' }} />
              <Typography variant="body2">Compartir Nativo</Typography>
            </Box>
            <Button 
              size="small" 
              disabled={!capabilities.share}
              onClick={() => handleNativeShare({
                title: 'Coom√únity SuperApp',
                text: '¬°Descubre la experiencia gamificada de Coom√únity!',
                url: window.location.href
              })}
            >
              Probar
            </Button>
          </Box>
          
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <VibrationIcon sx={{ mr: 1, color: capabilities.vibration ? 'success.main' : 'text.disabled' }} />
              <Typography variant="body2">Vibraci√≥n</Typography>
            </Box>
            <Button 
              size="small" 
              disabled={!capabilities.vibration}
              onClick={() => triggerVibration([100, 50, 100, 50, 200])}
            >
              Vibrar
            </Button>
          </Box>
          
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <LocationIcon sx={{ mr: 1, color: capabilities.geolocation ? 'success.main' : 'text.disabled' }} />
              <Typography variant="body2">Geolocalizaci√≥n</Typography>
            </Box>
            <Button 
              size="small" 
              disabled={!capabilities.geolocation || isTracking}
              onClick={startLocationTracking}
            >
              {isTracking ? 'Rastreando...' : 'Ubicar'}
            </Button>
          </Box>
          
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <NotificationIcon sx={{ mr: 1, color: capabilities.notifications ? 'success.main' : 'text.disabled' }} />
              <Typography variant="body2">Notificaciones</Typography>
            </Box>
            <Button 
              size="small" 
              disabled={!capabilities.notifications}
              onClick={requestNotificationPermission}
            >
              {notificationsEnabled ? 'Habilitadas' : 'Habilitar'}
            </Button>
          </Box>
          
          {installPrompt && (
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <InstallIcon sx={{ mr: 1, color: 'primary.main' }} />
                <Typography variant="body2">Instalar App</Typography>
              </Box>
              <Button 
                size="small" 
                variant="contained"
                onClick={handleInstallApp}
                sx={{ bgcolor: '#E91E63' }}
              >
                Instalar
              </Button>
            </Box>
          )}
        </Stack>
      </CardContent>
    </Card>
  );

  return (
    <Box>
      {/* Estado del dispositivo */}
      <DeviceStatus />
      
      {/* Panel de capacidades */}
      <PWACapabilitiesPanel />
      
      {/* Acciones r√°pidas */}
      <Card>
        <CardContent>
          <Typography variant="h6" sx={{ mb: 2 }}>
            üéÆ Acciones R√°pidas
          </Typography>
          
          <Stack direction="row" spacing={1} flexWrap="wrap">
            <Button
              startIcon={<CameraIcon />}
              onClick={handleCameraAccess}
              disabled={!capabilities.camera}
              size="small"
            >
              C√°mara
            </Button>
            
            <Button
              startIcon={<MicIcon />}
              onClick={handleMicrophoneAccess}
              disabled={!capabilities.microphone}
              size="small"
            >
              Micr√≥fono
            </Button>
            
            <Button
              startIcon={<VibrationIcon />}
              onClick={() => triggerVibration([50, 50, 50])}
              disabled={!capabilities.vibration}
              size="small"
            >
              Vibrar
            </Button>
            
            <Button
              startIcon={<ShareIcon />}
              onClick={() => handleNativeShare({
                title: 'Mi ubicaci√≥n en Coom√únity',
                text: location 
                  ? `Estoy en: ${location.latitude.toFixed(4)}, ${location.longitude.toFixed(4)}`
                  : 'Usando Coom√únity SuperApp'
              })}
              disabled={!capabilities.share}
              size="small"
            >
              Compartir
            </Button>
          </Stack>
        </CardContent>
      </Card>

      {/* SpeedDial para acceso r√°pido a funciones PWA */}
      <SpeedDial
        ariaLabel="Funciones PWA"
        sx={{ position: 'fixed', bottom: 80, left: 16 }}
        icon={<SpeedDialIcon />}
        direction="up"
      >
        <SpeedDialAction
          icon={<ShareIcon />}
          tooltipTitle="Compartir"
          onClick={() => handleNativeShare({
            title: 'Coom√únity SuperApp',
            text: '¬°√önete a la experiencia gamificada!'
          })}
        />
        <SpeedDialAction
          icon={<LocationIcon />}
          tooltipTitle="Mi Ubicaci√≥n"
          onClick={startLocationTracking}
        />
        <SpeedDialAction
          icon={<VibrationIcon />}
          tooltipTitle="Vibrar"
          onClick={() => triggerVibration([100, 100, 100])}
        />
        <SpeedDialAction
          icon={<CameraIcon />}
          tooltipTitle="C√°mara"
          onClick={handleCameraAccess}
        />
      </SpeedDial>

      {/* Snackbar para feedback */}
      <Snackbar 
        open={snackbarOpen} 
        autoHideDuration={4000} 
        onClose={() => setSnackbarOpen(false)}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert 
          severity={snackbarSeverity} 
          onClose={() => setSnackbarOpen(false)}
          sx={{ fontWeight: 'bold' }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default PWAFeatures; 