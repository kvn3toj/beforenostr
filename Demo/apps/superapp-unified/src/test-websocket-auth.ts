// üß™ Test Script - Verificaci√≥n de Autenticaci√≥n WebSocket
// Script temporal para verificar la integraci√≥n JWT con WebSocket

import { 
  connectAuthenticatedWebSocket, 
  hasValidAuthForWebSocket,
  getWebSocketService
} from './lib/websocket-service';
import { AUTH_STORAGE_KEYS } from './config/constants';

console.log('üß™ [WebSocket Auth Test] Iniciando verificaci√≥n...');

// 1. Verificar si hay token v√°lido
console.log('üîë [Test] Verificando token de autenticaci√≥n...');
const hasToken = hasValidAuthForWebSocket();
console.log(`Token presente: ${hasToken ? '‚úÖ S√≠' : '‚ùå No'}`);

if (hasToken) {
  const token = localStorage.getItem(AUTH_STORAGE_KEYS.TOKEN);
  console.log(`Token (primeros 20 chars): ${token?.substring(0, 20)}...`);
  
  // 2. Test de conexi√≥n autenticada
  console.log('üîå [Test] Probando conexi√≥n autenticada...');
  
  connectAuthenticatedWebSocket()
    .then((connected) => {
      console.log(`‚úÖ [Test] Conexi√≥n exitosa: ${connected}`);
      
      // 3. Verificar estado de la conexi√≥n
      const service = getWebSocketService();
      const status = service.getStatus();
      console.log('üìä [Test] Estado de conexi√≥n:', status);
      
      // 4. Test b√°sico de unirse a sala
      setTimeout(() => {
        console.log('üö™ [Test] Probando unirse a sala de prueba...');
        service.joinRoom('test-auth-room');
        
        // 5. Desconectar despu√©s de 5 segundos
        setTimeout(() => {
          console.log('üîå [Test] Desconectando...');
          service.disconnect();
          console.log('‚úÖ [Test] Test completado');
        }, 5000);
      }, 2000);
    })
    .catch((error) => {
      console.error('‚ùå [Test] Error en conexi√≥n:', error.message);
    });
} else {
  console.log('‚ö†Ô∏è [Test] No hay token - Usuario debe iniciar sesi√≥n primero');
}

export {}; 