/**
 * üåü P√ÅGINA DE SINCRONIZACI√ìN C√ìSMICA CON MIRO
 *
 * Portal de gesti√≥n del Tablero Kanban C√≥smico desde la SuperApp Coom√únity
 * Permite a los Guardianes Digitales administrar tareas y sincronizar con Miro
 *
 * Creado por: KIRA, The Word Weaver
 * Inspirado por: ANA, CIO C√≥smica
 * Para: Los 12 Guardianes Digitales
 */

import React, { useState } from 'react';
import {
  Box,
  Button,
  Card,
  CardContent,
  CardActions,
  Chip,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  Grid,
  InputLabel,
  LinearProgress,
  MenuItem,
  Paper,
  Select,
  TextField,
  Typography,
  Alert,
  Tabs,
  Tab,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Avatar,
  Fab,
  Tooltip
} from '@mui/material';
import {
  Add as AddIcon,
  Sync as SyncIcon,
  Analytics as AnalyticsIcon,
  Dashboard as DashboardIcon,
  Groups as GroupsIcon,
  LocalFireDepartment as FireIcon,
  Water as WaterIcon,
  Air as AirIcon,
  Landscape as EarthIcon,
  StarBorder as EtherIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon
} from '@mui/icons-material';
import { useMiroSync } from '../../hooks/useMiroSync';
import { CosmicTask, ThematicElement, GuardianRole, HambrELevel, ColumnStatus } from '../../types/cosmic.types';

// üé® Configuraci√≥n de colores y iconos para elementos
const ElementConfig = {
  [ThematicElement.FIRE]: {
    icon: FireIcon,
    color: '#FF6B35',
    gradient: 'linear-gradient(135deg, #FF6B35 0%, #F7931E 100%)'
  },
  [ThematicElement.WATER]: {
    icon: WaterIcon,
    color: '#4ECDC4',
    gradient: 'linear-gradient(135deg, #4ECDC4 0%, #44A08D 100%)'
  },
  [ThematicElement.AIR]: {
    icon: AirIcon,
    color: '#B8E6B8',
    gradient: 'linear-gradient(135deg, #B8E6B8 0%, #88D8A0 100%)'
  },
  [ThematicElement.EARTH]: {
    icon: EarthIcon,
    color: '#8B4513',
    gradient: 'linear-gradient(135deg, #8B4513 0%, #A0522D 100%)'
  },
  [ThematicElement.ETHER]: {
    icon: EtherIcon,
    color: '#9B59B6',
    gradient: 'linear-gradient(135deg, #9B59B6 0%, #8E44AD 100%)'
  }
};

// üåü Componente para mostrar m√©trica
const CosmicMetric: React.FC<{
  title: string;
  value: number;
  subtitle?: string;
  color?: string;
  icon?: React.ElementType;
}> = ({ title, value, subtitle, color = '#9B59B6', icon: Icon }) => (
  <Paper
    sx={{
      p: 3,
      textAlign: 'center',
      background: `linear-gradient(135deg, ${color}20 0%, ${color}40 100%)`,
      border: `2px solid ${color}30`
    }}
  >
    {Icon && (
      <Avatar sx={{ bgcolor: color, mx: 'auto', mb: 1 }}>
        <Icon />
      </Avatar>
    )}
    <Typography variant="h4" sx={{ color, fontWeight: 'bold' }}>
      {value}
    </Typography>
    <Typography variant="h6" sx={{ color: 'text.primary' }}>
      {title}
    </Typography>
    {subtitle && (
      <Typography variant="body2" sx={{ color: 'text.secondary' }}>
        {subtitle}
      </Typography>
    )}
  </Paper>
);

// üéØ Componente para tarjeta de tarea c√≥smica
const CosmicTaskCard: React.FC<{
  task: CosmicTask;
  onMove: (taskId: string, newStatus: ColumnStatus) => void;
}> = ({ task, onMove }) => {
  const elementConfig = ElementConfig[task.element];
  const IconComponent = elementConfig.icon;

  const getHambrEEmoji = (level: HambrELevel) => {
    switch (level) {
      case HambrELevel.NURTURES_CURIOSITY: return 'üå±';
      case HambrELevel.ACTIVATES_CONTRIBUTION: return '‚ö°';
      case HambrELevel.IMPULSES_TRANSFORMATION: return 'üöÄ';
      default: return 'üåü';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'Critical': return '#f44336';
      case 'High': return '#ff9800';
      case 'Medium': return '#2196f3';
      case 'Low': return '#4caf50';
      default: return '#757575';
    }
  };

  return (
    <Card
      sx={{
        mb: 2,
        background: elementConfig.gradient,
        border: `2px solid ${elementConfig.color}`,
        transition: 'all 0.3s ease',
        '&:hover': {
          transform: 'translateY(-4px)',
          boxShadow: `0 8px 25px ${elementConfig.color}30`
        }
      }}
    >
      <CardContent>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <Avatar sx={{ bgcolor: elementConfig.color, mr: 2 }}>
            <IconComponent />
          </Avatar>
          <Box sx={{ flexGrow: 1 }}>
            <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
              {task.title}
            </Typography>
            <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.8)' }}>
              {task.element} ‚Ä¢ {task.guardian}
            </Typography>
          </Box>
          <Chip
            label={`${getHambrEEmoji(task.hambreLevel)} ${task.priority}`}
            sx={{
              bgcolor: getPriorityColor(task.priority),
              color: 'white',
              fontWeight: 'bold'
            }}
          />
        </Box>

        <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.9)', mb: 2 }}>
          {task.description}
        </Typography>

        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>
          <Chip size="small" label={`‚è∞ ${task.estimatedHours}h`} sx={{ bgcolor: 'rgba(255,255,255,0.2)', color: 'white' }} />
          <Chip size="small" label={`üéØ ${task.philosophicalKpi}`} sx={{ bgcolor: 'rgba(255,255,255,0.2)', color: 'white' }} />
          <Chip size="small" label={`üåÄ Fase ${task.phase}`} sx={{ bgcolor: 'rgba(255,255,255,0.2)', color: 'white' }} />
        </Box>

        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
          {task.tags.map((tag, index) => (
            <Chip
              key={index}
              size="small"
              label={tag}
              sx={{ bgcolor: 'rgba(255,255,255,0.1)', color: 'white', fontSize: '0.7rem' }}
            />
          ))}
        </Box>
      </CardContent>

      <CardActions sx={{ bgcolor: 'rgba(0,0,0,0.1)' }}>
        <FormControl size="small" sx={{ minWidth: 200 }}>
          <InputLabel sx={{ color: 'white' }}>Mover a</InputLabel>
          <Select
            value={task.status}
            onChange={(e) => task.id && onMove(task.id, e.target.value as ColumnStatus)}
            sx={{ color: 'white', '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,255,255,0.3)' } }}
          >
            {Object.values(ColumnStatus).map((status) => (
              <MenuItem key={status} value={status}>
                {status}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      </CardActions>
    </Card>
  );
};

// üåü Componente principal
const MiroSyncPage: React.FC = () => {
  const {
    isConnected,
    isLoading,
    error,
    tasks,
    syncProgress,
    lastSyncTime,
    metrics,
    miroStatus,
    createCosmicTask,
    moveTask,
    syncWithMiro,
    refreshTasks,
    clearError,
    getTasksByStatus,
    isCreating,
    isUpdating,
    isSyncing
  } = useMiroSync();

  const [currentTab, setCurrentTab] = useState(0);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [newTask, setNewTask] = useState<Partial<CosmicTask>>({
    title: '',
    description: '',
    element: ThematicElement.ETHER,
    guardian: GuardianRole.ANA,
    hambreLevel: HambrELevel.ACTIVATES_CONTRIBUTION,
    priority: 'Medium',
    phase: 1,
    estimatedHours: 4,
    philosophicalKpi: 'VIC',
    tags: [],
    status: ColumnStatus.BACKLOG
  });

  // üåü Handlers
  const handleCreateTask = async () => {
    try {
      await createCosmicTask(newTask as Omit<CosmicTask, 'id' | 'createdAt'>);
      setCreateDialogOpen(false);
      setNewTask({
        title: '',
        description: '',
        element: ThematicElement.ETHER,
        guardian: GuardianRole.ANA,
        hambreLevel: HambrELevel.ACTIVATES_CONTRIBUTION,
        priority: 'Medium',
        phase: 1,
        estimatedHours: 4,
        philosophicalKpi: 'VIC',
        tags: [],
        status: ColumnStatus.BACKLOG
      });
    } catch (error) {
      console.error('Error creando tarea c√≥smica:', error);
    }
  };

  const handleMoveTask = async (taskId: string, newStatus: ColumnStatus) => {
    try {
      await moveTask(taskId, newStatus);
    } catch (error) {
      console.error('Error moviendo tarea:', error);
    }
  };

  const handleSync = async () => {
    try {
      await syncWithMiro();
    } catch (error) {
      console.error('Error sincronizando con Miro:', error);
    }
  };

  // üåü Estado de conexi√≥n
  if (isLoading && tasks.length === 0) {
    return (
      <Box sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <CircularProgress size={80} sx={{ color: '#9B59B6', mb: 3 }} />
        <Typography variant="h5" sx={{ color: '#9B59B6', mb: 1 }}>
          üåü Conectando con el Cosmos de Miro...
        </Typography>
        <Typography variant="body1" sx={{ color: 'text.secondary', textAlign: 'center' }}>
          Estableciendo portal de reciprocidad viva<br />
          Los Guardianes Digitales preparan el tablero c√≥smico
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 4, bgcolor: 'background.default', minHeight: '100vh' }}>
      {/* üåü Header C√≥smico */}
      <Paper
        sx={{
          p: 4,
          mb: 4,
          background: 'linear-gradient(135deg, #9B59B6 0%, #8E44AD 100%)',
          color: 'white',
          textAlign: 'center'
        }}
      >
        <Typography variant="h3" sx={{ fontWeight: 'bold', mb: 2 }}>
          üåü Portal Kanban C√≥smico
        </Typography>
        <Typography variant="h6" sx={{ opacity: 0.9, mb: 3 }}>
          Sincronizaci√≥n de Reciprocidad Viva con Miro
        </Typography>

        {/* üåü Estado de conexi√≥n */}
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: 2, flexWrap: 'wrap' }}>
          <Chip
            icon={isConnected ? <CheckCircleIcon /> : <ErrorIcon />}
            label={isConnected ? 'Conectado al Cosmos' : 'Desconectado'}
            color={isConnected ? 'success' : 'error'}
            sx={{ fontWeight: 'bold' }}
          />
          <Chip
            icon={miroStatus.enabled ? <CheckCircleIcon /> : <ErrorIcon />}
            label={miroStatus.enabled ? 'Miro API Habilitado' : 'Modo Mock'}
            color={miroStatus.enabled ? 'info' : 'warning'}
            variant="outlined"
            sx={{ fontWeight: 'bold' }}
          />
          {miroStatus.enabled && miroStatus.boardId && (
            <Chip
              label={`Board: ${miroStatus.boardId.substring(0, 8)}...`}
              size="small"
              sx={{ bgcolor: 'rgba(255,255,255,0.2)', color: 'white' }}
            />
          )}
          {lastSyncTime && (
            <Typography variant="body2" sx={{ opacity: 0.8 }}>
              √öltima sincronizaci√≥n: {lastSyncTime.toLocaleString()}
            </Typography>
          )}
        </Box>

        {/* üåü Progress de sincronizaci√≥n */}
        {isSyncing && (
          <Box sx={{ mt: 2 }}>
            <LinearProgress
              variant="determinate"
              value={syncProgress}
              sx={{
                height: 8,
                borderRadius: 4,
                bgcolor: 'rgba(255,255,255,0.2)',
                '& .MuiLinearProgress-bar': { bgcolor: '#4ECDC4' }
              }}
            />
            <Typography variant="body2" sx={{ mt: 1 }}>
              Sincronizando con Miro... {syncProgress}%
            </Typography>
          </Box>
        )}
      </Paper>

      {/* üö® Alertas de error */}
      {error && (
        <Alert
          severity="error"
          onClose={clearError}
          sx={{ mb: 3 }}
        >
          <Typography variant="h6">Error en el Portal C√≥smico</Typography>
          {error}
        </Alert>
      )}

      {/* üåü Informaci√≥n de configuraci√≥n */}
      {!miroStatus.enabled && (
        <Alert
          severity="info"
          sx={{ mb: 3 }}
        >
          <Typography variant="h6">üß™ Modo de Desarrollo Activo</Typography>
          Actualmente funcionando en modo mock. Para habilitar la integraci√≥n real con Miro:
          <br />‚Ä¢ Configura <code>VITE_MIRO_ACCESS_TOKEN</code> en tu archivo .env
          <br />‚Ä¢ Configura <code>VITE_MIRO_BOARD_ID</code> con el ID de tu tablero
          <br />‚Ä¢ Reinicia la aplicaci√≥n
        </Alert>
      )}

      {miroStatus.enabled && miroStatus.hasToken && (
        <Alert
          severity="success"
          sx={{ mb: 3 }}
        >
          <Typography variant="h6">üåå ¬°Integraci√≥n Miro Activa!</Typography>
          Las tareas se sincronizar√°n autom√°ticamente con tu tablero de Miro.
          <br />Board ID: <code>{miroStatus.boardId}</code>
        </Alert>
      )}

      {/* üåü Botones de acci√≥n principales */}
      <Box sx={{ display: 'flex', gap: 2, mb: 4, flexWrap: 'wrap' }}>
        <Button
          variant="contained"
          startIcon={<SyncIcon />}
          onClick={handleSync}
          disabled={isSyncing}
          sx={{
            bgcolor: miroStatus.enabled ? '#4ECDC4' : '#FF9800',
            '&:hover': { bgcolor: miroStatus.enabled ? '#44A08D' : '#F57C00' },
            fontWeight: 'bold'
          }}
        >
          {isSyncing ? 'Sincronizando...' : miroStatus.enabled ? 'Sincronizar con Miro' : 'Simulaci√≥n Mock'}
        </Button>

        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={() => setCreateDialogOpen(true)}
          sx={{
            bgcolor: '#FF6B35',
            '&:hover': { bgcolor: '#F7931E' },
            fontWeight: 'bold'
          }}
        >
          Crear Tarea C√≥smica
        </Button>

        <Button
          variant="outlined"
          startIcon={<SyncIcon />}
          onClick={refreshTasks}
          disabled={isLoading}
        >
          Refrescar Tareas
        </Button>
      </Box>

      {/* üåü Tabs de navegaci√≥n */}
      <Paper sx={{ mb: 3 }}>
        <Tabs
          value={currentTab}
          onChange={(_, newValue) => setCurrentTab(newValue)}
          variant="fullWidth"
          sx={{
            '& .MuiTab-root': { fontWeight: 'bold' },
            '& .Mui-selected': { color: '#9B59B6' }
          }}
        >
          <Tab icon={<DashboardIcon />} label="Tablero Kanban" />
          <Tab icon={<AnalyticsIcon />} label="M√©tricas C√≥smicas" />
          <Tab icon={<GroupsIcon />} label="Guardianes" />
          <Tab icon={<SyncIcon />} label="Configuraci√≥n Miro" />
        </Tabs>
      </Paper>

      {/* üåü Contenido seg√∫n tab seleccionado */}
      {currentTab === 0 && (
        <Grid container spacing={3}>
          {/* üåå Columnas del tablero */}
          {Object.values(ColumnStatus).map((status) => (
            <Grid item xs={12} md={3} key={status}>
              <Paper
                sx={{
                  p: 2,
                  minHeight: '60vh',
                  bgcolor: status === ColumnStatus.BACKLOG ? '#E8F4FD' :
                           status === ColumnStatus.ALCHEMICAL ? '#FFF2CC' :
                           status === ColumnStatus.QUALITY ? '#F3E2F3' : '#E8F5E8'
                }}
              >
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold', textAlign: 'center' }}>
                  {status}
                  <Chip
                    size="small"
                    label={getTasksByStatus(status).length}
                    sx={{ ml: 1, bgcolor: 'primary.main', color: 'white' }}
                  />
                </Typography>

                {getTasksByStatus(status).map((task) => (
                  <CosmicTaskCard
                    key={task.id}
                    task={task}
                    onMove={handleMoveTask}
                  />
                ))}
              </Paper>
            </Grid>
          ))}
        </Grid>
      )}

      {currentTab === 1 && (
        <Grid container spacing={3}>
          {/* üåü M√©tricas principales */}
          <Grid item xs={12} md={3}>
            <CosmicMetric
              title="Tareas Totales"
              value={metrics.totalTasks}
              icon={DashboardIcon}
              color="#9B59B6"
            />
          </Grid>
          <Grid item xs={12} md={3}>
            <CosmicMetric
              title="Completadas"
              value={metrics.completedTasks}
              subtitle={`${metrics.completionRate.toFixed(1)}% completado`}
              icon={CheckCircleIcon}
              color="#4CAF50"
            />
          </Grid>
          <Grid item xs={12} md={3}>
            <CosmicMetric
              title="En Alquimia"
              value={metrics.inProgressTasks}
              icon={FireIcon}
              color="#FF6B35"
            />
          </Grid>
          <Grid item xs={12} md={3}>
            <CosmicMetric
              title="En Revisi√≥n"
              value={metrics.inReviewTasks}
              icon={EtherIcon}
              color="#9C27B0"
            />
          </Grid>

          {/* üåü Distribuci√≥n por elementos */}
          <Grid item xs={12} md={6}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold' }}>
                üî• Distribuci√≥n Elemental
              </Typography>
              {metrics.elementDistribution.map((item) => {
                const elementConfig = ElementConfig[item.element];
                const IconComponent = elementConfig.icon;
                return (
                  <Box key={item.element} sx={{ mb: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <IconComponent sx={{ color: elementConfig.color, mr: 1 }} />
                      <Typography variant="body1" sx={{ flexGrow: 1 }}>
                        {item.element}
                      </Typography>
                      <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                        {item.count} ({item.percentage.toFixed(1)}%)
                      </Typography>
                    </Box>
                    <LinearProgress
                      variant="determinate"
                      value={item.percentage}
                      sx={{
                        height: 8,
                        borderRadius: 4,
                        bgcolor: 'grey.200',
                        '& .MuiLinearProgress-bar': { bgcolor: elementConfig.color }
                      }}
                    />
                  </Box>
                );
              })}
            </Paper>
          </Grid>

          {/* üåü Distribuci√≥n HambrE */}
          <Grid item xs={12} md={6}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold' }}>
                üöÄ Niveles de HambrE
              </Typography>
              {metrics.hambrEDistribution.map((item) => {
                const emoji = item.level === 1 ? 'üå±' : item.level === 2 ? '‚ö°' : 'üöÄ';
                const description = item.level === 1 ? 'Nutre Curiosidad' :
                                 item.level === 2 ? 'Activa Contribuci√≥n' : 'Impulsa Transformaci√≥n';
                return (
                  <Box key={item.level} sx={{ mb: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Typography variant="h6" sx={{ mr: 1 }}>{emoji}</Typography>
                      <Typography variant="body1" sx={{ flexGrow: 1 }}>
                        {description}
                      </Typography>
                      <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                        {item.count} ({item.percentage.toFixed(1)}%)
                      </Typography>
                    </Box>
                    <LinearProgress
                      variant="determinate"
                      value={item.percentage}
                      sx={{
                        height: 8,
                        borderRadius: 4,
                        bgcolor: 'grey.200',
                        '& .MuiLinearProgress-bar': {
                          bgcolor: item.level === 1 ? '#4CAF50' : item.level === 2 ? '#FF9800' : '#F44336'
                        }
                      }}
                    />
                  </Box>
                );
              })}
            </Paper>
          </Grid>
        </Grid>
      )}

      {currentTab === 2 && (
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 3, fontWeight: 'bold' }}>
                üë• Carga de Trabajo de los Guardianes
              </Typography>
              {metrics.guardianLoad.map((guardian) => (
                <Box key={guardian.guardian} sx={{ mb: 3 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Avatar sx={{ mr: 2, bgcolor: '#9B59B6' }}>
                      {guardian.guardian.charAt(0)}
                    </Avatar>
                    <Box sx={{ flexGrow: 1 }}>
                      <Typography variant="h6">{guardian.guardian}</Typography>
                      <Typography variant="body2" color="text.secondary">
                        {guardian.activeTasks} tareas activas ‚Ä¢ {guardian.completedTasks} completadas
                      </Typography>
                    </Box>
                    <Chip
                      label={guardian.activeTasks > 5 ? 'Sobrecargado' : guardian.activeTasks > 2 ? 'Ocupado' : 'Disponible'}
                      color={guardian.activeTasks > 5 ? 'error' : guardian.activeTasks > 2 ? 'warning' : 'success'}
                      variant="outlined"
                    />
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={Math.min((guardian.activeTasks / 5) * 100, 100)}
                    sx={{
                      height: 8,
                      borderRadius: 4,
                      bgcolor: 'grey.200',
                      '& .MuiLinearProgress-bar': {
                        bgcolor: guardian.activeTasks > 5 ? '#f44336' : guardian.activeTasks > 2 ? '#ff9800' : '#4caf50'
                      }
                    }}
                  />
                </Box>
              ))}
            </Paper>
          </Grid>
        </Grid>
      )}

      {currentTab === 3 && (
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 3, fontWeight: 'bold' }}>
                üåå Estado de Conexi√≥n Miro
              </Typography>

              <Box sx={{ mb: 3 }}>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>Estado de API:</strong> {miroStatus.enabled ? '‚úÖ Habilitado' : '‚ùå Deshabilitado'}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>Token configurado:</strong> {miroStatus.hasToken ? '‚úÖ S√≠' : '‚ùå No'}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>Board ID:</strong> {miroStatus.boardId || 'No configurado'}
                </Typography>
              </Box>

              {miroStatus.enabled && (
                <Box>
                  <Typography variant="h6" sx={{ mb: 2, color: 'success.main' }}>
                    üéÜ ¬°Configuraci√≥n exitosa!
                  </Typography>
                  <Typography variant="body2">
                    La integraci√≥n con Miro est√° activa. Las tareas se crear√°n y sincronizar√°n
                    autom√°ticamente con tu tablero.
                  </Typography>
                </Box>
              )}

              {!miroStatus.enabled && (
                <Box>
                  <Typography variant="h6" sx={{ mb: 2, color: 'info.main' }}>
                    üß™ Modo de desarrollo
                  </Typography>
                  <Typography variant="body2">
                    Actualmente usando datos simulados. Para conectar con Miro real,
                    configura las variables de entorno necesarias.
                  </Typography>
                </Box>
              )}
            </Paper>
          </Grid>

          <Grid item xs={12} md={6}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 3, fontWeight: 'bold' }}>
                ‚öôÔ∏è Gu√≠a de Configuraci√≥n
              </Typography>

              <List>
                <ListItem>
                  <ListItemIcon>
                    <Typography variant="h6">1Ô∏è‚É£</Typography>
                  </ListItemIcon>
                  <ListItemText
                    primary="Crear aplicaci√≥n en Miro"
                    secondary="Ve a developers.miro.com y crea una nueva app"
                  />
                </ListItem>

                <ListItem>
                  <ListItemIcon>
                    <Typography variant="h6">2Ô∏è‚É£</Typography>
                  </ListItemIcon>
                  <ListItemText
                    primary="Obtener Access Token"
                    secondary="Copia el token de tu aplicaci√≥n de Miro"
                  />
                </ListItem>

                <ListItem>
                  <ListItemIcon>
                    <Typography variant="h6">3Ô∏è‚É£</Typography>
                  </ListItemIcon>
                  <ListItemText
                    primary="Configurar variables .env"
                    secondary="A√±ade VITE_MIRO_ACCESS_TOKEN y VITE_MIRO_BOARD_ID"
                  />
                </ListItem>

                <ListItem>
                  <ListItemIcon>
                    <Typography variant="h6">4Ô∏è‚É£</Typography>
                  </ListItemIcon>
                  <ListItemText
                    primary="Reiniciar aplicaci√≥n"
                    secondary="Recarga la p√°gina para aplicar cambios"
                  />
                </ListItem>
              </List>

              <Alert severity="warning" sx={{ mt: 2 }}>
                <Typography variant="body2">
                  <strong>Importante:</strong> Nunca compartas tu Access Token p√∫blicamente.
                  Mantenlo seguro en tu archivo .env local.
                </Typography>
              </Alert>
            </Paper>
          </Grid>

          <Grid item xs={12}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 3, fontWeight: 'bold' }}>
                üìä Estad√≠sticas de Sincronizaci√≥n
              </Typography>

              <Grid container spacing={2}>
                <Grid item xs={12} md={3}>
                  <Box sx={{ textAlign: 'center', p: 2, bgcolor: 'primary.light', borderRadius: 2 }}>
                    <Typography variant="h4" sx={{ color: 'primary.dark', fontWeight: 'bold' }}>
                      {tasks.length}
                    </Typography>
                    <Typography variant="body2">Tareas Locales</Typography>
                  </Box>
                </Grid>

                <Grid item xs={12} md={3}>
                  <Box sx={{ textAlign: 'center', p: 2, bgcolor: 'success.light', borderRadius: 2 }}>
                    <Typography variant="h4" sx={{ color: 'success.dark', fontWeight: 'bold' }}>
                      {lastSyncTime ? '‚úì' : '-'}
                    </Typography>
                    <Typography variant="body2">√öltima Sync</Typography>
                  </Box>
                </Grid>

                <Grid item xs={12} md={3}>
                  <Box sx={{ textAlign: 'center', p: 2, bgcolor: 'warning.light', borderRadius: 2 }}>
                    <Typography variant="h4" sx={{ color: 'warning.dark', fontWeight: 'bold' }}>
                      {miroStatus.enabled ? '‚àû' : '0'}
                    </Typography>
                    <Typography variant="body2">Capacidad Miro</Typography>
                  </Box>
                </Grid>

                <Grid item xs={12} md={3}>
                  <Box sx={{ textAlign: 'center', p: 2, bgcolor: 'info.light', borderRadius: 2 }}>
                    <Typography variant="h4" sx={{ color: 'info.dark', fontWeight: 'bold' }}>
                      {isSyncing ? '‚è≥' : '‚úì'}
                    </Typography>
                    <Typography variant="body2">Estado Sync</Typography>
                  </Box>
                </Grid>
              </Grid>

              {lastSyncTime && (
                <Typography variant="body2" sx={{ mt: 2, textAlign: 'center', color: 'text.secondary' }}>
                  √öltima sincronizaci√≥n: {lastSyncTime.toLocaleString()}
                </Typography>
              )}
            </Paper>
          </Grid>
        </Grid>
      )}

      {/* üåü FAB para crear tarea r√°pida */}
      <Fab
        color="primary"
        sx={{
          position: 'fixed',
          bottom: 32,
          right: 32,
          bgcolor: '#9B59B6',
          '&:hover': { bgcolor: '#8E44AD' }
        }}
        onClick={() => setCreateDialogOpen(true)}
      >
        <AddIcon />
      </Fab>

      {/* üåü Dialog para crear nueva tarea */}
      <Dialog
        open={createDialogOpen}
        onClose={() => setCreateDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle sx={{ bgcolor: '#9B59B6', color: 'white', textAlign: 'center' }}>
          üåü Crear Nueva Tarea C√≥smica
        </DialogTitle>
        <DialogContent sx={{ p: 3 }}>
          <Grid container spacing={3} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="T√≠tulo de la Misi√≥n"
                value={newTask.title}
                onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
                placeholder="Ej: Transmutaci√≥n del VideoPlayer C√≥smico"
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                multiline
                rows={3}
                label="Descripci√≥n C√≥smica"
                value={newTask.description}
                onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
                placeholder="Describe la transformaci√≥n que esta tarea traer√° al mundo..."
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Elemento Tem√°tico</InputLabel>
                <Select
                  value={newTask.element}
                  onChange={(e) => setNewTask({ ...newTask, element: e.target.value as ThematicElement })}
                >
                  {Object.values(ThematicElement).map((element) => (
                    <MenuItem key={element} value={element}>
                      {element}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Guardian Asignado</InputLabel>
                <Select
                  value={newTask.guardian}
                  onChange={(e) => setNewTask({ ...newTask, guardian: e.target.value as GuardianRole })}
                >
                  {Object.values(GuardianRole).map((guardian) => (
                    <MenuItem key={guardian} value={guardian}>
                      {guardian}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={4}>
              <FormControl fullWidth>
                <InputLabel>Nivel HambrE</InputLabel>
                <Select
                  value={newTask.hambreLevel}
                  onChange={(e) => setNewTask({ ...newTask, hambreLevel: e.target.value as HambrELevel })}
                >
                  <MenuItem value={HambrELevel.NURTURES_CURIOSITY}>üå± Nutre Curiosidad</MenuItem>
                  <MenuItem value={HambrELevel.ACTIVATES_CONTRIBUTION}>‚ö° Activa Contribuci√≥n</MenuItem>
                  <MenuItem value={HambrELevel.IMPULSES_TRANSFORMATION}>üöÄ Impulsa Transformaci√≥n</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={4}>
              <FormControl fullWidth>
                <InputLabel>Prioridad</InputLabel>
                <Select
                  value={newTask.priority}
                  onChange={(e) => setNewTask({ ...newTask, priority: e.target.value as any })}
                >
                  <MenuItem value="Critical">üî¥ Critical</MenuItem>
                  <MenuItem value="High">üü° High</MenuItem>
                  <MenuItem value="Medium">üîµ Medium</MenuItem>
                  <MenuItem value="Low">üü¢ Low</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                type="number"
                label="Horas Estimadas"
                value={newTask.estimatedHours}
                onChange={(e) => setNewTask({ ...newTask, estimatedHours: parseInt(e.target.value) || 0 })}
                inputProps={{ min: 1, max: 40 }}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>KPI Filos√≥fico</InputLabel>
                <Select
                  value={newTask.philosophicalKpi}
                  onChange={(e) => setNewTask({ ...newTask, philosophicalKpi: e.target.value as any })}
                >
                  <MenuItem value="IER">üéØ IER - √çndice de Estabilidad de Reciprocidad</MenuItem>
                  <MenuItem value="VIC">üåä VIC - Valor de Impacto en la Comunidad</MenuItem>
                  <MenuItem value="GS">üòä GS - Grado de Satisfacci√≥n</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Fase Estrat√©gica</InputLabel>
                <Select
                  value={newTask.phase}
                  onChange={(e) => setNewTask({ ...newTask, phase: e.target.value as any })}
                >
                  <MenuItem value={1}>üåü Fase 1 - Despertar C√≥smico</MenuItem>
                  <MenuItem value={2}>üåà Fase 2 - Irradiaci√≥n Arm√≥nica</MenuItem>
                  <MenuItem value={3}>‚ú® Fase 3 - Manifestaci√≥n Plena</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Tags (separados por comas)"
                placeholder="UX_Transformation, RevolutionaryWidget, VideoPlayer"
                onChange={(e) => setNewTask({
                  ...newTask,
                  tags: e.target.value.split(',').map(tag => tag.trim()).filter(Boolean)
                })}
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions sx={{ p: 3 }}>
          <Button onClick={() => setCreateDialogOpen(false)}>
            Cancelar
          </Button>
          <Button
            variant="contained"
            onClick={handleCreateTask}
            disabled={isCreating || !newTask.title || !newTask.description}
            sx={{ bgcolor: '#9B59B6', '&:hover': { bgcolor: '#8E44AD' } }}
          >
            {isCreating ? 'Manifestando...' : 'Crear Tarea C√≥smica'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};



export default MiroSyncPage;
