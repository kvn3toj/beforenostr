import React, { useState, useEffect, useCallback, useMemo } from 'react';

// üéØ REGLA #1: IMPORTS ESPEC√çFICOS DE MATERIAL UI
import Container from '@mui/material/Container';
import Grid from '@mui/material/Grid';
import Alert from '@mui/material/Alert';
import Button from '@mui/material/Button';
import Box from '@mui/material/Box';
import Snackbar from '@mui/material/Snackbar';
import Fab from '@mui/material/Fab';
import Skeleton from '@mui/material/Skeleton';
import Tooltip from '@mui/material/Tooltip';
import CircularProgress from '@mui/material/CircularProgress';
import Badge from '@mui/material/Badge';
import { useTheme, alpha, useMediaQuery } from '@mui/material';

// üéØ REGLA #1: IMPORTS ESPEC√çFICOS DE ICONOS
import RefreshIcon from '@mui/icons-material/Refresh';
import AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';
import EmojiEventsIcon from '@mui/icons-material/EmojiEvents';
import GroupsIcon from '@mui/icons-material/Groups';
import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';
import UpdateIcon from '@mui/icons-material/Update';
import PsychologyIcon from '@mui/icons-material/Psychology';
import NotificationsIcon from '@mui/icons-material/Notifications';
import SettingsIcon from '@mui/icons-material/Settings';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import InsightsIcon from '@mui/icons-material/Insights';
import SpeedIcon from '@mui/icons-material/Speed';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import {
  useDashboardData,
  useBackendAvailability,
  type BackendWalletData,
  type BackendGameData,
  type BackendUser,
} from '../hooks/useRealBackendData';
import { toSafeNumber } from '../utils/numberUtils';
import SafeFade from '../components/ui/SafeFade';

// üéØ Hooks personalizados mejorados
import { useIntelligentNavigation } from '../hooks/home/useIntelligentNavigation';
import { useHomeSkeletons } from '../components/home/OptimizedHomeSkeletons';

// üéØ Componentes modulares del Home
import {
  WelcomeHeader,
  AyniMetricsCard,
  WalletOverview,
  QuickActionsGrid,
  ModuleCards,
  NotificationCenter,
  // üöÄ Phase 3: Advanced Visual Components
  AdvancedInsightsPanel,
  AyniBalanceVisualization,
  PerformanceMonitor,
  SmartQuickActions,
  IntelligentNotificationCenter,
  // üéØ Nuevos componentes optimizados
  OptimizedHomeSkeletons,
  AccessibilityEnhancer,
  // üöÄ Componentes visuales mejorados
  EnhancedWelcomeBanner,
  EnhancedModuleCards,
  RealTimeMetricsDashboard,
  AchievementsProgressPanel,
  EnergyWeatherWidget,
  LiveActivityFeed,
} from '../components/home';

// üé® Importar estilos Phase 3
import '../styles/home-enhanced.css';
// üéØ Importar correcci√≥n inteligente (mantiene colores, elimina problemas)
import '../styles/home-smart-fix.css';
// üìê Importar ajustes finales de espaciado
import '../styles/home-spacing-final.css';
// üõ°Ô∏è Importar prevenci√≥n de errores de scroll
import '../styles/scroll-error-prevention.css';

// üè∑Ô∏è Tipos para las notificaciones inteligentes
interface Notification {
  id: string;
  type:
    | 'ayni'
    | 'meritos'
    | 'social'
    | 'marketplace'
    | 'system'
    | 'achievement'
    | 'tip';
  title: string;
  message: string;
  time: string;
  icon: React.ReactElement;
  color: 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info';
  isRead?: boolean;
  priority: 'critical' | 'high' | 'medium' | 'low';
  actionLabel?: string;
  onAction?: () => void;
  category: 'urgent' | 'social' | 'achievement' | 'tip' | 'system';
  aiScore?: number;
  userEngagement?: number;
  smartSuggestion?: string;
}

// üé≠ Datos mock con terminolog√≠a Coom√únity actualizada
const mockDashboardData = {
  gamification: {
    ondas: 1250, // √ñndas (energ√≠a vibracional)
    meritos: 485, // M√´ritos (logros por Bien Com√∫n)
    ayniLevel: 'Colaborador Equilibrado',
    nextLevel: 'Guardi√°n del Bien Com√∫n',
    ayniProgress: 78,
    bienComunContributions: 23,
    balanceAyni: 0.85, // Proporci√≥n de dar/recibir
    streak: 12,
    elementos: {
      fuego: 85, // Pasi√≥n y acci√≥n
      agua: 92, // Fluir y adaptabilidad
      tierra: 78, // Estabilidad y confianza
      aire: 88, // Comunicaci√≥n e ideas
    },
  },
  wallet: {
    lukas: 125075, // L√ºkas (moneda interna)
    ayniCredits: 480, // Cr√©ditos de reciprocidad
    monthlyChange: 15.2,
    pendingTransactions: 3,
    ayniBalance: 0.85, // Balance de dar/recibir
  },
  notifications: [
    {
      id: '1',
      type: 'ayni' as const,
      title: 'Ayni completado',
      message:
        'Has completado un intercambio equilibrado con Mar√≠a. Tu balance Ayni ha mejorado.',
      time: '2h',
      icon: <AutoAwesomeIcon />,
      color: 'success' as const,
      priority: 'high' as const,
      actionLabel: 'Ver detalles',
      onAction: () => console.log('Viewing Ayni details'),
    },
    {
      id: '2',
      type: 'meritos' as const,
      title: 'Nuevos M√´ritos ganados',
      message:
        'Has ganado 50 M√´ritos por tu contribuci√≥n al proyecto "Huerta Comunitaria"',
      time: '4h',
      icon: <EmojiEventsIcon />,
      color: 'warning' as const,
      priority: 'high' as const,
      actionLabel: 'Ver logros',
      onAction: () => console.log('Viewing achievements'),
    },
    {
      id: '3',
      type: 'social' as const,
      title: 'Invitaci√≥n a Comunidad',
      message:
        'Te han invitado a unirte al c√≠rculo "Emprendedores Confiables de Medell√≠n"',
      time: '1d',
      icon: <GroupsIcon />,
      color: 'primary' as const,
      priority: 'medium' as const,
      actionLabel: 'Responder',
      onAction: () => console.log('Responding to invitation'),
    },
    {
      id: '4',
      type: 'system' as const,
      title: 'Actualizaci√≥n disponible',
      message:
        'Nueva versi√≥n de Coom√únity disponible con mejoras en el sistema de Ayni',
      time: '3d',
      icon: <UpdateIcon />,
      color: 'info' as const,
      priority: 'low' as const,
      actionLabel: 'Actualizar',
      onAction: () => console.log('Updating system'),
    },
    {
      id: '5',
      type: 'marketplace' as const,
      title: 'Oferta personalizada',
      message:
        'Basado en tu actividad, hemos encontrado productos que podr√≠an interesarte',
      time: '5h',
      icon: <TrendingUpIcon />,
      color: 'secondary' as const,
      priority: 'medium' as const,
      actionLabel: 'Ver ofertas',
      onAction: () => console.log('Viewing marketplace offers'),
      aiScore: 85,
      userEngagement: 72,
      smartSuggestion: 'Productos relacionados con tus intereses recientes',
      category: 'social' as const,
    },
    {
      id: '6',
      type: 'achievement' as const,
      title: 'Nuevo logro desbloqueado',
      message:
        '¬°Felicitaciones! Has alcanzado el nivel "Colaborador Experimentado"',
      time: '1h',
      icon: <EmojiEventsIcon />,
      color: 'success' as const,
      priority: 'high' as const,
      actionLabel: 'Ver perfil',
      onAction: () => console.log('Viewing profile'),
      aiScore: 95,
      userEngagement: 90,
      smartSuggestion: 'Comparte este logro con tu red para inspirar a otros',
      category: 'achievement' as const,
      isRead: false,
    },
    {
      id: '7',
      type: 'tip' as const,
      title: 'Tip inteligente',
      message:
        'Basado en tu actividad, te recomendamos explorar el m√≥dulo de √úStats para optimizar tu progreso',
      time: '6h',
      icon: <PsychologyIcon />,
      color: 'info' as const,
      priority: 'low' as const,
      actionLabel: 'Ir a √úStats',
      onAction: () => console.log('Going to UStats'),
      aiScore: 78,
      userEngagement: 65,
      smartSuggestion:
        'Los usuarios con tu perfil aumentan 40% su productividad usando √úStats',
      category: 'tip' as const,
    },
  ] as Notification[],
};

// üéØ Hook personalizado para scroll to top (ORDEN #1 - Sin dependencias)
const useScrollToTop = () => {
  const [showScrollTop, setShowScrollTop] = useState(false);

  // Funci√≥n de scroll sin dependencias
  const scrollToTop = useCallback(() => {
    try {
      window.scrollTo({
        top: 0,
        behavior: 'smooth',
      });
    } catch (error) {
      console.warn('Error en scrollToTop:', error);
      // Fallback sin smooth scroll
      try {
        window.scrollTo(0, 0);
      } catch (fallbackError) {
        console.warn('Error en fallback scrollTo:', fallbackError);
      }
    }
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      try {
        setShowScrollTop(window.scrollY > 300);
      } catch (error) {
        console.warn('Error obteniendo window.scrollY:', error);
        setShowScrollTop(false);
      }
    };

    try {
      window.addEventListener('scroll', handleScroll, { passive: true });
      return () => {
        try {
          window.removeEventListener('scroll', handleScroll);
        } catch (error) {
          console.warn('Error removiendo scroll listener:', error);
        }
      };
    } catch (error) {
      console.warn('Error agregando scroll listener:', error);
      return () => {};
    }
  }, []);

  return { showScrollTop, scrollToTop };
};

// üîÑ Hook personalizado para actualizaciones en tiempo real (ORDEN #2 - Depende de funci√≥n externa)
const useRealTimeUpdates = (refetchFunction?: () => void) => {
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [isUpdating, setIsUpdating] = useState(false);

  // useCallback con orden correcto de dependencias
  const updateData = useCallback(async () => {
    if (!refetchFunction) return;

    setIsUpdating(true);
    try {
      await refetchFunction();
      setLastUpdate(new Date());
    } catch (error) {
      console.error('üö® Error updating data:', error);
    } finally {
      setIsUpdating(false);
    }
  }, [refetchFunction]);

  useEffect(() => {
    // Actualizar cada 30 segundos
    const interval = setInterval(updateData, 30000);
    return () => clearInterval(interval);
  }, [updateData]);

  return { lastUpdate, isUpdating, updateData };
};

// üéØ Hook personalizado para m√©tricas de performance (NUEVO)
const useHomePerformance = () => {
  const [performanceMetrics, setPerformanceMetrics] = useState({
    renderTime: 0,
    interactiveTime: 0,
    lastOptimization: new Date(),
  });

  const updatePerformanceMetrics = useCallback(() => {
    const renderEnd = performance.now();
    setPerformanceMetrics((prev) => ({
      ...prev,
      renderTime: renderEnd,
      interactiveTime: renderEnd,
      lastOptimization: new Date(),
    }));
  }, []);

  useEffect(() => {
    updatePerformanceMetrics();
  }, [updatePerformanceMetrics]);

  return { performanceMetrics, updatePerformanceMetrics };
};

// üéØ Componente principal del Home
export const Home: React.FC = () => {
  const theme = useTheme();
  const navigate = useNavigate();
  const { user } = useAuth();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isTablet = useMediaQuery(theme.breakpoints.between('md', 'lg'));

  // üéØ Estados locales b√°sicos
  const [notificationsOpen, setNotificationsOpen] = useState(false);
  const [animate, setAnimate] = useState(false);
  const [successMessage, setSuccessMessage] = useState<string>('');

  // üöÄ Estados avanzados para funcionalidades mejoradas
  const [insightsPanelOpen, setInsightsPanelOpen] = useState(false);
  const [showAyniVisualization, setShowAyniVisualization] = useState(false);
  const [quickActionsExpanded, setQuickActionsExpanded] = useState(false);
  const [performanceMode, setPerformanceMode] = useState<
    'normal' | 'optimized'
  >('normal');
  const [notificationFilter, setNotificationFilter] = useState<
    'all' | 'high' | 'unread'
  >('all');

  // üéØ Estados de interacci√≥n avanzados
  const [hoveredModule, setHoveredModule] = useState<string | null>(null);
  const [lastInteraction, setLastInteraction] = useState<Date>(new Date());
  const [userPreferences, setUserPreferences] = useState({
    autoRefresh: true,
    showAnimations: true,
    compactMode: false,
  });

  // üîó Conectar al backend real con fallback a mock data
  const backendAvailability = useBackendAvailability();
  const dashboardData = useDashboardData(user?.id || 'mock-user-id');

  // üéØ Navegaci√≥n inteligente con prefetch
  const {
    navigateWithPrefetch,
    prefetchRoute,
    getRouteRecommendations,
    isNavigating,
  } = useIntelligentNavigation();

  // üéØ Skeletons optimizados
  const { shouldShowSkeleton, skeletonVariant } =
    useHomeSkeletons(dashboardData);

  // üéØ Hooks personalizados para funcionalidades avanzadas (ORDEN CORRECTO)
  const { showScrollTop, scrollToTop } = useScrollToTop();
  const { lastUpdate, isUpdating, updateData } = useRealTimeUpdates(
    dashboardData.refetch
  );
  const { performanceMetrics, updatePerformanceMetrics } = useHomePerformance();

  // üéØ Nuevos hooks para m√©tricas inteligentes
  const filteredNotifications = useMemo(() => {
    const notifications = mockDashboardData.notifications;

    switch (notificationFilter) {
      case 'high':
        return notifications.filter((n) => n.priority === 'high');
      case 'unread':
        return notifications.filter((n) => !n.isRead);
      default:
        return notifications;
    }
  }, [notificationFilter]);

  const notificationStats = useMemo(() => {
    const total = mockDashboardData.notifications.length;
    const unread = mockDashboardData.notifications.filter(
      (n) => !n.isRead
    ).length;
    const high = mockDashboardData.notifications.filter(
      (n) => n.priority === 'high'
    ).length;

    return { total, unread, high };
  }, []);

  // üéØ Decidir qu√© datos usar basado en disponibilidad del backend
  const gameData = dashboardData.gameData as BackendGameData | undefined;
  const walletData = dashboardData.walletData as BackendWalletData | undefined;
  const userData = dashboardData.userProfile as BackendUser | undefined;

  // üé® Animaci√≥n de entrada optimizada
  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimate(true);
      updatePerformanceMetrics();
    }, 100);
    return () => clearTimeout(timer);
  }, [updatePerformanceMetrics]);

  // üßπ CLEANUP OBLIGATORIO seg√∫n Builder.io
  useEffect(() => {
    return () => {
      // Limpiar todos los timers y referencias
      console.log('üßπ Cleaning up Home component');
    };
  }, []);

  // üõ°Ô∏è Error boundary para debugging seg√∫n Builder.io
  useEffect(() => {
    const handleError = (event: ErrorEvent) => {
      if (
        event.message.includes('Builder') ||
        event.message.includes('hook') ||
        event.filename?.includes('builder')
      ) {
        console.error('üö® Builder.io Error detectado en Home:', {
          message: event.message,
          filename: event.filename,
          component: 'Home',
        });
      }
    };

    window.addEventListener('error', handleError);
    return () => window.removeEventListener('error', handleError);
  }, []);

  // üéØ Auto-save de preferencias de usuario
  useEffect(() => {
    const savePreferences = setTimeout(() => {
      localStorage.setItem('home-preferences', JSON.stringify(userPreferences));
    }, 1000);

    return () => clearTimeout(savePreferences);
  }, [userPreferences]);

  // üîÑ Funci√≥n para refrescar datos con feedback mejorado
  const handleRefresh = useCallback(async () => {
    try {
      setLastInteraction(new Date());
      await updateData();
      updatePerformanceMetrics();
      setSuccessMessage('Datos actualizados correctamente');
    } catch (error) {
      console.error('üö® Error refreshing data:', error);
      setSuccessMessage('Error al actualizar. Reintentando...');
    }
  }, [updateData, updatePerformanceMetrics]);

  // üéØ Handlers b√°sicos (ORDEN #1 - Sin dependencias complejas)
  const handleSettingsClick = useCallback(() => {
    setLastInteraction(new Date());
    navigate('/profile');
  }, [navigate]);

  const handleInsightsClick = useCallback(() => {
    setLastInteraction(new Date());
    setInsightsPanelOpen(true);
  }, []);

  const handleInsightsPanelClose = useCallback(() => {
    setInsightsPanelOpen(false);
  }, []);

  // üéØ Handlers de notificaciones (ORDEN #2 - Depende de estados locales)
  const handleNotificationClick = useCallback(() => {
    setLastInteraction(new Date());
    setNotificationsOpen(!notificationsOpen);
  }, [notificationsOpen]);

  const handleNotificationFilterChange = useCallback(
    (filter: 'all' | 'high' | 'unread') => {
      setNotificationFilter(filter);
    },
    []
  );

  // üéØ Handlers de navegaci√≥n inteligente (ORDEN #3 - Depende de handlers anteriores)
  const handleModuleClick = useCallback(
    (moduleId: string, path: string) => {
      setLastInteraction(new Date());
      setHoveredModule(null);

      // Navegaci√≥n inteligente con prefetch
      navigateWithPrefetch(path, {
        analytics: {
          source: 'home',
          module: moduleId,
          action: 'module_click',
        },
        prefetchRelated: true,
        priority: 'high',
      });
    },
    [navigateWithPrefetch]
  );

  const handleQuickActionClick = useCallback(
    (path: string, actionType?: string) => {
      setLastInteraction(new Date());

      // Navegaci√≥n inteligente con analytics
      navigateWithPrefetch(path, {
        analytics: {
          source: 'home',
          module: 'quick_actions',
          action: actionType || 'quick_action',
        },
        priority: 'high',
      });
    },
    [navigateWithPrefetch]
  );

  // üéØ Handlers de interacci√≥n avanzados (ORDEN #4)
  const handleModuleHover = useCallback((moduleId: string | null) => {
    setHoveredModule(moduleId);
  }, []);

  const handleAyniVisualizationToggle = useCallback(() => {
    setLastInteraction(new Date());
    setShowAyniVisualization(!showAyniVisualization);
  }, [showAyniVisualization]);

  const handleQuickActionsToggle = useCallback(() => {
    setQuickActionsExpanded(!quickActionsExpanded);
  }, [quickActionsExpanded]);

  const handlePerformanceModeToggle = useCallback(() => {
    const newMode = performanceMode === 'normal' ? 'optimized' : 'normal';
    setPerformanceMode(newMode);
    setUserPreferences((prev) => ({
      ...prev,
      showAnimations: newMode === 'normal',
    }));
  }, [performanceMode]);

  // üéØ Handler de notificaci√≥n individual
  const handleNotificationAction = useCallback((notification: Notification) => {
    setLastInteraction(new Date());
    console.log('üîî Notification action:', notification);

    if (notification.onAction) {
      notification.onAction();
    }
  }, []);

  // üé® Mapear datos del backend al formato esperado por la UI (optimizado con useMemo)
  const normalizedGameData = useMemo(() => {
    const experience = toSafeNumber(
      gameData?.experience,
      mockDashboardData.gamification.ondas
    );
    const wisdom = toSafeNumber(gameData?.stats?.wisdom, 0);
    const nextLevelExp = toSafeNumber(gameData?.nextLevelExp, 2000);

    return {
      ondas: experience,
      meritos:
        wisdom > 0 ? wisdom * 10 : mockDashboardData.gamification.meritos,
      ayniLevel: gameData?.title || mockDashboardData.gamification.ayniLevel,
      nextLevel: mockDashboardData.gamification.nextLevel,
      ayniProgress:
        Math.floor((experience / nextLevelExp) * 100) ||
        mockDashboardData.gamification.ayniProgress,
      bienComunContributions:
        mockDashboardData.gamification.bienComunContributions,
      balanceAyni: mockDashboardData.gamification.balanceAyni,
      streak: mockDashboardData.gamification.streak,
      elementos: mockDashboardData.gamification.elementos,
    };
  }, [gameData]);

  const normalizedWalletData = useMemo(() => {
    return {
      lukas: toSafeNumber(walletData?.balance, mockDashboardData.wallet.lukas),
      ayniCredits: toSafeNumber(
        walletData?.ucoins,
        mockDashboardData.wallet.ayniCredits
      ),
      monthlyChange: mockDashboardData.wallet.monthlyChange,
      pendingTransactions: mockDashboardData.wallet.pendingTransactions,
      ayniBalance: mockDashboardData.wallet.ayniBalance,
    };
  }, [walletData]);

  // üéØ Mostrar skeleton optimizado mientras carga
  if (shouldShowSkeleton) {
    return (
      <OptimizedHomeSkeletons
        variant={skeletonVariant || 'full'}
        showAnimation={performanceMode === 'normal'}
        performanceMode={performanceMode}
      />
    );
  }

  return (
    <Container
      maxWidth="xl"
      className="home-container coomunity-container"
      sx={{
        position: 'relative',
        minHeight: '100vh',
        display: 'flex',
        flexDirection: 'column',
        gap: { xs: 2, md: 3, lg: 4 }
      }}
    >
      {/* üîó Estado de conexi√≥n al backend mejorado */}
      {!backendAvailability.isAvailable && (
        <SafeFade in={true}>
          <Alert
            severity="warning"
            action={
              <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
                <Tooltip
                  title={`√öltima interacci√≥n: ${lastInteraction.toLocaleTimeString()}`}
                >
                  <Button
                    size="small"
                    startIcon={
                      isUpdating ? (
                        <CircularProgress size={16} color="inherit" />
                      ) : (
                        <RefreshIcon />
                      )
                    }
                    onClick={handleRefresh}
                    disabled={isUpdating}
                    sx={{ color: 'inherit' }}
                  >
                    {isUpdating ? 'Actualizando...' : 'Reintentar'}
                  </Button>
                </Tooltip>
                <Tooltip title="Alternar modo performance">
                  <Button
                    size="small"
                    startIcon={<SpeedIcon />}
                    onClick={handlePerformanceModeToggle}
                    sx={{ color: 'inherit', minWidth: 'auto', px: 1 }}
                  >
                    {performanceMode === 'optimized' ? '‚ö°' : 'üêå'}
                  </Button>
                </Tooltip>
              </Box>
            }
            sx={{
              mb: 3,
              borderRadius: 2,
              bgcolor: alpha(theme.palette.warning.main, 0.1),
              border: `1px solid ${alpha(theme.palette.warning.main, 0.3)}`,
            }}
          >
            üîå Modo Offline - Experimentando con datos simulados de Coom√únity
            {performanceMode === 'optimized' && (
              <Box
                component="span"
                sx={{ ml: 2, opacity: 0.8, fontSize: '0.875rem' }}
              >
                ‚ö° Modo Performance Activado
              </Box>
            )}
          </Alert>
        </SafeFade>
      )}

      {/* üîÑ Indicador de actualizaci√≥n en tiempo real mejorado */}
      {backendAvailability.isAvailable && (
        <SafeFade in={true}>
          <Alert
            severity="info"
            action={
              <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
                <Tooltip
                  title={`√öltima actualizaci√≥n: ${lastUpdate.toLocaleTimeString()}`}
                >
                  <Button
                    size="small"
                    startIcon={
                      isUpdating ? (
                        <CircularProgress size={16} color="inherit" />
                      ) : (
                        <UpdateIcon />
                      )
                    }
                    onClick={handleRefresh}
                    disabled={isUpdating}
                    sx={{ color: 'inherit' }}
                  >
                    {isUpdating ? 'Actualizando...' : 'Actualizar'}
                  </Button>
                </Tooltip>
                <Tooltip title="Ver m√©tricas de performance">
                  <Button
                    size="small"
                    startIcon={<InsightsIcon />}
                    onClick={handleInsightsClick}
                    sx={{ color: 'inherit', minWidth: 'auto', px: 1 }}
                  >
                    üìä
                  </Button>
                </Tooltip>
                <Tooltip
                  title={`Notificaciones (${notificationStats.unread} sin leer)`}
                >
                  <Button
                    size="small"
                    startIcon={
                      <Badge
                        badgeContent={notificationStats.unread}
                        color="error"
                        max={9}
                      >
                        <NotificationsIcon />
                      </Badge>
                    }
                    onClick={handleNotificationClick}
                    sx={{ color: 'inherit', minWidth: 'auto', px: 1 }}
                  />
                </Tooltip>
              </Box>
            }
            sx={{
              mb: 3,
              borderRadius: 2,
              bgcolor: alpha(theme.palette.info.main, 0.1),
              border: `1px solid ${alpha(theme.palette.info.main, 0.3)}`,
            }}
          >
            üåê Conectado al backend - Datos en tiempo real
            <Box
              component="span"
              sx={{ ml: 2, opacity: 0.8, fontSize: '0.875rem' }}
            >
              Render: {Math.round(performanceMetrics.renderTime)}ms
            </Box>
          </Alert>
        </SafeFade>
      )}

      {/* üéØ Banner de bienvenida mejorado */}
      <Box id="welcome-header" role="banner">
        <EnhancedWelcomeBanner
          userName={
            (userData?.full_name || '').split(' ')[0] ||
            (user?.full_name || '').split(' ')[0] ||
            'Coom√únity'
          }
          ayniLevel={normalizedGameData.ayniLevel}
          ayniProgress={normalizedGameData.ayniProgress}
          ondas={normalizedGameData.ondas}
          meritos={normalizedGameData.meritos}
          streak={normalizedGameData.streak}
          onStartJourney={() => navigateWithPrefetch('/uplay', {
            analytics: { source: 'home', module: 'enhanced_banner', action: 'start_journey' },
            priority: 'high',
          })}
        />
      </Box>

      {/* üöÄ Dashboard de M√©tricas en Tiempo Real */}
      <Box>
        <RealTimeMetricsDashboard
          gameData={normalizedGameData}
          walletData={normalizedWalletData}
          isConnected={backendAvailability.isAvailable}
          onRefresh={handleRefresh}
        />
      </Box>

      {/* üéØ Grid principal con mejor estructura */}
      <Box sx={{ flexGrow: 1 }}>
        <Grid container spacing={{ xs: 2, md: 3, lg: 4 }}>
          {/* üéØ Panel principal - M√©tricas Ayni */}
          <Grid item xs={12} lg={8}>
            <SafeFade in={animate} timeout={800}>
              <Box
              id="main-content"
              role="main"
              aria-label="Balance Ayni personal"
              className=""
            >
              <AyniMetricsCard
                ondas={normalizedGameData.ondas}
                meritos={normalizedGameData.meritos}
                ayniLevel={normalizedGameData.ayniLevel}
                nextLevel={normalizedGameData.nextLevel}
                ayniProgress={normalizedGameData.ayniProgress}
                bienComunContributions={
                  normalizedGameData.bienComunContributions
                }
                balanceAyni={normalizedGameData.balanceAyni}
                elementos={normalizedGameData.elementos}
                isLoading={dashboardData.isLoading}
                isConnected={backendAvailability.isAvailable}
              />
            </Box>
          </SafeFade>
        </Grid>

        {/* üéØ Panel lateral - Wallet y acciones */}
        <Grid item xs={12} lg={4}>
          <Fade in={animate} timeout={1000}>
            <Grid container spacing={{ xs: 2, md: 3 }}>
              {/* üí∞ Wallet Overview */}
              <Grid item xs={12}>
                <WalletOverview
                  lukas={normalizedWalletData.lukas}
                  ayniCredits={normalizedWalletData.ayniCredits}
                  monthlyChange={normalizedWalletData.monthlyChange}
                  pendingTransactions={normalizedWalletData.pendingTransactions}
                  ayniBalance={normalizedWalletData.ayniBalance}
                  isLoading={dashboardData.isLoading}
                  isConnected={backendAvailability.isAvailable}
                />
              </Grid>

              {/* üéØ Acciones Ayni mejoradas con IA */}
              <Grid item xs={12}>
                <Box
                  id="quick-actions"
                  role="complementary"
                  aria-label="Acciones r√°pidas personalizadas"
                >
                  <SmartQuickActions
                    onActionClick={(action) =>
                      handleQuickActionClick(action.path, action.category)
                    }
                    isExpanded={quickActionsExpanded}
                    onToggleExpanded={handleQuickActionsToggle}
                    performanceMode={performanceMode}
                    userLevel={
                      normalizedGameData.ayniProgress > 80
                        ? 'advanced'
                        : normalizedGameData.ayniProgress > 40
                          ? 'intermediate'
                          : 'beginner'
                    }
                  />
                </Box>
              </Grid>

              {/* üöÄ Phase 3: Ayni Balance Visualization Mejorada */}
              <Grid item xs={12}>
                <Fade in={animate} timeout={1200}>
                  <Box>
                    <AyniBalanceVisualization
                      balanceAyni={normalizedGameData.balanceAyni}
                      elementos={normalizedGameData.elementos}
                      className=""
                    />
                  </Box>
                </Fade>
              </Grid>

              {/* üå§Ô∏è Widget de Clima Energ√©tico */}
              <Grid item xs={12}>
                <Fade in={animate} timeout={1300}>
                  <Box>
                    <EnergyWeatherWidget gameData={normalizedGameData} />
                  </Box>
                </Fade>
              </Grid>

              {/* üöÄ Performance Monitor */}
              {(backendAvailability.isAvailable ||
                performanceMode === 'optimized') && (
                <Grid item xs={12}>
                  <Fade in={animate} timeout={1400}>
                    <Box>
                      <PerformanceMonitor
                        metrics={performanceMetrics}
                        isVisible={true}
                        performanceMode={performanceMode}
                        onToggleMode={handlePerformanceModeToggle}
                      />
                    </Box>
                  </Fade>
                </Grid>
              )}
            </Grid>
          </Fade>
        </Grid>

          {/* üèÜ Panel de Logros y Progreso */}
          <Grid item xs={12}>
            <Fade in={animate} timeout={1200}>
              <AchievementsProgressPanel
                gameData={normalizedGameData}
                onClaimReward={(achievementId) => {
                  console.log('üèÜ Claiming reward for:', achievementId);
                  setSuccessMessage('¬°Recompensa reclamada exitosamente!');
                }}
              />
            </Fade>
          </Grid>

          {/* üéØ M√≥dulos principales */}
          <Grid item xs={12}>
            <Fade in={animate} timeout={1400}>
              <Box
                id="modules"
                role="navigation"
                aria-label="M√≥dulos principales de Coom√únity"
              >
                <EnhancedModuleCards
                  onModuleClick={handleModuleClick}
                  performanceMode={performanceMode}
                />
              </Box>
            </SafeFade>
          </Grid>

        {/* üîî Centro de notificaciones inteligente */}
        {notificationsOpen && (
          <Grid item xs={12}>
            <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>
              <IntelligentNotificationCenter
                notifications={filteredNotifications}
                isOpen={notificationsOpen}
                currentFilter={notificationFilter}
                notificationStats={{
                  ...notificationStats,
                  avgEngagement: 75,
                  byType: {
                    ayni: 2,
                    meritos: 1,
                    social: 1,
                    marketplace: 1,
                    system: 1,
                    achievement: 1,
                    tip: 1,
                  },
                }}
                onFilterChange={handleNotificationFilterChange}
                onNotificationClick={handleNotificationAction}
                onMarkAsRead={(notificationId) => {
                  console.log('üîî Mark as read:', notificationId);
                  setLastInteraction(new Date());
                }}
                onMarkAllAsRead={() => {
                  console.log('üîî Mark all as read');
                  setLastInteraction(new Date());
                }}
                onClearAll={() => {
                  console.log('üßπ Clear all notifications');
                  setNotificationsOpen(false);
                  setLastInteraction(new Date());
                }}
                onClose={() => {
                  setNotificationsOpen(false);
                }}
              />
            </Box>
          </Grid>
        )}

          {/* üåä Feed de Actividad en Tiempo Real */}
          <Grid item xs={12}>
            <Fade in={animate} timeout={1600}>
              <LiveActivityFeed />
            </Fade>
          </Grid>
        </Grid>
      </Box>

      {/* üåü Mensaje inspiracional flotante */}
      <Box
        sx={{
          position: 'fixed',
          bottom: isMobile ? 80 : 24,
          right: 24,
          maxWidth: isMobile ? 280 : 300,
          p: 2,
          borderRadius: 3,
          background: theme.palette.primary.main,
          color: 'white',
          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
          border: `1px solid ${alpha('#fff', 0.2)}`,
          opacity: animate ? 0.95 : 0,
          transform: animate ? 'translateY(0)' : 'translateY(20px)',
          transition: 'all 0.6s ease-in-out 2s',
          zIndex: 1000,
        }}
      >
        <Box sx={{ fontSize: '1.2rem', mb: 1 }}>üåü</Box>
        <Box sx={{ fontSize: '0.85rem', fontWeight: 'bold', mb: 0.5 }}>
          Reflexi√≥n del d√≠a
        </Box>
        <Box sx={{ fontSize: '0.75rem', opacity: 0.9, fontStyle: 'italic' }}>
          "En cada acci√≥n de Ayni que realizas, no solo equilibras tu propio
          camino, sino que contribuyes al tejido sagrado del Bien Com√∫n"
        </Box>
      </Box>

      {/* üöÄ Floating Action Buttons Stack */}
      <Box
        sx={{
          position: 'fixed',
          bottom: isMobile ? 24 : 100,
          right: 24,
          zIndex: 1000,
          display: 'flex',
          flexDirection: 'column',
          gap: 1,
        }}
      >
        {/* Performance Monitor Toggle */}
        <Fade in={animate} timeout={2000}>
          <Tooltip
            title={`Modo ${performanceMode === 'normal' ? 'Optimizado' : 'Normal'}`}
            placement="left"
          >
            <Fab
              size="small"
              onClick={handlePerformanceModeToggle}
              sx={{
                bgcolor:
                  performanceMode === 'optimized'
                    ? alpha(theme.palette.success.main, 0.9)
                    : alpha(theme.palette.grey[600], 0.9),
                color: 'white',
                '&:hover': {
                  bgcolor:
                    performanceMode === 'optimized'
                      ? theme.palette.success.dark
                      : theme.palette.grey[700],
                  transform: 'scale(1.1)',
                },
                transition: 'all 0.3s ease-in-out',
              }}
            >
              <SpeedIcon />
            </Fab>
          </Tooltip>
        </Fade>

        {/* Insights Panel */}
        <Fade in={animate} timeout={2200}>
          <Tooltip title="Ver Insights Inteligentes" placement="left">
            <Fab
              color="secondary"
              size="medium"
              onClick={handleInsightsClick}
              sx={{
                background: `linear-gradient(135deg, ${theme.palette.secondary.main} 0%, ${theme.palette.primary.main} 100%)`,
                '&:hover': {
                  background: `linear-gradient(135deg, ${theme.palette.secondary.dark} 0%, ${theme.palette.primary.dark} 100%)`,
                  transform: 'scale(1.1)',
                },
                transition: 'all 0.3s ease-in-out',
              }}
            >
              <PsychologyIcon />
            </Fab>
          </Tooltip>
        </Fade>

        {/* Notificaciones inteligentes */}
        <Fade in={animate} timeout={2400}>
          <Tooltip
            title={`${notificationStats.unread} notificaciones sin leer`}
            placement="left"
          >
            <Fab
              size="small"
              onClick={handleNotificationClick}
              sx={{
                bgcolor:
                  notificationStats.unread > 0
                    ? alpha(theme.palette.warning.main, 0.9)
                    : alpha(theme.palette.info.main, 0.9),
                color: 'white',
                '&:hover': {
                  bgcolor:
                    notificationStats.unread > 0
                      ? theme.palette.warning.dark
                      : theme.palette.info.dark,
                  transform: 'scale(1.1)',
                },
                transition: 'all 0.3s ease-in-out',
              }}
            >
              <Badge
                badgeContent={notificationStats.unread}
                color="error"
                max={9}
              >
                <NotificationsIcon />
              </Badge>
            </Fab>
          </Tooltip>
        </Fade>
      </Box>

      {/* üîù Bot√≥n flotante para scroll to top */}
      <Fade in={showScrollTop}>
        <Fab
          color="primary"
          size="medium"
          onClick={scrollToTop}
          sx={{
            position: 'fixed',
            bottom: isMobile ? 24 : 280,
            right: 24,
            zIndex: 999,
            background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 100%)`,
            '&:hover': {
              background: `linear-gradient(135deg, ${theme.palette.primary.dark} 0%, ${theme.palette.secondary.dark} 100%)`,
              transform: 'scale(1.1)',
            },
            transition: 'all 0.3s ease-in-out',
          }}
        >
          <KeyboardArrowUpIcon />
        </Fab>
      </Fade>

      {/* üéØ Snackbar para mensajes de √©xito */}
      <Snackbar
        open={!!successMessage}
        autoHideDuration={3000}
        onClose={() => setSuccessMessage('')}
        message={successMessage}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      />

      {/* üöÄ Phase 3: Advanced Insights Panel */}
      {insightsPanelOpen && (
        <Box
          sx={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            bgcolor: alpha('#000', 0.5),
            backdropFilter: 'blur(8px)',
            zIndex: 1200,
          }}
          onClick={handleInsightsPanelClose}
        />
      )}
      <AdvancedInsightsPanel
        gameData={normalizedGameData}
        walletData={normalizedWalletData}
        isVisible={insightsPanelOpen}
        onClose={handleInsightsPanelClose}
      />

      {/* üéØ Accessibility Enhancer */}
      <AccessibilityEnhancer
        onNavigateToSection={(sectionId) => {
          const element = document.getElementById(sectionId);
          if (element && element.isConnected) {
            try {
              element.scrollIntoView({ behavior: 'smooth', block: 'start' });
              element.focus();
            } catch (error) {
              console.warn('Error en scrollIntoView:', error);
              try {
                element.scrollIntoView();
                element.focus();
              } catch (fallbackError) {
                console.warn('Error en fallback scrollIntoView:', fallbackError);
                element.focus();
              }
            }
          }
        }}
        onToggleNotifications={handleNotificationClick}
        onOpenSettings={handleSettingsClick}
        onShowHelp={() => console.log('üÜò Showing help')}
      />
    </Container>
  );
};

export default Home;