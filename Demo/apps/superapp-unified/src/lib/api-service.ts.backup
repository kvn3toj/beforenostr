/**
 * üåê API Service - Servicio centralizado para comunicaci√≥n con el backend
 *
 * Maneja todas las llamadas HTTP al backend de Coom√únity de manera consistente,
 * incluyendo autenticaci√≥n JWT, manejo de errores, y configuraci√≥n centralizada.
 */

import { ENV, EnvironmentHelpers } from './environment';

// üîß Configuraci√≥n de la API - usando configuraci√≥n inteligente de entorno
const API_BASE_URL = ENV.apiBaseUrl;
const API_TIMEOUT = EnvironmentHelpers.getApiTimeout();

// üè∑Ô∏è Tipos de respuesta de la API
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  timestamp?: string;
}

// üîê Interface para usuario del contexto de autenticaci√≥n
interface AuthUser {
  id: string;
  email: string;
  access_token?: string;
  role?: string;
}

// üîê Headers de autenticaci√≥n
interface RequestHeaders {
  'Content-Type': string;
  Authorization?: string;
  'X-Requested-With': string;
}

class ApiService {
  private baseURL: string;
  private timeout: number;

  constructor() {
    this.baseURL = API_BASE_URL;
    this.timeout = API_TIMEOUT;
  }

  /**
   * üîë Limpiar tokens de autenticaci√≥n (m√©todo p√∫blico para logout)
   */
  clearAuthTokens(): void {
    try {
      localStorage.removeItem('coomunity_token');
      localStorage.removeItem('coomunity_user');
      console.log('[ApiService] Tokens de autenticaci√≥n limpiados');
    } catch (error) {
      console.warn('[ApiService] Error limpiando tokens:', error);
    }
  }

  /**
   * üîë Obtener token JWT actual
   */
  private getAuthToken(): string | null {
    try {
      // Si el mock auth est√° habilitado, devolver token mock
      if (EnvironmentHelpers.shouldUseMockAuth()) {
        return 'mock-jwt-token-for-testing-do-not-use-in-production';
      }

      // Primero intentar obtener el token directamente
      const token = localStorage.getItem('coomunity_token');
      if (token && token !== 'null' && token !== 'undefined') {
        return token;
      }

      // Si no hay token directo, intentar extraerlo del usuario
      const userStr = localStorage.getItem('coomunity_user');
      if (userStr) {
        const user = JSON.parse(userStr);
        return user.access_token || null;
      }

      return null;
    } catch (error) {
      console.warn('Error obteniendo token de autenticaci√≥n:', error);
      return null;
    }
  }

  /**
   * üéØ Crear headers para las peticiones
   */
  private createHeaders(includeAuth: boolean = true): RequestHeaders {
    const headers: RequestHeaders = {
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest',
    };

    if (includeAuth) {
      const token = this.getAuthToken();
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
    }

    return headers;
  }

  /**
   * üö® Manejar respuestas de error HTTP
   */
  private async handleErrorResponse(response: Response): Promise<Error> {
    let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
    let errorCategory:
      | 'network'
      | 'auth'
      | 'validation'
      | 'business'
      | 'server'
      | 'unknown' = 'unknown';

    try {
      const errorBody = await response.json();
      if (errorBody.message) {
        errorMessage = errorBody.message;
      } else if (errorBody.error) {
        errorMessage = errorBody.error;
      } else if (errorBody.details) {
        errorMessage = errorBody.details;
      }
    } catch {
      // Si no se puede parsear el error como JSON, usar el status text
    }

    // Manejo espec√≠fico por c√≥digos de estado con categorizaci√≥n
    switch (response.status) {
      case 401:
        errorCategory = 'auth';
        // Token inv√°lido o expirado - but in mock mode, be less aggressive
        if (!EnvironmentHelpers.shouldUseMockAuth()) {
          this.handleUnauthorized();
        }
        const authMessage = EnvironmentHelpers.shouldUseMockAuth()
          ? 'Autenticaci√≥n mock - algunos endpoints pueden requerir implementaci√≥n backend'
          : 'Sesi√≥n expirada. Por favor, inicia sesi√≥n nuevamente.';
        return this.createCategorizedError(
          authMessage,
          errorCategory,
          response.status
        );

      case 403:
        errorCategory = 'auth';
        return this.createCategorizedError(
          'No tienes permisos para realizar esta acci√≥n.',
          errorCategory,
          response.status
        );

      case 404:
        errorCategory = 'business';
        // For development, be more specific about which endpoint wasn't found
        const endpoint = response.url
          ? new URL(response.url).pathname
          : 'unknown endpoint';
        const message = EnvironmentHelpers.shouldLogDebug()
          ? `Endpoint not available: ${endpoint}. This may be expected during development if the backend endpoint hasn't been implemented yet.`
          : 'Recurso no encontrado.';

        return this.createCategorizedError(
          message,
          errorCategory,
          response.status
        );

      case 422:
        errorCategory = 'validation';
        return this.createCategorizedError(
          errorMessage || 'Datos de entrada inv√°lidos.',
          errorCategory,
          response.status
        );

      case 429:
        errorCategory = 'network';
        return this.createCategorizedError(
          'Demasiadas peticiones. Intenta m√°s tarde.',
          errorCategory,
          response.status
        );

      case 500:
        errorCategory = 'server';
        return this.createCategorizedError(
          'Error interno del servidor. Intenta m√°s tarde.',
          errorCategory,
          response.status
        );

      case 502:
      case 503:
      case 504:
        errorCategory = 'network';
        return this.createCategorizedError(
          'Servicio temporalmente no disponible. Intenta m√°s tarde.',
          errorCategory,
          response.status
        );

      default:
        if (response.status >= 400 && response.status < 500) {
          errorCategory = 'business';
        } else if (response.status >= 500) {
          errorCategory = 'server';
        }
        return this.createCategorizedError(
          errorMessage,
          errorCategory,
          response.status
        );
    }
  }

  /**
   * üè∑Ô∏è Crear error categorizado con metadata adicional
   */
  private createCategorizedError(
    message: string,
    category: string,
    statusCode: number
  ): Error {
    const error = new Error(message);
    (error as any).category = category;
    (error as any).statusCode = statusCode;
    (error as any).timestamp = new Date().toISOString();
    (error as any).isRetriable = this.isRetriableError(category, statusCode);
    (error as any).userFriendly = this.isUserFriendlyError(
      category,
      statusCode
    );

    // Improve error serialization for debugging
    (error as any).toJSON = () => ({
      name: error.name,
      message: error.message,
      category,
      statusCode,
      timestamp: (error as any).timestamp,
      isRetriable: (error as any).isRetriable,
      userFriendly: (error as any).userFriendly,
      stack: error.stack,
    });

    return error;
  }

  /**
   * üîÑ Determinar si un error es reintetable
   */
  private isRetriableError(category: string, statusCode: number): boolean {
    // Errores de red y servidor son generalmente reintetables
    if (category === 'network' || category === 'server') return true;

    // Algunos c√≥digos espec√≠ficos son reintetables
    if ([408, 429, 502, 503, 504].includes(statusCode)) return true;

    // Timeout errors son reintetables
    if (statusCode === 0) return true; // Network timeout

    // Errores de autenticaci√≥n, validaci√≥n y business logic no son reintetables
    return false;
  }

  /**
   * üë§ Determinar si un error debe mostrarse al usuario
   */
  private isUserFriendlyError(category: string, statusCode: number): boolean {
    // Errores de validaci√≥n y business logic son relevantes para el usuario
    if (category === 'validation' || category === 'business') return true;

    // Errores de autenticaci√≥n son relevantes
    if (category === 'auth') return true;

    // Errores de red persistentes son relevantes
    if (category === 'network' && [429, 502, 503, 504].includes(statusCode))
      return true;

    // Errores de servidor cr√≠ticos son relevantes
    if (category === 'server' && statusCode === 500) return true;

    return false;
  }

  /**
   * üì¢ Sistema de notificaciones de errores
   */
  private notifyError(error: Error, endpoint: string, method: string): void {
    const errorData = {
      message: error.message,
      category: (error as any).category || 'unknown',
      statusCode: (error as any).statusCode,
      endpoint,
      method,
      timestamp: new Date().toISOString(),
      isRetriable: (error as any).isRetriable || false,
      userFriendly: (error as any).userFriendly || false,
    };

    // En desarrollo, log detallado
    if (import.meta.env.DEV) {
      console.group(`üö® API Error: ${method} ${endpoint}`);
      console.error('Error Details:', JSON.stringify(errorData, null, 2));
      console.error('Original Error:', error.message || error);
      console.groupEnd();
    }

    // Disparar evento personalizado para que los componentes puedan escuchar
    window.dispatchEvent(
      new CustomEvent('api-error', {
        detail: errorData,
      })
    );

    // Mostrar notificaci√≥n al usuario solo si es relevante
    if (errorData.userFriendly) {
      this.showUserNotification(errorData);
    }

    // Enviar m√©tricas de error para monitoring
    this.sendErrorMetrics(errorData);
  }

  /**
   * üîî Mostrar notificaci√≥n al usuario
   */
  private showUserNotification(errorData: any): void {
    // Personalizar mensaje seg√∫n la categor√≠a
    let userMessage = errorData.message;
    let notificationType: 'error' | 'warning' | 'info' = 'error';

    switch (errorData.category) {
      case 'validation':
        notificationType = 'warning';
        userMessage = `Datos inv√°lidos: ${errorData.message}`;
        break;
      case 'auth':
        notificationType = 'error';
        userMessage =
          'Problema de autenticaci√≥n. Por favor, verifica tu sesi√≥n.';
        break;
      case 'network':
        notificationType = 'warning';
        userMessage = 'Problema de conexi√≥n. Verificando...';
        break;
      case 'server':
        notificationType = 'error';
        userMessage = 'Error del servidor. Nuestro equipo ha sido notificado.';
        break;
      case 'business':
        notificationType = 'info';
        break;
    }

    // Disparar evento para el sistema de notificaciones
    window.dispatchEvent(
      new CustomEvent('user-notification', {
        detail: {
          type: notificationType,
          message: userMessage,
          category: errorData.category,
          duration: errorData.category === 'validation' ? 5000 : 8000,
          actions: errorData.isRetriable
            ? [{ label: 'Reintentar', action: 'retry' }]
            : undefined,
        },
      })
    );
  }

  /**
   * üìä Enviar m√©tricas de error para monitoring
   */
  private sendErrorMetrics(errorData: any): void {
    // Disparar evento para el sistema de monitoring
    window.dispatchEvent(
      new CustomEvent('api-metrics', {
        detail: {
          type: 'error',
          endpoint: errorData.endpoint,
          method: errorData.method,
          statusCode: errorData.statusCode,
          category: errorData.category,
          timestamp: Date.now(),
          isRetriable: errorData.isRetriable,
        },
      })
    );
  }

  /**
   * üîê Manejar errores de autenticaci√≥n
   */
  private handleUnauthorized(): void {
    // Limpiar tokens
    localStorage.removeItem('coomunity_token');
    localStorage.removeItem('coomunity_user');

    // Disparar evento para que la app maneje la redirecci√≥n
    window.dispatchEvent(
      new CustomEvent('auth-expired', {
        detail: {
          message: 'Tu sesi√≥n ha expirado. Redirigiendo al login...',
          timestamp: Date.now(),
        },
      })
    );

    // Redireccionar despu√©s de un breve delay para mostrar el mensaje
    setTimeout(() => {
      if (window.location.pathname !== '/login') {
        window.location.href = '/login';
      }
    }, 2000);
  }

  /**
   * üåê M√©todo principal para realizar peticiones HTTP con retry inteligente
   */
  private async request<T>(
    endpoint: string,
    options: RequestInit = {},
    retryCount: number = 0
  ): Promise<T> {
    const maxRetries = 3;
    const url = `${this.baseURL}${endpoint}`;
    const method = options.method || 'GET';

    // Configurar headers
    const headers = this.createHeaders();

    // Configurar timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), this.timeout);

    try {
      // Disparar evento de inicio de request para m√©tricas
      const requestStartTime = Date.now();
      window.dispatchEvent(
        new CustomEvent('api-request-start', {
          detail: { endpoint, method, timestamp: requestStartTime },
        })
      );

      const response = await fetch(url, {
        ...options,
        headers: { ...headers, ...options.headers },
        signal: controller.signal,
        credentials: 'include', // ‚úÖ Incluir credenciales para CORS
        mode: 'cors', // ‚úÖ Modo CORS expl√≠cito
      });

      clearTimeout(timeoutId);

      // Disparar evento de respuesta para m√©tricas
      const requestDuration = Date.now() - requestStartTime;
      window.dispatchEvent(
        new CustomEvent('api-request-complete', {
          detail: {
            endpoint,
            method,
            statusCode: response.status,
            duration: requestDuration,
            success: response.ok,
            timestamp: Date.now(),
          },
        })
      );

      if (!response.ok) {
        const error = await this.handleErrorResponse(response);

        // Determinar si se debe reintentar
        const shouldRetry =
          retryCount < maxRetries && (error as any).isRetriable;

        if (shouldRetry) {
          // Calcular delay con backoff exponencial
          const delay = Math.min(1000 * Math.pow(2, retryCount), 10000);

          console.warn(
            `üîÑ Reintentando petici√≥n ${method} ${endpoint} en ${delay}ms (intento ${retryCount + 1}/${maxRetries})`
          );

          // Esperar antes del reintento
          await new Promise((resolve) => setTimeout(resolve, delay));

          // Reintentar recursivamente
          return this.request<T>(endpoint, options, retryCount + 1);
        }

        // Si no se puede reintentar, notificar error y lanzar
        this.notifyError(error, endpoint, method);
        throw error;
      }

      // Parsear respuesta
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const data = await response.json();

        // Verificar si la respuesta tiene formato de error del backend
        if (data.success === false) {
          const error = new Error(
            data.message || data.error || 'Error del servidor'
          );
          (error as any).category = 'business';
          (error as any).statusCode = response.status;
          this.notifyError(error, endpoint, method);
          throw error;
        }

        return data;
      } else {
        // Para respuestas no-JSON (ej. texto plano, archivos)
        return response.text() as unknown as T;
      }
    } catch (error) {
      clearTimeout(timeoutId);

      // Manejar errores de red/timeout
      if (error instanceof Error) {
        let categorizedError: Error;

        if (error.name === 'AbortError') {
          // Timeout
          categorizedError = this.createCategorizedError(
            'La petici√≥n tard√≥ demasiado en responder. Verifica tu conexi√≥n.',
            'network',
            0
          );
        } else if (error.message.includes('fetch')) {
          // Error de red
          categorizedError = this.createCategorizedError(
            'Error de conexi√≥n. Verifica tu conexi√≥n a internet.',
            'network',
            0
          );
        } else {
          // Error desconocido
          categorizedError = this.createCategorizedError(
            error.message,
            'unknown',
            0
          );
        }

        // Determinar si se debe reintentar para errores de red
        const shouldRetry =
          retryCount < maxRetries &&
          (categorizedError as any).isRetriable &&
          (error.name === 'AbortError' || error.message.includes('fetch'));

        if (shouldRetry) {
          const delay = Math.min(1000 * Math.pow(2, retryCount), 10000);

          console.warn(
            `üîÑ Reintentando petici√≥n ${method} ${endpoint} tras error de red en ${delay}ms (intento ${retryCount + 1}/${maxRetries})`
          );

          await new Promise((resolve) => setTimeout(resolve, delay));
          return this.request<T>(endpoint, options, retryCount + 1);
        }

        this.notifyError(categorizedError, endpoint, method);
        throw categorizedError;
      }

      throw error;
    }
  }

  /**
   * üü¢ GET Request
   */
  async get<T>(endpoint: string, options?: RequestInit): Promise<T> {
    return this.request<T>(endpoint, {
      ...options,
      method: 'GET',
    });
  }

  /**
   * üü† POST Request
   */
  async post<T>(
    endpoint: string,
    data?: any,
    options?: RequestInit
  ): Promise<T> {
    return this.request<T>(endpoint, {
      ...options,
      method: 'POST',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  /**
   * üü† PUT Request
   */
  async put<T>(
    endpoint: string,
    data?: any,
    options?: RequestInit
  ): Promise<T> {
    return this.request<T>(endpoint, {
      ...options,
      method: 'PUT',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  /**
   * üî¥ DELETE Request
   */
  async delete<T>(endpoint: string, options?: RequestInit): Promise<T> {
    return this.request<T>(endpoint, {
      ...options,
      method: 'DELETE',
    });
  }

  /**
   * üü£ PATCH Request
   */
  async patch<T>(
    endpoint: string,
    data?: any,
    options?: RequestInit
  ): Promise<T> {
    return this.request<T>(endpoint, {
      ...options,
      method: 'PATCH',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  /**
   * üîç Health Check del backend
   */
  async healthCheck(): Promise<{ status: string; timestamp: string }> {
    // üß™ Si mock auth est√° habilitado, retornar estado mock sin consultar backend
    if ((import.meta as any).env.VITE_ENABLE_MOCK_AUTH === 'true') {
      return {
        status: 'ok-mock',
        timestamp: new Date().toISOString(),
      };
    }

    try {
      return await this.get('/health');
    } catch (error) {
      throw new Error('Backend no disponible');
    }
  }

  /**
   * üîê Verificar si el usuario est√° autenticado
   */
  isAuthenticated(): boolean {
    return this.getAuthToken() !== null;
  }

  /**
   * üéØ Realizar petici√≥n sin autenticaci√≥n (para login, registro, etc.)
   */
  async requestWithoutAuth<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.baseURL}${endpoint}`;
    const controller = new AbortController();

    const requestOptions = {
      ...options,
      signal: controller.signal,
      headers: {
        ...EnvironmentHelpers.getCorsHeaders(),
        ...options.headers,
      },
      mode: 'cors' as RequestMode,
      credentials: 'include' as RequestCredentials,
    };

    // Log detallado de la petici√≥n en desarrollo
    if (import.meta.env.DEV) {
      console.group(
        `üîÑ API Request (No Auth): ${options.method || 'GET'} ${endpoint}`
      );
      console.log('üéØ URL:', url);
      console.log('‚öôÔ∏è Base URL:', this.baseURL);
      console.log(
        'üì¶ Request Options:',
        JSON.stringify(requestOptions, null, 2)
      );
      console.log('üåç Origin:', window.location.origin);
      console.log('‚è±Ô∏è Timeout:', this.timeout);
      console.groupEnd();
    }

    const timeoutId = setTimeout(() => controller.abort(), this.timeout);

    try {
      // Enhanced pre-flight verification with better diagnostics
      if (import.meta.env.DEV) {
        console.log('üöÄ Iniciando fetch request...');

        // Comprehensive backend connectivity check
        try {
          const healthCheckController = new AbortController();
          setTimeout(() => healthCheckController.abort(), 3000);

          const healthCheck = await fetch(`${this.baseURL}/health`, {
            method: 'GET',
            mode: 'cors',
            signal: healthCheckController.signal,
            headers: {
              Origin: window.location.origin,
            },
          });

          console.log('üè• Backend health check:', {
            status: healthCheck.status,
            statusText: healthCheck.statusText,
            accessible: healthCheck.ok,
            headers: Object.fromEntries(healthCheck.headers.entries()),
            cors: healthCheck.headers.get('access-control-allow-origin'),
          });

          // Check for CORS headers specifically
          const corsOrigin = healthCheck.headers.get(
            'access-control-allow-origin'
          );
          if (
            !corsOrigin ||
            (corsOrigin !== '*' && corsOrigin !== window.location.origin)
          ) {
            console.warn(
              '‚ö†Ô∏è CORS Warning: Backend may not allow this origin:',
              {
                expectedOrigin: window.location.origin,
                receivedCorsOrigin: corsOrigin,
              }
            );
          }
        } catch (healthError: any) {
          console.warn('‚ö†Ô∏è Backend health check failed:', {
            message: healthError.message,
            name: healthError.name,
            stack: healthError.stack,
          });

          // Try OPTIONS request to diagnose CORS
          try {
            const optionsCheck = await fetch(`${this.baseURL}${endpoint}`, {
              method: 'OPTIONS',
              mode: 'cors',
              signal: AbortSignal.timeout(2000),
              headers: {
                Origin: window.location.origin,
                'Access-Control-Request-Method': options.method || 'GET',
                'Access-Control-Request-Headers': 'Content-Type,Authorization',
              },
            });

            console.log('üîç CORS OPTIONS check:', {
              status: optionsCheck.status,
              headers: Object.fromEntries(optionsCheck.headers.entries()),
            });
          } catch (optionsError) {
            console.warn('‚ö†Ô∏è CORS OPTIONS check failed:', optionsError.message);
          }
        }
      }

      const response = await fetch(url, requestOptions);

      clearTimeout(timeoutId);

      if (import.meta.env.DEV) {
        console.log('üì® Response received:', {
          status: response.status,
          statusText: response.statusText,
          headers: Object.fromEntries(response.headers.entries()),
          ok: response.ok,
        });
      }

      if (!response.ok) {
        throw await this.handleErrorResponse(response);
      }

      const data = await response.json();

      if (import.meta.env.DEV) {
        console.log(
          `‚úÖ API Success (No Auth): ${options.method || 'GET'} ${endpoint}`,
          data
        );
      }

      return data;
    } catch (error: any) {
      clearTimeout(timeoutId);

      if (error.name === 'AbortError' || error.name === 'TimeoutError') {
        const timeoutError = new Error(
          `Request timeout after ${this.timeout}ms. The backend at ${this.baseURL} may be slow or unreachable.`
        );
        (timeoutError as any).category = 'timeout';
        (timeoutError as any).troubleshooting = [
          'Check if the backend server is running',
          'Verify network connectivity',
          'Try again in a few seconds',
        ];
        console.error('‚è∞ Request Timeout:', timeoutError);
        throw timeoutError;
      }

      // Enhanced error handling for network connectivity issues
      if (
        error.message.includes('fetch') ||
        error.message.includes('Failed to fetch')
      ) {
        const networkError = new Error(
          `Cannot connect to backend at ${this.baseURL}. ` +
            `Please ensure the backend server is running and accessible from ${window.location.origin}. ` +
            `Original error: ${error.message}`
        );
        (networkError as any).category = 'network';
        (networkError as any).originalError = error;
        (networkError as any).troubleshooting = [
          'Start the backend server: npm run start:backend:dev',
          `Verify backend responds at: ${this.baseURL}/health`,
          `Check CORS configuration allows origin: ${window.location.origin}`,
          'Review browser network tab for detailed error information',
          'Ensure no firewall or antivirus is blocking the connection',
        ];

        // Enhanced debugging for network issues using environment helpers
        const troubleshootingInfo = EnvironmentHelpers.getTroubleshootingInfo();

        console.group(`üö® NETWORK ERROR - Cannot connect to backend`);
        console.error('üí• Error Message:', error.message);
        console.error('üè∑Ô∏è Error Type:', error.name);
        console.error('üìÑ Full Error:', error);
        console.error('üîó Endpoint URL:', url);
        console.error('‚öôÔ∏è Base URL:', this.baseURL);
        console.error('üåç Environment Info:', troubleshootingInfo);

        console.error('üîß Troubleshooting steps:');
        troubleshootingInfo.troubleshootingSteps.forEach((step, index) => {
          console.error(`   ${step}`);
        });

        // Display user-friendly error notification
        if (typeof window !== 'undefined') {
          window.dispatchEvent(
            new CustomEvent('api-connection-error', {
              detail: {
                type: 'network',
                message: 'Cannot connect to backend server',
                backendUrl: this.baseURL,
                troubleshooting: (networkError as any).troubleshooting,
                timestamp: Date.now(),
              },
            })
          );
        }

        console.groupEnd();
        throw networkError;
      }

      // Handle CORS-specific errors
      if (
        error.message.includes('CORS') ||
        error.message.includes('cross-origin')
      ) {
        const corsError = new Error(
          `CORS Error: Backend at ${this.baseURL} is not configured to allow requests from ${window.location.origin}. ` +
            `Please check the backend CORS configuration.`
        );
        (corsError as any).category = 'cors';
        (corsError as any).troubleshooting = [
          'Check backend CORS configuration',
          `Ensure ${window.location.origin} is in allowed origins`,
          'Verify Access-Control-Allow-Origin header',
          'Check that credentials are properly configured',
        ];
        throw corsError;
      }

      // Debugging exhaustivo para otros errores
      console.group(
        `‚ùå API Error (No Auth): ${options.method || 'GET'} ${endpoint}`
      );
      console.error('üí• Error Message:', error.message);
      console.error('üè∑Ô∏è Error Type:', error.name);
      console.error('üìÑ Full Error:', error);
      console.groupEnd();

      throw error;
    }
  }
}

// Create and export the singleton instance
export const apiService = new ApiService();

// Export the auth API methods for convenience
export const authAPI = {
  login: (credentials: { email: string; password: string }) =>
    apiService.post<AuthUser>('/auth/login', credentials),
  
  logout: () => apiService.post('/auth/logout'),
  
  getCurrentUser: () => apiService.get<AuthUser>('/auth/me'),
  
  updateProfile: (updates: Partial<AuthUser>) =>
    apiService.patch<AuthUser>('/auth/profile', updates),
};

// Export the wallet API methods
export const walletAPI = {
  getBalance: (userId: string) =>
    apiService.get(`/wallet/balance/${userId}`),
  
  getTransactions: (userId: string) =>
    apiService.get(`/wallet/transactions/${userId}`),
  
  getMerits: (userId: string) =>
    apiService.get(`/wallet/merits/${userId}`),
  
  getAllMerits: () =>
    apiService.get('/wallet/merits'),
  
  getMeritsLeaderboard: (limit = 10) =>
    apiService.get(`/wallet/merits/leaderboard?limit=${limit}`),
  
  getMeritHistory: (userId: string, page = 0, limit = 20) =>
    apiService.get(`/wallet/merits/history/${userId}?page=${page}&limit=${limit}`),
  
  awardMerit: (userId: string, meritType: string, amount: number, description?: string) =>
    apiService.post('/wallet/merits/award', { userId, meritType, amount, description }),
  
  transfer: (fromUserId: string, toUserId: string, amount: number, description?: string) =>
    apiService.post('/wallet/transfer', { fromUserId, toUserId, amount, description }),
};

// Export the user API methods
export const userAPI = {
  getProfile: (userId: string) =>
    apiService.get(`/users/${userId}`),
  
  updateProfile: (userId: string, updates: any) =>
    apiService.patch(`/users/${userId}`, updates),
  
  getUsers: () =>
    apiService.get('/users'),
};

// Export the game API methods
export const gameAPI = {
  getGameData: (userId: string) =>
    apiService.get(`/game/data/${userId}`),
  
  updateProgress: (userId: string, progress: any) =>
    apiService.post(`/game/progress/${userId}`, progress),
  
  getQuests: () =>
    apiService.get('/game/quests'),
};

// Export the marketplace API methods
export const marketplaceAPI = {
  getItems: (filters?: any) =>
    apiService.get('/marketplace/items', { params: filters }),
  
  createItem: (itemData: any) =>
    apiService.post('/marketplace/items', itemData),
  
  updateItem: (itemId: string, updates: any) =>
    apiService.patch(`/marketplace/items/${itemId}`, updates),
  
  deleteItem: (itemId: string) =>
    apiService.delete(`/marketplace/items/${itemId}`),
  
  searchItems: (searchTerm: string, filters?: any) =>
    apiService.get(`/marketplace/search?q=${encodeURIComponent(searchTerm)}`, { params: filters }),
  
  getCategories: () =>
    apiService.get('/marketplace/categories'),
  
  getTrending: (limit = 6) =>
    apiService.get(`/marketplace/trending?limit=${limit}`),
};

// Export the videos API methods
export const videosAPI = {
  getCategories: () =>
    apiService.get('/videos/categories'),
  
  getVideos: (category?: string) =>
    apiService.get(`/videos${category ? `?category=${category}` : ''}`),
  
  getPlaylists: () =>
    apiService.get('/videos/playlists'),
};

// Export the stats API methods
export const statsAPI = {
  getGeneral: () =>
    apiService.get('/stats/general'),
  
  getSearch: () =>
    apiService.get('/stats/search'),
  
  getUser: (userId: string) =>
    apiService.get(`/stats/user/${userId}`),
};

// Export the forms API methods
export const formsAPI = {
  submit: (formData: any) =>
    apiService.post('/forms/submit', formData),
};

// Export the mundos API methods
export const mundosAPI = {
  getMundos: () =>
    apiService.get('/mundos'),
  
  getMundo: (mundoId: string) =>
    apiService.get(`/mundos/${mundoId}`),
  
  getMundoBySlug: (slug: string) =>
    apiService.get(`/mundos/slug/${slug}`),
  
  getMundoPlaylists: (mundoId: string) =>
    apiService.get(`/mundos/${mundoId}/playlists`),
};

// Export the social API methods
export const socialAPI = {
  getMatches: () =>
    apiService.get('/social/matches'),
  
  getMatch: (matchId: string) =>
    apiService.get(`/social/matches/${matchId}`),
  
  getMessages: (matchId: string, page = 0, limit = 50) =>
    apiService.get(`/social/matches/${matchId}/messages?page=${page}&limit=${limit}`),
  
  sendMessage: (matchId: string, message: string) =>
    apiService.post(`/social/matches/${matchId}/messages`, { message }),
  
  updateUserStatus: (status: string) =>
    apiService.patch('/social/status', { status }),
  
  getNotifications: () =>
    apiService.get('/social/notifications'),
  
  markNotificationAsRead: (notificationId: string) =>
    apiService.patch(`/social/notifications/${notificationId}/read`),
  
  getPosts: (page = 0, limit = 20) =>
    apiService.get(`/social/posts?page=${page}&limit=${limit}`),
  
  getPost: (postId: string) =>
    apiService.get(`/social/posts/${postId}`),
  
  createPost: (postData: any) =>
    apiService.post('/social/posts', postData),
  
  deletePost: (postId: string) =>
    apiService.delete(`/social/posts/${postId}`),
  
  likePost: (postId: string) =>
    apiService.post(`/social/posts/${postId}/like`),
  
  unlikePost: (postId: string) =>
    apiService.delete(`/social/posts/${postId}/like`),
  
  getPostLikes: (postId: string) =>
    apiService.get(`/social/posts/${postId}/likes`),
  
  getPostComments: (postId: string, page = 0, limit = 10) =>
    apiService.get(`/social/posts/${postId}/comments?page=${page}&limit=${limit}`),
  
  createComment: (postId: string, commentData: any) =>
    apiService.post(`/social/posts/${postId}/comments`, commentData),
  
  deleteComment: (commentId: string) =>
    apiService.delete(`/social/comments/${commentId}`),
  
  likeComment: (commentId: string) =>
    apiService.post(`/social/comments/${commentId}/like`),
  
  unlikeComment: (commentId: string) =>
    apiService.delete(`/social/comments/${commentId}/like`),
};

export default apiService;