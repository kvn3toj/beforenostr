import { test, expect } from '@playwright/test';

test.describe('√úPlay Structure Explorer', () => {
  test('explore √úPlay structure after login', async ({ page }) => {
    console.log('üîç EXPLORANDO ESTRUCTURA DE √úPLAY');

    // Ir a la p√°gina inicial
    await page.goto('http://localhost:3001');

    // Hacer login autom√°ticamente si es necesario
    const currentUrl = page.url();
    if (currentUrl.includes('/login')) {
      console.log('üîê Haciendo login autom√°tico...');

      await page.fill('[data-testid="login-email-input"] input', 'admin@gamifier.com');
      await page.fill('[data-testid="login-password-input"] input', 'admin123');
      await page.click('[data-testid="login-submit-button"]');

      // Esperar redirecci√≥n
      await page.waitForURL('**/', { timeout: 15000 });
      console.log(`‚úÖ Login exitoso, URL: ${page.url()}`);
    }

    // Esperar que cargue completamente
    await page.waitForLoadState('networkidle');
    console.log('üìç P√°gina principal cargada');

    // Navegar a √úPlay
    console.log('üéÆ Navegando a √úPlay...');

    // Intentar diferentes formas de llegar a √úPlay
    const uplaySelectors = [
      'a[href="/uplay"]',
      'text=√úPlay',
      'text=UPlay',
      '[data-testid*="uplay"]',
      'button:has-text("√úPlay")',
      'button:has-text("UPlay")'
    ];

    let foundUPlay = false;
    for (const selector of uplaySelectors) {
      try {
        const element = page.locator(selector).first();
        const count = await element.count();
        if (count > 0) {
          console.log(`‚úÖ Encontrado √úPlay con selector: ${selector}`);
          await element.click();
          foundUPlay = true;
          break;
        }
      } catch (error) {
        // Continuar con el siguiente selector
      }
    }

    if (!foundUPlay) {
      console.log('‚ö†Ô∏è No se encontr√≥ enlace directo a √úPlay, navegando manualmente...');
      await page.goto('http://localhost:3001/uplay');
    }

    // Esperar que cargue √úPlay
    await page.waitForLoadState('networkidle');
    console.log('üéÆ √úPlay cargado');

    // Capturar screenshot inicial de √úPlay
    await page.screenshot({ path: 'test-results/uplay-structure-full.png', fullPage: true });
    console.log('üì∏ Screenshot completo de √úPlay guardado');

    // Explorar la estructura de √úPlay
    console.log('\nüîç EXPLORANDO ESTRUCTURA DE √úPLAY:');

    // Buscar tabs/pesta√±as
    const tabSelectors = [
      '[role="tab"]',
      '.MuiTab-root',
      '[data-testid*="tab"]',
      'button[aria-selected]',
      'text=Videoteca',
      'text=Biblioteca',
      'text=Videos',
      'text=Contenido'
    ];

    console.log('\nüìë BUSCANDO TABS/PESTA√ëAS:');
    for (const selector of tabSelectors) {
      try {
        const elements = page.locator(selector);
        const count = await elements.count();
        if (count > 0) {
          console.log(`   ‚úÖ ${selector}: ${count} elementos`);
          for (let i = 0; i < Math.min(count, 3); i++) {
            const text = await elements.nth(i).textContent();
            console.log(`      ${i + 1}. "${text}"`);
          }
        }
      } catch (error) {
        // Continuar
      }
    }

    // Buscar cards/tarjetas de video
    const cardSelectors = [
      '[data-testid*="video"]',
      '[data-testid*="card"]',
      '.MuiCard-root',
      '[class*="card"]',
      'img[src*="youtube"]',
      'img[src*="placeholder"]'
    ];

    console.log('\nüÉè BUSCANDO CARDS/TARJETAS DE VIDEO:');
    for (const selector of cardSelectors) {
      try {
        const elements = page.locator(selector);
        const count = await elements.count();
        if (count > 0) {
          console.log(`   ‚úÖ ${selector}: ${count} elementos`);
        }
      } catch (error) {
        // Continuar
      }
    }

    // Buscar botones principales
    console.log('\nüîò BOTONES PRINCIPALES VISIBLES:');
    const buttons = page.locator('button:visible');
    const buttonCount = await buttons.count();
    console.log(`   Total botones: ${buttonCount}`);

    for (let i = 0; i < Math.min(buttonCount, 10); i++) {
      const text = await buttons.nth(i).textContent();
      if (text && text.trim()) {
        console.log(`   ${i + 1}. "${text.trim()}"`);
      }
    }

    // Buscar enlaces principales
    console.log('\nüîó ENLACES PRINCIPALES VISIBLES:');
    const links = page.locator('a:visible');
    const linkCount = await links.count();
    console.log(`   Total enlaces: ${linkCount}`);

    for (let i = 0; i < Math.min(linkCount, 10); i++) {
      const text = await links.nth(i).textContent();
      const href = await links.nth(i).getAttribute('href');
      if (text && text.trim()) {
        console.log(`   ${i + 1}. "${text.trim()}" -> ${href}`);
      }
    }

    // Informaci√≥n de la p√°gina
    const title = await page.title();
    const url = page.url();
    console.log('\nüìã INFORMACI√ìN DE P√ÅGINA:');
    console.log(`   T√≠tulo: ${title}`);
    console.log(`   URL: ${url}`);

    console.log('\nüéØ AHORA PUEDES NAVEGAR MANUALMENTE');
    console.log('El test esperar√° 2 minutos para que explores.');
    console.log('Presiona Ctrl+C cuando termines.');

    // Esperar 2 minutos para navegaci√≥n manual
    await page.waitForTimeout(2 * 60 * 1000);

    // Screenshot final
    await page.screenshot({ path: 'test-results/uplay-structure-final.png', fullPage: true });
    console.log('\nüì∏ Screenshot final guardado');
    console.log('‚úÖ Exploraci√≥n completada');

    // El test siempre pasa
    expect(true).toBe(true);
  });
});
