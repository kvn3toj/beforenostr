import { test, expect } from '@playwright/test';\n\ntest.describe('Manual Navigation Learning - Interactive Test', () => {\n  test('learn from manual navigation patterns', async ({ page }) => {\n    console.log('INICIANDO TEST DE APRENDIZAJE - NAVEGACION MANUAL');\n    console.log('Por favor navega manualmente mientras capturo los patrones');\n\n    // Configurar interceptores para aprender sobre las requests\n    const apiCalls: Array<{ url: string, method: string, status?: number, timing: number }> = [];\n    const pageChanges: Array<{ url: string, title: string, timestamp: number }> = [];\n\n    // Interceptar todas las llamadas API\n    page.on('request', request => {\n      const startTime = Date.now();\n      if (request.url().includes('/api/') || request.url().includes('localhost:3002')) {\n        apiCalls.push({\n          url: request.url(),\n          method: request.method(),\n          timing: startTime\n        });\n        console.log(`API Request: ${request.method()} ${request.url()}`);\n      }\n    });\n\n    page.on('response', response => {\n      const call = apiCalls.find(c => c.url === response.url());\n      if (call) {\n        call.status = response.status();\n        call.timing = Date.now() - call.timing;\n        console.log(`API Response: ${response.status()} ${response.url()} (${call.timing}ms)`);\n      }\n    });\n\n    // Interceptar cambios de página\n    page.on('framenavigated', frame => {\n      if (frame === page.mainFrame()) {\n        pageChanges.push({\n          url: frame.url(),\n          title: '',\n          timestamp: Date.now()\n        });\n        console.log(`Navigation: ${frame.url()}`);\n      }\n    });\n\n    // Ir a la página inicial\n    console.log('Navegando a localhost:3001...');\n    await page.goto('http://localhost:3001');\n    \n    // Verificar estado inicial\n    const initialUrl = page.url();\n    console.log(`URL inicial: ${initialUrl}`);\n    \n    // Si está en login, hacer login automático\n    if (initialUrl.includes('/login')) {\n      console.log('Detectado login, autenticando...');\n      \n      await page.fill('[data-testid=\"login-email-input\"] input', 'admin@gamifier.com');\n      await page.fill('[data-testid=\"login-password-input\"] input', 'admin123');\n      await page.click('[data-testid=\"login-submit-button\"]');\n      \n      // Esperar redirección\n      await page.waitForURL('**/', { timeout: 15000 });\n      console.log(`Login exitoso, nueva URL: ${page.url()}`);\n    }\n\n    // Tomar screenshot inicial\n    await page.screenshot({ path: 'test-results/manual-learning-start.png', fullPage: true });\n    console.log('Screenshot inicial tomado');\n\n    console.log('');\n    console.log('INSTRUCCIONES PARA EL USUARIO:');\n    console.log('1. Explora la página principal');\n    console.log('2. Ve a UPlay y explora los videos');\n    console.log('3. Ve al Marketplace');\n    console.log('4. Explora la sección Social si está disponible');\n    console.log('5. Navega por cualquier configuración o perfil');\n    console.log('');\n    console.log('Tienes 3 minutos para navegar. El test capturará todo.');\n    console.log('Presiona Ctrl+C cuando termines o espera 3 minutos.');\n    console.log('');\n\n    // Función para capturar estado actual de la página\n    const capturePageState = async (label: string) => {\n      const title = await page.title();\n      const url = page.url();\n      \n      console.log(``);\n      console.log(`ESTADO DE PAGINA - ${label}:`);\n      console.log(`   Título: ${title}`);\n      console.log(`   URL: ${url}`);\n      \n      // Capturar elementos principales visibles\n      try {\n        const buttons = await page.locator('button:visible').count();\n        const links = await page.locator('a:visible').count();\n        const inputs = await page.locator('input:visible').count();\n        const cards = await page.locator('[class*=\"card\"]:visible, [data-testid*=\"card\"]:visible').count();\n        \n        console.log(`     Botones: ${buttons}`);\n        console.log(`     Enlaces: ${links}`);\n        console.log(`     Inputs: ${inputs}`);\n        console.log(`     Cards/Tarjetas: ${cards}`);\n        \n        return { title, url, buttons, links, inputs, cards };\n      } catch (error) {\n        console.log(`     Error capturando elementos: ${error}`);\n        return { title, url, buttons: 0, links: 0, inputs: 0, cards: 0 };\n      }\n    };\n\n    // Capturar estado inicial\n    await capturePageState('INICIO');\n\n    // Esperar y capturar estados cada 20 segundos\n    const captureInterval = setInterval(async () => {\n      try {\n        await capturePageState('PERIODIC');\n        await page.screenshot({ \n          path: `test-results/manual-learning-${Date.now()}.png`, \n          fullPage: true \n        });\n      } catch (error) {\n        console.log('Error capturing state:', error);\n      }\n    }, 20000);\n\n    // Esperar 3 minutos para navegación manual\n    try {\n      await page.waitForTimeout(3 * 60 * 1000); // 3 minutos\n    } catch (error) {\n      console.log('Test interrumpido por el usuario');\n    } finally {\n      clearInterval(captureInterval);\n    }\n\n    // Capturar estado final\n    await capturePageState('FINAL');\n    await page.screenshot({ path: 'test-results/manual-learning-end.png', fullPage: true });\n\n    // Resumen del aprendizaje\n    console.log('');\n    console.log('RESUMEN DE APRENDIZAJE:');\n    console.log(`Total API calls: ${apiCalls.length}`);\n    console.log(`Navegaciones: ${pageChanges.length}`);\n    \n    console.log('');\n    console.log('APIs más utilizadas:');\n    const apiFrequency = apiCalls.reduce((acc, call) => {\n      const endpoint = call.url.split('/').pop() || 'unknown';\n      acc[endpoint] = (acc[endpoint] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    Object.entries(apiFrequency)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .forEach(([endpoint, count]) => {\n        console.log(`   ${endpoint}: ${count} llamadas`);\n      });\n\n    console.log('');\n    console.log('Páginas visitadas:');\n    [...new Set(pageChanges.map(p => p.url))].forEach(url => {\n      console.log(`   ${url}`);\n    });\n\n    console.log('');\n    console.log('Test de aprendizaje completado. Información capturada para mejorar tests futuros.');\n    \n    // El test siempre pasa - es solo para observación\n    expect(true).toBe(true);\n  });\n});
