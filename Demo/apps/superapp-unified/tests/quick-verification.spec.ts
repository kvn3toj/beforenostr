/**
 * üöÄ Quick Verification Test - Implementaciones Completadas
 * 
 * Verifica que las funcionalidades principales est√©n implementadas:
 * - √úPlay gamificado
 * - Social Feed avanzado
 * - PWA Features
 * - Navegaci√≥n b√°sica
 */

import { test, expect } from '@playwright/test';

test.describe('Quick Implementation Verification', () => {
  
  test('üéÆ √úPlay gamificado est√° implementado', async ({ page }) => {
    // Ir directamente a √úPlay
    await page.goto('/uplay');
    
    // Verificar que el componente principal cargue
    await page.waitForSelector('h1, h2, h3', { timeout: 10000 });
    
    // Verificar elementos gamificados
    await expect(page.locator('text=/m√©ritos|merits|experiencia|experience|nivel|level/i')).toBeVisible({ timeout: 5000 });
    
    // Verificar que hay contenido de videos
    await expect(page.locator('text=/video|reproducir|play/i')).toBeVisible({ timeout: 5000 });
    
    console.log('‚úÖ √úPlay gamificado verificado');
  });

  test('ü§ù Social Feed gamificado est√° implementado', async ({ page }) => {
    // Ir directamente al Social Feed
    await page.goto('/social');
    
    // Verificar que el componente principal cargue
    await page.waitForSelector('h1, h2, h3', { timeout: 10000 });
    
    // Verificar elementos sociales
    await expect(page.locator('text=/post|publicaci√≥n|compartir|like|comentario/i')).toBeVisible({ timeout: 5000 });
    
    // Verificar filtros avanzados
    await expect(page.locator('text=/filtro|filter|ordenar|sort/i')).toBeVisible({ timeout: 5000 });
    
    console.log('‚úÖ Social Feed gamificado verificado');
  });

  test('üì± PWA Demo est√° implementado', async ({ page }) => {
    // Ir directamente al PWA Demo
    await page.goto('/pwa-demo');
    
    // Verificar que el componente principal cargue
    await page.waitForSelector('h1, h2, h3', { timeout: 10000 });
    
    // Verificar funcionalidades PWA
    await expect(page.locator('text=/PWA|Progressive|compartir|share|vibraci√≥n|vibration/i')).toBeVisible({ timeout: 5000 });
    
    // Verificar que hay botones de funcionalidades
    await expect(page.locator('button')).toBeVisible({ timeout: 5000 });
    
    console.log('‚úÖ PWA Demo verificado');
  });

  test('üè† P√°gina principal funciona', async ({ page }) => {
    // Ir a la p√°gina principal
    await page.goto('/');
    
    // Verificar que la aplicaci√≥n carga
    await page.waitForSelector('h1, h2, h3, .MuiBox-root', { timeout: 10000 });
    
    // Verificar que no hay errores cr√≠ticos en consola
    const errors: string[] = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        errors.push(msg.text());
      }
    });
    
    // Esperar un momento para capturar errores
    await page.waitForTimeout(2000);
    
    // No deber√≠a haber errores cr√≠ticos (ignoramos warnings menores)
    const criticalErrors = errors.filter(error => 
      !error.includes('Warning') && 
      !error.includes('favicon') &&
      !error.includes('404')
    );
    
    expect(criticalErrors.length).toBe(0);
    
    console.log('‚úÖ P√°gina principal verificada');
  });

  test('üß≠ Navegaci√≥n directa a m√≥dulos funciona', async ({ page }) => {
    const routes = [
      { path: '/home', name: 'Home' },
      { path: '/marketplace', name: 'Marketplace' },
      { path: '/uplay', name: '√úPlay' },
      { path: '/social', name: 'Social' },
      { path: '/wallet', name: 'Wallet' },
      { path: '/pwa-demo', name: 'PWA Demo' }
    ];

    for (const route of routes) {
      console.log(`üîç Verificando ruta: ${route.path}`);
      
      await page.goto(route.path);
      
      // Verificar que la p√°gina carga sin errores 404
      await expect(page).not.toHaveURL(/.*404.*/);
      
      // Verificar que hay contenido
      await page.waitForSelector('h1, h2, h3, .MuiBox-root, div', { timeout: 10000 });
      
      // Verificar que no es una p√°gina en blanco
      const content = await page.locator('body').textContent();
      expect(content?.length).toBeGreaterThan(10);
      
      console.log(`‚úÖ ${route.name} funciona correctamente`);
    }
  });

  test('üìä Estado de backend conectividad', async ({ page }) => {
    // Ir a cualquier p√°gina que use el backend
    await page.goto('/home');
    
    // Interceptar llamadas al backend
    let backendCalls = 0;
    page.route('**/api/**', route => {
      backendCalls++;
      route.continue();
    });
    
    // Esperar un momento para que se hagan llamadas
    await page.waitForTimeout(3000);
    
    console.log(`üì° Llamadas al backend detectadas: ${backendCalls}`);
    
    // Verificar que al menos se intenten llamadas al backend
    expect(backendCalls).toBeGreaterThan(0);
    
    console.log('‚úÖ Conectividad con backend verificada');
  });

  test('üé® Componentes UI est√°n renderizando', async ({ page }) => {
    await page.goto('/home');
    
    // Verificar Material-UI est√° cargado
    await expect(page.locator('.MuiBox-root, .MuiButton-root, .MuiTypography-root')).toBeVisible({ timeout: 10000 });
    
    // Verificar que hay estilos aplicados
    const element = page.locator('.MuiBox-root').first();
    const styles = await element.evaluate(el => window.getComputedStyle(el));
    
    // Debe tener estilos de Material-UI
    expect(styles.display).not.toBe('');
    
    console.log('‚úÖ Componentes UI verificados');
  });

  test('üîß Funcionalidades JavaScript est√°n activas', async ({ page }) => {
    await page.goto('/pwa-demo');
    
    // Verificar que React est√° funcionando
    const reactVersion = await page.evaluate(() => {
      // @ts-ignore
      return window.React ? 'React detected' : 'React not found';
    });
    
    console.log(`‚öõÔ∏è React status: ${reactVersion}`);
    
    // Verificar que hay interactividad
    const buttons = await page.locator('button').count();
    expect(buttons).toBeGreaterThan(0);
    
    console.log('‚úÖ JavaScript funcionalidades verificadas');
  });
}); 