# üöÄ Coom√únity SuperApp - Reglas de Desarrollo

## üîÑ Reglas Cr√≠ticas para Lazy Loading en React

### **OBLIGATORIO - Prevenci√≥n de Errores "Element type is invalid"**

Estas reglas previenen el error cr√≠tico: *"Element type is invalid. Received a promise that resolves to: undefined. Lazy element type must resolve to a class or function"*

#### **1. Consistencia de Nombres y Exportaciones**
```typescript
// ‚úÖ CORRECTO
// Archivo: UPlay.tsx
export default function UPlay() { ... }

// ‚ùå INCORRECTO
// Archivo: UPlay.tsx
export const UPlayPage = () => { ... } // Nombre inconsistente
```

#### **2. Exportaciones por Defecto Obligatorias**
```typescript
// ‚úÖ CORRECTO - Para componentes de p√°gina
const MyPage = () => { ... };
export default MyPage;

// ‚ùå INCORRECTO - Named exports causan lazy loading failures
export const MyPage = () => { ... };
```

#### **3. Extensiones de Archivo en Importaciones Din√°micas**
```typescript
// ‚úÖ CORRECTO
const createLazyPage = (path: string) => {
  return lazy(() => import(`../pages/${path}.tsx`));
};

// ‚ùå INCORRECTO - Causa warnings de Vite
const createLazyPage = (path: string) => {
  return lazy(() => import(`../pages/${path}`)); // Sin extensi√≥n
};
```

#### **4. Estructura de lazyComponents.ts**
```typescript
// ‚úÖ ESTRUCTURA CORRECTA
import { lazy } from 'react';

// Para exportaciones por defecto
const createLazyPage = (path: string) => {
  return lazy(() => import(`../pages/${path}.tsx`));
};

// Para exportaciones nombradas (solo si es necesario)
const createLazyPageNamed = (path: string, componentName: string) => {
  return lazy(() => import(`../pages/${path}.tsx`).then(module => ({
    default: (module as any)[componentName]
  })));
};
```

#### **5. Protocolo de Verificaci√≥n Post-Cambios**
```bash
# SIEMPRE ejecutar despu√©s de cambios en lazy loading:
npm run dev
# Verificar logs de Vite para warnings
# Probar navegaci√≥n a p√°ginas lazy-loaded
# Verificar que no hay errores en consola del navegador
```

#### **6. Monitoreo de Logs de Vite**
Estar atento a estos warnings cr√≠ticos:
```
‚ö†Ô∏è WARNING: invalid import "../pages/${path}"
‚ö†Ô∏è WARNING: A file extension must be included in the static part of the import
‚ö†Ô∏è WARNING: The above dynamic import cannot be analyzed by Vite
```

### **Recomendaciones Adicionales**

- **Testing**: Siempre probar lazy loading despu√©s de cambios en estructura de archivos
- **Naming**: Mantener nombres de archivo simples y consistentes con exportaciones
- **Debugging**: Usar React DevTools para verificar que componentes lazy se cargan correctamente
- **Performance**: Monitorear que el code splitting est√© funcionando en Network tab

### **Casos de Uso Espec√≠ficos Coom√únity**

```typescript
// P√°ginas principales de la SuperApp
const HomePage = createLazyPage('HomePage');      // ‚úÖ HomePage.tsx exports default HomePage
const UPlay = createLazyPage('UPlay');            // ‚úÖ UPlay.tsx exports default UPlay
const Marketplace = createLazyPage('Marketplace'); // ‚úÖ Marketplace.tsx exports default Marketplace
const Social = createLazyPage('Social');          // ‚úÖ Social.tsx exports default Social
```

---

**Estas reglas son CR√çTICAS para el funcionamiento correcto de la SuperApp Coom√únity y deben seguirse estrictamente para evitar errores de lazy loading.**
