import { test, expect } from '@playwright/test';

test.describe('üöÄ Home Page - Phase 3 Simple Verification (No Auth)', () => {
  test('üîç Verificar que la aplicaci√≥n se carga sin errores de compilaci√≥n', async ({ page }) => {
    // Escuchar errores de consola
    const consoleErrors: string[] = [];
    const consoleWarnings: string[] = [];
    
    page.on('console', (msg) => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
      } else if (msg.type() === 'warning') {
        consoleWarnings.push(msg.text());
      }
    });

    // Navegar a la p√°gina principal
    await page.goto('/');
    
    // Esperar a que React se monte
    await page.waitForSelector('#root', { timeout: 10000 });
    await page.waitForTimeout(3000);

    // Verificar que no hay errores cr√≠ticos de compilaci√≥n
    const compilationErrors = consoleErrors.filter(error => 
      error.includes('Failed to compile') || 
      error.includes('SyntaxError') ||
      error.includes('Module not found') ||
      error.includes('Cannot resolve')
    );
    
    console.log('üìä Errores de consola encontrados:', consoleErrors.length);
    console.log('‚ö†Ô∏è Advertencias de consola encontradas:', consoleWarnings.length);
    
    if (compilationErrors.length > 0) {
      console.log('‚ùå Errores de compilaci√≥n:', compilationErrors);
    }
    
    expect(compilationErrors).toHaveLength(0);
    console.log('‚úÖ No hay errores de compilaci√≥n cr√≠ticos');
  });

  test('üéØ Verificar que no hay errores de undefined ondas', async ({ page }) => {
    // Escuchar errores de consola espec√≠ficamente
    const consoleErrors: string[] = [];
    
    page.on('console', (msg) => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
      }
    });

    // Navegar a la p√°gina principal
    await page.goto('/');
    
    // Esperar a que la p√°gina se cargue completamente
    await page.waitForSelector('#root', { timeout: 10000 });
    await page.waitForTimeout(5000); // Tiempo extra para que se ejecuten todos los efectos

    // Verificar espec√≠ficamente errores de ondas.toLocaleString
    const ondasErrors = consoleErrors.filter(error => 
      (error.includes('ondas') && error.includes('toLocaleString')) ||
      (error.includes('undefined is not an object') && error.includes('toLocaleString')) ||
      error.includes('fb0375de251941978ee523c5bb30dfbd') // El error ID espec√≠fico
    );
    
    console.log('üîç Total de errores de consola:', consoleErrors.length);
    console.log('üéØ Errores relacionados con ondas:', ondasErrors.length);
    
    if (ondasErrors.length > 0) {
      console.log('‚ùå Errores de ondas encontrados:', ondasErrors);
    }
    
    expect(ondasErrors).toHaveLength(0);
    console.log('‚úÖ No se encontraron errores de ondas.toLocaleString()');
  });

  test('üì± Verificar que la p√°gina se renderiza b√°sicamente', async ({ page }) => {
    // Navegar a la p√°gina principal
    await page.goto('/');
    
    // Esperar a que React se monte
    await page.waitForSelector('#root', { timeout: 10000 });
    await page.waitForTimeout(2000);

    // Verificar que el contenedor principal existe
    const rootElement = page.locator('#root');
    await expect(rootElement).toBeVisible();
    
    // Verificar que hay contenido en la p√°gina
    const bodyText = await page.textContent('body');
    expect(bodyText).toBeTruthy();
    expect(bodyText!.length).toBeGreaterThan(10);
    
    console.log('‚úÖ La p√°gina se renderiza correctamente');
  });

  test('üîß Verificar elementos b√°sicos de la interfaz', async ({ page }) => {
    // Navegar a la p√°gina principal
    await page.goto('/');
    
    // Esperar a que React se monte
    await page.waitForSelector('#root', { timeout: 10000 });
    await page.waitForTimeout(3000);

    // Verificar que hay elementos de Material-UI presentes
    const muiElements = page.locator('[class*="Mui"]');
    const muiCount = await muiElements.count();
    
    expect(muiCount).toBeGreaterThan(0);
    console.log(`‚úÖ Encontrados ${muiCount} elementos de Material-UI`);

    // Verificar que no hay texto "undefined" o "NaN" visible
    const undefinedText = page.locator('text=/undefined|NaN/i');
    const undefinedCount = await undefinedText.count();
    
    expect(undefinedCount).toBe(0);
    console.log('‚úÖ No hay texto "undefined" o "NaN" visible en la interfaz');
  });

  test('üé® Verificar que los n√∫meros se formatean correctamente', async ({ page }) => {
    // Navegar a la p√°gina principal
    await page.goto('/');
    
    // Esperar a que React se monte
    await page.waitForSelector('#root', { timeout: 10000 });
    await page.waitForTimeout(3000);

    // Buscar n√∫meros formateados (con comas o puntos)
    const formattedNumbers = page.locator('text=/[0-9]{1,3}[,.][0-9]/');
    const numberCount = await formattedNumbers.count();
    
    console.log(`üìä N√∫meros formateados encontrados: ${numberCount}`);
    
    // Si hay n√∫meros, verificar que est√°n bien formateados
    if (numberCount > 0) {
      const firstNumber = await formattedNumbers.first().textContent();
      console.log(`üî¢ Ejemplo de n√∫mero formateado: ${firstNumber}`);
      
      // Verificar que no contiene "undefined" o "NaN"
      expect(firstNumber).not.toContain('undefined');
      expect(firstNumber).not.toContain('NaN');
    }
    
    console.log('‚úÖ Los n√∫meros se formatean correctamente');
  });

  test('üåê Verificar conectividad y estados', async ({ page }) => {
    // Navegar a la p√°gina principal
    await page.goto('/');
    
    // Esperar a que React se monte
    await page.waitForSelector('#root', { timeout: 10000 });
    await page.waitForTimeout(3000);

    // Buscar indicadores de estado (alertas, mensajes)
    const alerts = page.locator('.MuiAlert-root, [role="alert"]');
    const alertCount = await alerts.count();
    
    console.log(`üì¢ Alertas/mensajes de estado encontrados: ${alertCount}`);
    
    if (alertCount > 0) {
      const firstAlert = await alerts.first().textContent();
      console.log(`üìù Primer mensaje de estado: ${firstAlert}`);
    }
    
    // Verificar que la p√°gina responde a interacciones b√°sicas
    await page.evaluate(() => {
      window.scrollTo(0, 100);
    });
    
    await page.waitForTimeout(1000);
    
    console.log('‚úÖ La p√°gina responde a interacciones b√°sicas');
  });
}); 