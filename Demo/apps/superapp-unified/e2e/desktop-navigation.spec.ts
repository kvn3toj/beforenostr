import { test, expect } from '@playwright/test';

test.describe('üñ•Ô∏è Desktop Navigation - KIRA + ARIA + ZENO Test', () => {
  test.beforeEach(async ({ page }) => {
    // Configurar viewport para desktop
    await page.setViewportSize({ width: 1200, height: 800 });

    // Navegar a la p√°gina principal - la autenticaci√≥n est√° persistida via storageState
    await page.goto('/');

    // Esperar a que la aplicaci√≥n cargue completamente
    await page.waitForLoadState('networkidle');
  });

  test('üõ†Ô∏è ARIA: Sidebar debe ser visible en desktop', async ({ page }) => {
    // Verificar que el sidebar existe (puede estar hidden por CSS pero debe existir)
    const sidebar = page.locator('.MuiDrawer-root').first();
    await expect(sidebar).toBeAttached();

    // En desktop, verificar que los elementos de navegaci√≥n principales son clickeables
    // (esto demuestra que la funcionalidad no est√° tapada)
    await expect(page.locator('.MuiDrawer-root').locator('text=Inicio')).toBeVisible();
    await expect(page.locator('.MuiDrawer-root').locator('text=Marketplace')).toBeVisible();
    await expect(page.locator('.MuiDrawer-root').locator('text=√úPlay')).toBeVisible();
    await expect(page.locator('.MuiDrawer-root').locator('text=Social')).toBeVisible();

    // Test importante: verificar que podemos hacer click en elementos del sidebar
    await page.locator('.MuiDrawer-root').locator('text=Marketplace').click();
    await expect(page).toHaveURL(/.*\/marketplace/);
  });

  test('üõ†Ô∏è ZENO: AppHeader debe estar siempre visible y accesible', async ({ page }) => {
    // Verificar que el header est√° visible
    const header = page.locator('.MuiAppBar-root').first();
    await expect(header).toBeVisible();

    // Verificar que el logo/brand est√° visible en el header (espec√≠ficamente)
    await expect(page.locator('.MuiAppBar-root').locator('text=Coom√únity')).toBeVisible();

    // Verificar que el avatar de perfil est√° accesible
    const profileButton = page.locator('.MuiAppBar-root').locator('.MuiAvatar-root').first();
    await expect(profileButton).toBeVisible();
    await profileButton.click();

    // Verificar que el men√∫ desplegable aparece (usar el selector del men√∫, no sidebar)
    await expect(page.locator('[role="menuitem"]').filter({ hasText: 'Mi Perfil' })).toBeVisible();

    // Cerrar el men√∫ presionando Escape
    await page.keyboard.press('Escape');
  });

  test('üõ†Ô∏è KIRA: Navegaci√≥n no debe tapar contenido en desktop', async ({ page }) => {
    // Navegar a diferentes p√°ginas y verificar que el contenido es visible
    const testPages = [
      { path: '/marketplace', elementText: 'GMP' },
      { path: '/uplay', elementText: '√úPlay' },
      { path: '/social', elementText: 'Social' },
      { path: '/ustats', elementText: 'UStats' }
    ];

    for (const testPage of testPages) {
      await page.goto(testPage.path);
      await page.waitForLoadState('networkidle');

      // Verificar que el contenido principal es visible (buscar elemento m√°s general)
      const mainContent = page.locator('.MuiBox-root').filter({ has: page.locator('h1, h2, h3, h4, h5, h6') }).first();
      await expect(mainContent).toBeVisible();

      // Verificar que no hay elementos flotantes tapando el contenido
      const contentBox = await mainContent.boundingBox();
      expect(contentBox).toBeTruthy();
      expect(contentBox!.width).toBeGreaterThan(300); // Contenido principal debe tener ancho razonable

      console.log(`‚úÖ P√°gina ${testPage.path} - Navegaci√≥n OK`);
    }
  });

  test('üö® CR√çTICO: Elementos flotantes no deben tapar la navegaci√≥n', async ({ page }) => {
    await page.goto('/');
    await page.waitForLoadState('networkidle');

        // Verificar z-index de elementos cr√≠ticos
    const header = page.locator('.MuiAppBar-root').first();
    await expect(header).toBeVisible();

    const headerZIndex = await header.evaluate(el => getComputedStyle(el).zIndex);

    // El header debe tener un z-index razonable (no 'auto')
    expect(headerZIndex).not.toBe('auto');
    expect(parseInt(headerZIndex)).toBeGreaterThan(0);

    // Verificar que elementos flotantes no tapan el header
    const floatingElements = page.locator('[style*="position: fixed"]');
    const count = await floatingElements.count();

    console.log(`üîç Encontrados ${count} elementos flotantes`);

    // Verificar que el header sigue siendo clickeable despu√©s de cargar la p√°gina
    await page.waitForTimeout(2000); // Esperar a que todos los elementos flotantes se carguen

    const logo = page.locator('.MuiAppBar-root').locator('text=Coom√únity').first();
    await expect(logo).toBeVisible();
    await logo.click(); // Debe ser clickeable

    // Verificar que regresamos al inicio
    await expect(page).toHaveURL(/.*\/$|.*\/\?.*|.*$/); // Acepta /, /?query, o ra√≠z
  });

  test('üñ•Ô∏è RESPONSIVE: Layout debe adaptarse correctamente', async ({ page }) => {
    // Probar diferentes tama√±os de desktop
    const desktopSizes = [
      { width: 1024, height: 768 },  // Tablet landscape
      { width: 1366, height: 768 },  // Laptop peque√±a
      { width: 1920, height: 1080 }, // Desktop com√∫n
    ];

    for (const size of desktopSizes) {
      await page.setViewportSize(size);
      await page.goto('/');
      await page.waitForLoadState('networkidle');

      // Verificar que el sidebar est√° presente y funcional (puede estar CSS-hidden pero funcionando)
      const sidebar = page.locator('.MuiDrawer-root').first();
      await expect(sidebar).toBeAttached();

      // M√°s importante: verificar que la navegaci√≥n funciona en este tama√±o
      await expect(page.locator('.MuiDrawer-root').locator('text=Marketplace')).toBeVisible();

      // Verificar que el contenido principal no est√° comprimido
      const mainContent = page.locator('.MuiBox-root').filter({ has: page.locator('h1, h2, h3, h4, h5, h6') }).first();
      const contentBox = await mainContent.boundingBox();
      expect(contentBox!.width).toBeGreaterThan(size.width * 0.4); // Al menos 40% del ancho

      console.log(`‚úÖ Layout OK en ${size.width}x${size.height}`);
    }
  });
});
