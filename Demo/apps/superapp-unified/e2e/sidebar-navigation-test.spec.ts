import { test, expect } from '@playwright/test';

test.describe('Sidebar Navigation - New √úPlay Links', () => {
  test.beforeEach(async ({ page }) => {
    // Navegar a la p√°gina de login
    await page.goto('/login');
    
    // Realizar login con credenciales v√°lidas
    await page.fill('[data-testid="login-email-input"] input', 'user@gamifier.com');
    await page.fill('[data-testid="login-password-input"] input', '123456');
    await page.click('[data-testid="login-submit-button"]');
    
    // Esperar a que la autenticaci√≥n se complete y redirija
    await page.waitForURL('**/', { timeout: 15000 });
    
    // Verificar que React se haya montado
    await page.waitForSelector('#root', { timeout: 10000 });
  });

  test('üéÆ Navegaci√≥n a √úPlay Horizontal Demo desde el men√∫ lateral', async ({ page }) => {
    console.log('üîç Verificando navegaci√≥n a Horizontal Demo...');
    
    // Buscar el enlace en el sidebar
    const horizontalDemoLink = page.locator('[data-testid="sidebar"]').locator('text=√úPlay Horizontal Demo');
    
    // Verificar que el enlace existe
    await expect(horizontalDemoLink).toBeVisible();
    console.log('‚úÖ Enlace "√úPlay Horizontal Demo" encontrado en el sidebar');
    
    // Hacer clic en el enlace
    await horizontalDemoLink.click();
    
    // Esperar a que la navegaci√≥n se complete
    await page.waitForURL('**/uplay/horizontal-demo', { timeout: 10000 });
    console.log('‚úÖ Navegaci√≥n a /uplay/horizontal-demo completada');
    
    // Verificar que la p√°gina se carg√≥ correctamente
    await page.waitForSelector('#root', { timeout: 10000 });
    
    // Verificar elementos espec√≠ficos de la p√°gina Horizontal Demo
    await expect(page.locator('h1')).toContainText('Reproductor Horizontal √úPlay');
    await expect(page.locator('text=GPL - Gamified Play List')).toBeVisible();
    await expect(page.locator('text=Video Demo')).toBeVisible();
    
    console.log('‚úÖ P√°gina Horizontal Demo cargada correctamente');
  });

  test('üéØ Navegaci√≥n a √úPlay Gamified desde el men√∫ lateral', async ({ page }) => {
    console.log('üîç Verificando navegaci√≥n a √úPlay Gamified...');
    
    // Buscar el enlace en el sidebar
    const gamifiedLink = page.locator('[data-testid="sidebar"]').locator('text=√úPlay Gamified');
    
    // Verificar que el enlace existe
    await expect(gamifiedLink).toBeVisible();
    console.log('‚úÖ Enlace "√úPlay Gamified" encontrado en el sidebar');
    
    // Hacer clic en el enlace
    await gamifiedLink.click();
    
    // Esperar a que la navegaci√≥n se complete
    await page.waitForURL('**/uplay-gamified', { timeout: 10000 });
    console.log('‚úÖ Navegaci√≥n a /uplay-gamified completada');
    
    // Verificar que la p√°gina se carg√≥ correctamente
    await page.waitForSelector('#root', { timeout: 10000 });
    
    // Verificar elementos espec√≠ficos de la p√°gina √úPlay Gamified
    await expect(page.locator('text=√úPlay - Reproductor Gamificado')).toBeVisible();
    await expect(page.locator('text=GPL - Gamified Play List')).toBeVisible();
    await expect(page.locator('text=M√´ritos')).toBeVisible();
    await expect(page.locator('text=Nivel')).toBeVisible();
    
    console.log('‚úÖ P√°gina √úPlay Gamified cargada correctamente');
  });

  test('üîÑ Navegaci√≥n entre las p√°ginas √úPlay', async ({ page }) => {
    console.log('üîç Verificando navegaci√≥n entre p√°ginas √úPlay...');
    
    // Ir a √úPlay Gamified
    const gamifiedLink = page.locator('[data-testid="sidebar"]').locator('text=√úPlay Gamified');
    await gamifiedLink.click();
    await page.waitForURL('**/uplay-gamified', { timeout: 10000 });
    
    // Verificar que estamos en la p√°gina correcta
    await expect(page.locator('text=√úPlay - Reproductor Gamificado')).toBeVisible();
    console.log('‚úÖ En p√°gina √úPlay Gamified');
    
    // Navegar a Horizontal Demo
    const horizontalDemoLink = page.locator('[data-testid="sidebar"]').locator('text=√úPlay Horizontal Demo');
    await horizontalDemoLink.click();
    await page.waitForURL('**/uplay/horizontal-demo', { timeout: 10000 });
    
    // Verificar que estamos en la p√°gina correcta
    await expect(page.locator('h1')).toContainText('Reproductor Horizontal √úPlay');
    console.log('‚úÖ En p√°gina Horizontal Demo');
    
    // Navegar a √úPlay principal
    const uplayMainLink = page.locator('[data-testid="sidebar"]').locator('text=√úPlay').first();
    await uplayMainLink.click();
    await page.waitForURL('**/play', { timeout: 10000 });
    
    // Verificar que estamos en la p√°gina principal de √úPlay
    await expect(page.locator('text=√úPlay')).toBeVisible();
    console.log('‚úÖ En p√°gina √úPlay principal');
    
    console.log('‚úÖ Navegaci√≥n entre p√°ginas √úPlay completada exitosamente');
  });

  test('üì± Verificar que los enlaces funcionan en m√≥vil', async ({ page }) => {
    // Configurar viewport m√≥vil
    await page.setViewportSize({ width: 375, height: 667 });
    
    console.log('üîç Verificando navegaci√≥n m√≥vil...');
    
    // En m√≥vil, el sidebar est√° en un drawer que necesita ser abierto
    // Buscar el bot√≥n de men√∫ m√≥vil
    const menuButton = page.locator('[data-testid="mobile-navigation-menu"]').locator('button').first();
    
    if (await menuButton.isVisible()) {
      await menuButton.click();
      await page.waitForTimeout(1000);
    }
    
    // Buscar el enlace en el drawer m√≥vil
    const horizontalDemoLink = page.locator('text=√úPlay Horizontal Demo');
    await expect(horizontalDemoLink).toBeVisible();
    
    // Hacer clic en el enlace
    await horizontalDemoLink.click();
    
    // Verificar navegaci√≥n
    await page.waitForURL('**/uplay/horizontal-demo', { timeout: 10000 });
    await expect(page.locator('h1')).toContainText('Reproductor Horizontal √úPlay');
    
    console.log('‚úÖ Navegaci√≥n m√≥vil funcionando correctamente');
  });
}); 