import { test, expect } from '@playwright/test';

// ‚úÖ TEST E2E: Verificaci√≥n de Integraci√≥n del M√≥dulo de Desaf√≠os (Challenges)
// Verifica que el flujo de datos para Challenges funciona end-to-end
// desde la SuperApp Frontend mostrando los datos disponibles

test.describe('Challenges Integration E2E', () => {
  test.beforeEach(async ({ page }) => {
    // üéØ PASO 1: Navegar a la p√°gina principal y verificar que React se monte
    await page.goto('/');
    await page.waitForSelector('#root', { timeout: 15000 });
    
    // üßπ LIMPIEZA PREVIA: Limpiar estado de autenticaci√≥n anterior (despu√©s de cargar la p√°gina)
    await page.evaluate(() => {
      try {
        localStorage.clear();
        sessionStorage.clear();
      } catch (e) {
        console.log('Storage clear failed, continuing...', e);
      }
    });
    
    // üîç PASO 2: Verificar que se redirige correctamente a login (auth real)
    await page.waitForURL('**/login', { timeout: 10000 });
    await page.waitForSelector('#email', { timeout: 10000 });
    
    // üö´ VERIFICACI√ìN: Asegurar que NO hay modo mock activo
    const mockBannerVisible = await page.locator('[data-testid="dev-mock-banner"]').isVisible();
    if (mockBannerVisible) {
      throw new Error('‚ùå MOCK AUTH DETECTADO: El test requiere autenticaci√≥n real del Backend NestJS');
    }
    
    // üîê PASO 3: AUTENTICACI√ìN REAL con Backend NestJS (Usuario Admin)
    await page.fill('#email', 'admin@gamifier.com');
    await page.fill('#password', 'admin123');
    
    // Interceptar la respuesta de login para verificar √©xito
    const loginResponsePromise = page.waitForResponse(
      response => response.url().includes('/auth/login') && response.status() === 200,
      { timeout: 15000 }
    );
    
    await page.click('button:has-text("Iniciar Sesi√≥n")');
    
    // Verificar que el login fue exitoso
    await loginResponsePromise;
    
    // üè† PASO 4: Verificar redireccionamiento al dashboard
    await page.waitForSelector('text=Coom√únity', { timeout: 15000 });
    
    // üéÆ PASO 5: Verificar que el token se almacen√≥ correctamente
    const authState = await page.evaluate(() => ({
      hasToken: !!localStorage.getItem('token'),
      hasCoomunityToken: !!localStorage.getItem('coomunity_token'),
      hasUser: !!localStorage.getItem('coomunity_user')
    }));
    
    if (!authState.hasToken && !authState.hasCoomunityToken) {
      throw new Error('‚ùå TOKEN NO ENCONTRADO: El login no persisti√≥ el token de autenticaci√≥n');
    }
    
    console.log('‚úÖ beforeEach completado: Usuario autenticado con Backend real');
  });



  test('debe mostrar los desaf√≠os reales obtenidos del backend NestJS', async ({ page }) => {
    // 1. Navegar a la p√°gina de Challenges
    console.log('üìç Navegando a la p√°gina de Challenges...');
    
    // Intentar m√∫ltiples m√©todos de navegaci√≥n
    try {
      // M√©todo 1: Click en el men√∫ de navegaci√≥n
      const challengesNavLink = page.locator('a[href*="/challenges"], button:has-text("Challenges"), [data-testid*="challenges"]').first();
      if (await challengesNavLink.isVisible({ timeout: 5000 })) {
        await challengesNavLink.click();
        console.log('‚úÖ Navegaci√≥n via men√∫ exitosa');
      } else {
        // M√©todo 2: Navegaci√≥n directa por URL
        await page.goto('/challenges');
        console.log('‚úÖ Navegaci√≥n directa por URL');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Navegaci√≥n por men√∫ fall√≥, usando URL directa');
      await page.goto('/challenges');
    }

    // 2. Esperar a que la llamada a la API se complete
    console.log('üîÑ Esperando respuesta del Backend NestJS...');
    await page.waitForResponse(response => 
      response.url().includes('/challenges') && response.status() === 200,
      { timeout: 15000 }
    );

    // 3. Verificar que estamos en la p√°gina correcta
    await page.waitForLoadState('networkidle');
    
    // Verificar URL
    const currentUrl = page.url();
    console.log(`üìç URL actual: ${currentUrl}`);
    expect(currentUrl).toMatch(/\/challenges/);

    // 4. Verificar que la p√°gina de challenges carga con el header correcto
    console.log('üîç Verificando header de la p√°gina de Challenges...');
    
    const challengesHeader = page.locator('h1:has-text("üèÜ Desaf√≠os Coom√únity")');
    await expect(challengesHeader).toBeVisible({ timeout: 10000 });
    console.log('‚úÖ Header de Challenges encontrado');

    // 5. Verificar la presencia de los desaf√≠os reales del backend
    console.log('üîç Verificando presencia de desaf√≠os reales del Backend NestJS...');
    
    // Verificar la presencia de los t√≠tulos de los desaf√≠os reales
    console.log('üîç Buscando "Gu√≠a de Metan√∂ia"...');
    const metanoiaChallenge = page.locator('text=Gu√≠a de Metan√∂ia');
    await expect(metanoiaChallenge).toBeVisible({ timeout: 10000 });
    console.log('‚úÖ Desaf√≠o "Gu√≠a de Metan√∂ia" encontrado');

    console.log('üîç Buscando "Emprendedor Confiable"...');
    const emprendedorChallenge = page.locator('text=Emprendedor Confiable');
    await expect(emprendedorChallenge).toBeVisible({ timeout: 5000 });
    console.log('‚úÖ Desaf√≠o "Emprendedor Confiable" encontrado');

    console.log('üîç Buscando "Innovaci√≥n para el Bien Com√∫n"...');
    const innovacionChallenge = page.locator('text=Innovaci√≥n para el Bien Com√∫n');
    await expect(innovacionChallenge).toBeVisible({ timeout: 5000 });
    console.log('‚úÖ Desaf√≠o "Innovaci√≥n para el Bien Com√∫n" encontrado');

    // 6. Verificar que S√ç hay tarjetas de desaf√≠o
    console.log('üîç Verificando presencia de tarjetas de desaf√≠o...');
    
    // Usar el data-testid espec√≠fico que acabamos de a√±adir al componente
    const challengeCards = page.locator('[data-testid="challenge-card"]');
    
    // Esperar a que aparezcan las tarjetas y verificar que hay al menos 3
    await expect(challengeCards).toHaveCount(3, { timeout: 15000 });
    console.log('‚úÖ Confirmado: 3 tarjetas de desaf√≠o renderizadas');



    // 7. Verificar contenido espec√≠fico dentro de las tarjetas
    console.log('üîç Verificando contenido espec√≠fico de desaf√≠os dentro de las tarjetas...');
    
    // Verificar que cada tarjeta tiene t√≠tulo y descripci√≥n
    const firstCard = challengeCards.first();
    await expect(firstCard.locator('[data-testid="challenge-title"]')).toBeVisible({ timeout: 5000 });
    await expect(firstCard.locator('[data-testid="challenge-description"]')).toBeVisible({ timeout: 5000 });
    console.log('‚úÖ Primera tarjeta tiene t√≠tulo y descripci√≥n');

    // Verificar contenido espec√≠fico de los desaf√≠os reales
    const metanoiaCard = challengeCards.filter({ hasText: 'Gu√≠a de Metan√∂ia' });
    await expect(metanoiaCard).toHaveCount(1);
    console.log('‚úÖ Tarjeta de Metan√∂ia encontrada');

    const emprendedorCard = challengeCards.filter({ hasText: 'Emprendedor Confiable' });
    await expect(emprendedorCard).toHaveCount(1);
    console.log('‚úÖ Tarjeta de Emprendedor Confiable encontrada');

    const innovacionCard = challengeCards.filter({ hasText: 'Innovaci√≥n para el Bien Com√∫n' });
    await expect(innovacionCard).toHaveCount(1);
    console.log('‚úÖ Tarjeta de Innovaci√≥n encontrada');

    // 8. Verificar que no hay errores JavaScript cr√≠ticos en la consola
    console.log('üîç Verificando ausencia de errores JavaScript cr√≠ticos...');
    
    // La p√°gina debe ser responsiva y sin errores cr√≠ticos
    const isPageResponsive = await page.locator('body').isVisible();
    expect(isPageResponsive).toBe(true);

    // 9. Tomar screenshot para evidencia visual
    await page.screenshot({ 
      path: `e2e/screenshots/challenges-real-data-${Date.now()}.png`,
      fullPage: true 
    });

    // 10. Reportar resultados
    console.log('\nüìã RESUMEN DE VERIFICACI√ìN:');
    console.log(`‚úÖ P√°gina de Challenges accesible: ${currentUrl.includes('challenge')}`);
    console.log(`‚úÖ Desaf√≠os reales del backend mostrados: S√ç`);
    console.log(`‚úÖ 3 tarjetas de desaf√≠o renderizadas: S√ç`);
    console.log(`‚úÖ P√°gina responsiva: ${isPageResponsive}`);
    console.log(`‚úÖ Backend NestJS respondi√≥ con datos reales: S√ç`);

    console.log('üéâ TEST EXITOSO: La SuperApp muestra correctamente los datos reales del Backend NestJS');
  });

  test('debe manejar correctamente la navegaci√≥n y estructura de la p√°gina con datos reales', async ({ page }) => {
    // Navegar directamente a challenges
    await page.goto('/challenges');
    await page.waitForLoadState('networkidle');
    
    // Esperar que la p√°gina cargue completamente
    await page.waitForTimeout(2000);

    console.log('üîç Verificando estructura completa de la p√°gina...');

    // Verificar que la p√°gina tiene la estructura esperada
    const pageStructureElements = [
      { selector: 'h1:has-text("üèÜ Desaf√≠os Coom√únity")', name: 'Header principal' },
      { selector: 'text=Participa en desaf√≠os que fomentan el Bien Com√∫n', name: 'Descripci√≥n filos√≥fica' },
      { selector: '[placeholder*="Buscar desaf√≠os"]', name: 'Campo de b√∫squeda' },
      { selector: 'button:has-text("Filtros")', name: 'Bot√≥n de filtros' },
      { selector: 'button:has-text("Crear Desaf√≠o")', name: 'Bot√≥n crear desaf√≠o' },
      { selector: 'text=No se encontraron desaf√≠os', name: 'Mensaje de estado vac√≠o' }
    ];

    for (const element of pageStructureElements) {
      try {
        const locator = page.locator(element.selector);
        await expect(locator).toBeVisible({ timeout: 5000 });
        console.log(`‚úÖ ${element.name}: Encontrado`);
      } catch (error) {
        console.log(`‚ö†Ô∏è ${element.name}: No encontrado (opcional)`);
      }
    }

    // Verificar interactividad b√°sica - campo de b√∫squeda
    const searchField = page.locator('[placeholder*="Buscar desaf√≠os"]');
    if (await searchField.isVisible()) {
      await searchField.fill('test');
      const searchValue = await searchField.inputValue();
      expect(searchValue).toBe('test');
      console.log('‚úÖ Campo de b√∫squeda es interactivo');
      
      // Limpiar b√∫squeda
      await searchField.clear();
    }

    // Tomar screenshot final
    await page.screenshot({ 
      path: `e2e/screenshots/challenges-structure-verification-${Date.now()}.png`,
      fullPage: true 
    });

    console.log('‚úÖ Verificaci√≥n de estructura completada exitosamente');
  });
}); 