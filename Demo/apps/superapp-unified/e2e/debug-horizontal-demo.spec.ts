import { test, expect } from '@playwright/test';

test.describe('Debug Horizontal Demo', () => {
  test('Debug navegaci√≥n a horizontal-demo', async ({ page }) => {
    // Habilitar logging de consola
    page.on('console', (msg) => {
      console.log(`[BROWSER ${msg.type()}]:`, msg.text());
    });

    // Habilitar logging de errores
    page.on('pageerror', (error) => {
      console.log(`[PAGE ERROR]:`, error.message);
    });

    // Navegar a login
    console.log('üîê Navegando a login...');
    await page.goto('/login');
    
    // Login
    console.log('üìù Realizando login...');
    await page.fill('[data-testid="login-email-input"] input', 'admin@gamifier.com');
    await page.fill('[data-testid="login-password-input"] input', 'admin123');
    await page.click('[data-testid="login-submit-button"]');
    
    // Esperar redirecci√≥n
    console.log('‚è≥ Esperando redirecci√≥n...');
    await page.waitForURL('**/', { timeout: 15000 });
    
    // Verificar estado despu√©s del login
    console.log('‚úÖ Login completado, verificando estado...');
    await page.waitForSelector('#root', { timeout: 10000 });
    
    // Capturar URL actual
    const currentUrl = page.url();
    console.log('üìç URL actual despu√©s del login:', currentUrl);
    
    // Capturar t√≠tulo de la p√°gina
    const title = await page.title();
    console.log('üìÑ T√≠tulo de la p√°gina:', title);
    
    // Capturar todos los h1 presentes
    const h1Elements = await page.locator('h1').allTextContents();
    console.log('üìù Elementos H1 encontrados:', h1Elements);
    
    // Esperar estabilizaci√≥n
    await page.waitForTimeout(3000);
    
    // Navegar a horizontal-demo
    console.log('üé¨ Navegando a horizontal-demo...');
    await page.goto('/uplay/horizontal-demo');
    
    // Esperar que la p√°gina cargue
    await page.waitForSelector('#root', { timeout: 10000 });
    await page.waitForTimeout(2000);
    
    // Capturar informaci√≥n despu√©s de la navegaci√≥n
    const newUrl = page.url();
    console.log('üìç URL despu√©s de navegar a horizontal-demo:', newUrl);
    
    const newTitle = await page.title();
    console.log('üìÑ Nuevo t√≠tulo de la p√°gina:', newTitle);
    
    const newH1Elements = await page.locator('h1').allTextContents();
    console.log('üìù Nuevos elementos H1:', newH1Elements);
    
    // Verificar si hay elementos espec√≠ficos del horizontal demo
    const hasVideoDemo = await page.locator('text=Video Demo').isVisible();
    console.log('üé• ¬øTiene "Video Demo"?:', hasVideoDemo);
    
    const hasHorizontalTitle = await page.locator('text=Reproductor Horizontal').isVisible();
    console.log('üé¨ ¬øTiene "Reproductor Horizontal"?:', hasHorizontalTitle);
    
    const hasGPL = await page.locator('text=GPL').isVisible();
    console.log('üéÆ ¬øTiene "GPL"?:', hasGPL);
    
    // Verificar si est√° mostrando el dashboard en su lugar
    const hasDashboard = await page.locator('text=M√≥dulos Coom√únity').isVisible();
    console.log('üè† ¬øEst√° mostrando dashboard?:', hasDashboard);
    
    // Capturar screenshot para an√°lisis
    await page.screenshot({ path: 'debug-horizontal-demo.png', fullPage: true });
    console.log('üì∏ Screenshot guardado como debug-horizontal-demo.png');
    
    // Verificar si hay errores de JavaScript
    const jsErrors: string[] = [];
    page.on('console', (msg) => {
      if (msg.type() === 'error') {
        jsErrors.push(msg.text());
      }
    });
    
    await page.waitForTimeout(2000);
    console.log('üö® Errores JS encontrados:', jsErrors);
    
    // Verificar el estado del router
    const routerState = await page.evaluate(() => {
      return {
        pathname: window.location.pathname,
        search: window.location.search,
        hash: window.location.hash,
        href: window.location.href
      };
    });
    console.log('üõ£Ô∏è Estado del router:', routerState);
  });
}); 