import { test, expect } from '@playwright/test';
import { loginAs } from './utils/auth';

test.describe('Wallet Backend Integration', () => {
  // üîê Hook de autenticaci√≥n refactorizado usando funci√≥n de utilidad
  test.beforeEach(async ({ page }) => {
    await loginAs(page);
  });

  test('should load wallet page and display real data after login', async ({ page }) => {
    console.log('üîç Testing wallet page with real backend data...');
    
    // Ahora que estamos logueados (o al menos intentamos), navegamos al wallet
    console.log('üöÄ Navegando a la p√°gina del wallet...');
    await page.goto('/wallet');
    await page.waitForSelector('#root');
    
    // Verificar que estamos en la p√°gina del wallet
    const currentUrl = await page.url();
    console.log('üåê Current URL:', currentUrl);
    expect(currentUrl).toContain('/wallet');
    
    // Verificar elementos clave del wallet Coom√únity
    console.log('üí∞ Verificando elementos del wallet...');
    
    // Buscar el t√≠tulo principal del wallet
    const walletTitle = page.locator('text=Mi Wallet Coom√únity').or(
      page.locator('text=Wallet').or(
        page.locator('text=Billetera').or(
          page.locator('h1, h2, h3, h4').filter({ hasText: /wallet|billetera/i })
        )
      )
    );
    await expect(walletTitle.first()).toBeVisible({ timeout: 10000 });
    
    // Verificar elementos de balance/monedas Coom√únity
    console.log('üíé Verificando balances y monedas...');
    
    // Buscar indicadores de L√ºkas (moneda principal)
    const lukasElements = page.locator('text=L√ºkas').or(
      page.locator('text=UC').or(
        page.locator('[data-testid*="lukas"]').or(
          page.locator('text=/\\d+\\s*(UC|L√ºkas)/i')
        )
      )
    );
    
    // Buscar indicadores de √ñndas (energ√≠a vibracional)
    const ondasElements = page.locator('text=√ñndas').or(
      page.locator('[data-testid*="ondas"]').or(
        page.locator('text=/\\d+\\s*√ñndas/i')
      )
    );
    
    // Verificar que al menos uno de los elementos de balance es visible
    const hasLukas = await lukasElements.count() > 0;
    const hasOndas = await ondasElements.count() > 0;
    
    if (hasLukas) {
      console.log('‚úÖ Elementos de L√ºkas encontrados');
      await expect(lukasElements.first()).toBeVisible({ timeout: 10000 });
    }
    
    if (hasOndas) {
      console.log('‚úÖ Elementos de √ñndas encontrados');
      await expect(ondasElements.first()).toBeVisible({ timeout: 10000 });
    }
    
    // Si no encontramos elementos espec√≠ficos, verificar estructura general
    if (!hasLukas && !hasOndas) {
      console.log('‚ö†Ô∏è Elementos espec√≠ficos no encontrados, verificando estructura general...');
      const walletContent = await page.textContent('body');
      expect(walletContent).toContain('Coom√únity');
      
      // Verificar que hay contenido num√©rico (posibles balances)
      const hasNumbers = /\d+/.test(walletContent);
      expect(hasNumbers).toBe(true);
    }
    
    // Verificar que no hay errores cr√≠ticos de conexi√≥n
    console.log('üîç Verificando ausencia de errores de conexi√≥n...');
    const pageContent = await page.textContent('body');
    expect(pageContent).not.toContain('Error de conexi√≥n con el servidor');
    expect(pageContent).not.toContain('Failed to fetch');
    
    console.log('‚úÖ Wallet page con datos reales - Test exitoso');
  });

  test('should verify backend connectivity and data loading', async ({ page }) => {
    console.log('üîç Testing backend connectivity and data loading...');
    
    // Navegar al wallet despu√©s del login
    await page.goto('/wallet');
    await page.waitForSelector('#root');
    
    // Verificar que estamos conectados al backend
    console.log('üåê Verificando conectividad con el backend...');
    
    // Esperar a que los datos se carguen del backend
    await page.waitForTimeout(5000);
    
    // Verificar que no hay errores de conexi√≥n
    const pageContent = await page.textContent('body');
    expect(pageContent).not.toContain('Error de conexi√≥n con el servidor');
    expect(pageContent).not.toContain('Failed to fetch');
    expect(pageContent).not.toContain('Network Error');
    
    // Verificar que hay contenido din√°mico (datos del backend)
    expect(pageContent).toBeTruthy();
    expect(pageContent.length).toBeGreaterThan(200);
    
    // Verificar que el contenido incluye elementos espec√≠ficos del wallet
    const hasWalletContent = pageContent.includes('Coom√únity') || 
                            pageContent.includes('Wallet') || 
                            pageContent.includes('Billetera');
    expect(hasWalletContent).toBe(true);
    
    console.log('‚úÖ Backend connectivity and data loading - Test passed');
  });

  test('should display wallet navigation and interactive elements', async ({ page }) => {
    console.log('üîç Testing wallet navigation after login...');
    
    // Navegar al wallet despu√©s del login
    await page.goto('/wallet');
    await page.waitForSelector('#root');
    
    // Buscar elementos de navegaci√≥n t√≠picos de un wallet
    console.log('üß≠ Buscando elementos de navegaci√≥n...');
    const possibleTabSelectors = [
      '[role="tab"]',
      '.MuiTab-root',
      'button[aria-selected]',
      'text=Transacciones',
      'text=Historial',
      'text=Balance',
      'text=L√ºkas',
      'text=√ñndas',
      'text=M√´ritos'
    ];
    
    let tabsFound = false;
    for (const selector of possibleTabSelectors) {
      const elements = await page.locator(selector).count();
      if (elements > 0) {
        console.log(`‚úÖ Found ${elements} navigation elements with selector: ${selector}`);
        tabsFound = true;
        break;
      }
    }
    
    // Verificar elementos interactivos generales
    console.log('üîò Verificando elementos interactivos...');
    const buttons = await page.locator('button').count();
    const links = await page.locator('a').count();
    console.log(`üìä Interactive elements found - Buttons: ${buttons}, Links: ${links}`);
    expect(buttons + links).toBeGreaterThan(0);
    
    // Verificar que hay navegaci√≥n funcional (al menos botones clickeables)
    const clickableElements = await page.locator('button:visible, a:visible').count();
    expect(clickableElements).toBeGreaterThan(0);
    console.log(`üñ±Ô∏è Clickable elements found: ${clickableElements}`);
    
    console.log('‚úÖ Navigation and interactivity test passed');
  });

  test('should display wallet balance with backend data', async ({ page }) => {
    console.log('üîç Testing wallet balance with real backend data...');
    
    // Navegar al wallet despu√©s del login
    await page.goto('/wallet');
    await page.waitForSelector('#root');
    
    // Esperar a que los datos del backend se carguen
    console.log('‚è≥ Esperando carga de datos del backend...');
    await page.waitForTimeout(3000);
    
    // Buscar elementos relacionados con balance/saldo Coom√únity
    console.log('üí∞ Verificando elementos de balance...');
    const balanceSelectors = [
      'text=Balance',
      'text=Saldo',
      'text=L√ºkas',
      'text=M√´ritos', 
      'text=√ñndas',
      '[data-testid*="balance"]',
      '[data-testid*="wallet"]',
      '[data-testid*="lukas"]',
      '[data-testid*="meritos"]',
      '[data-testid*="ondas"]'
    ];
    
    let balanceElementFound = false;
    for (const selector of balanceSelectors) {
      const elements = await page.locator(selector).count();
      if (elements > 0) {
        console.log(`üí∞ Found balance-related elements with selector: ${selector}`);
        balanceElementFound = true;
        
        // Intentar verificar que el elemento es visible
        try {
          await expect(page.locator(selector).first()).toBeVisible({ timeout: 5000 });
          console.log(`‚úÖ Balance element is visible: ${selector}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è Balance element found but not visible: ${selector}`);
        }
        break;
      }
    }
    
    // Verificar contenido num√©rico (balances del backend)
    console.log('üî¢ Verificando datos num√©ricos del backend...');
    const pageText = await page.textContent('body');
    const hasNumbers = /\d+/.test(pageText);
    console.log(`üî¢ Page contains numbers (backend balances): ${hasNumbers}`);
    expect(hasNumbers).toBe(true);
    
    // Verificar que no hay mensajes de error de carga
    expect(pageText).not.toContain('Error al cargar');
    expect(pageText).not.toContain('Failed to load');
    expect(pageText).not.toContain('Error de conexi√≥n');
    
    // Si encontramos elementos espec√≠ficos, verificar que tienen contenido
    if (balanceElementFound) {
      console.log('‚úÖ Balance elements found and verified');
    } else {
      console.log('‚ö†Ô∏è Specific balance elements not found, but numeric content verified');
      // A√∫n as√≠, debe haber contenido sustancial
      expect(pageText.length).toBeGreaterThan(100);
    }
    
    console.log('‚úÖ Balance section with backend data - Test passed');
  });

  test('should handle loading states and display final content', async ({ page }) => {
    console.log('üîç Testing loading states after login...');
    
    // Navegar al wallet despu√©s del login
    await page.goto('/wallet');
    await page.waitForSelector('#root');
    
    // Verificar que la p√°gina no est√° en un estado de carga infinita
    console.log('‚è≥ Verificando estados de carga...');
    await page.waitForTimeout(3000);
    
    // Buscar indicadores de carga
    const loadingSelectors = [
      '.MuiCircularProgress-root',
      '[data-testid*="loading"]',
      'text=Cargando',
      'text=Loading',
      '.loading',
      '.spinner'
    ];
    
    let loadingFound = false;
    for (const selector of loadingSelectors) {
      const elements = await page.locator(selector).count();
      if (elements > 0) {
        console.log(`‚è≥ Loading indicator found: ${selector}`);
        loadingFound = true;
        
        // Esperar a que el loading desaparezca
        try {
          await page.waitForSelector(selector, { state: 'detached', timeout: 10000 });
          console.log(`‚úÖ Loading indicator disappeared: ${selector}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è Loading indicator still present: ${selector}`);
        }
        break;
      }
    }
    
    // Verificar que hay contenido final visible y sustancial
    console.log('üìÑ Verificando contenido final...');
    const finalContent = await page.textContent('body');
    expect(finalContent).toBeTruthy();
    expect(finalContent.length).toBeGreaterThan(100); // Contenido sustancial
    
    // Verificar que el contenido incluye elementos del wallet
    expect(finalContent).toMatch(/wallet|billetera|coomunity/i);
    
    // Verificar que no hay errores de carga persistentes
    expect(finalContent).not.toContain('Error de conexi√≥n');
    expect(finalContent).not.toContain('Failed to fetch');
    
    console.log('‚úÖ Loading states and final content - Test passed');
  });

  test('should be responsive and display correctly after login', async ({ page }) => {
    console.log('üîç Testing responsive design after login...');
    
    // Navegar al wallet despu√©s del login
    await page.goto('/wallet');
    await page.waitForSelector('#root');
    
    // Probar diferentes tama√±os de pantalla
    const viewports = [
      { width: 1200, height: 800 }, // Desktop
      { width: 768, height: 1024 }, // Tablet
      { width: 375, height: 667 }   // Mobile
    ];
    
    for (const viewport of viewports) {
      console.log(`üì± Testing viewport: ${viewport.width}x${viewport.height}`);
      await page.setViewportSize(viewport);
      await page.waitForTimeout(1000);
      
      // Verificar que el contenido sigue siendo visible
      const bodyText = await page.textContent('body');
      expect(bodyText).toBeTruthy();
      expect(bodyText).toMatch(/wallet|billetera|coomunity/i);
      
      // Verificar que no hay overflow horizontal
      const bodyWidth = await page.evaluate(() => document.body.scrollWidth);
      const viewportWidth = viewport.width;
      
      console.log(`üì± Viewport ${viewport.width}x${viewport.height}: Body width ${bodyWidth}px`);
      
      // Permitir un peque√±o margen para scrollbars
      expect(bodyWidth).toBeLessThanOrEqual(viewportWidth + 20);
      
      // Verificar que elementos clave siguen siendo accesibles
      const clickableElements = await page.locator('button:visible, a:visible').count();
      expect(clickableElements).toBeGreaterThan(0);
      console.log(`üñ±Ô∏è Clickable elements in ${viewport.width}px: ${clickableElements}`);
    }
    
    console.log('‚úÖ Responsive design after login - Test passed');
  });
}); 