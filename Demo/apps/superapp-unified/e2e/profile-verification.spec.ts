import { test, expect } from '@playwright/test';

test.describe('Profile Page Verification - Fase A.1', () => {
  test.beforeEach(async ({ page }) => {
    // üîÑ Navegar a la aplicaci√≥n
    await page.goto('/');
    
    // ‚è≥ Esperar a que la p√°gina cargue completamente
    await page.waitForLoadState('networkidle');
  });

  test('Profile page loads and displays user information', async ({ page }) => {
    // üéØ Navegar a la p√°gina de perfil desde la barra lateral
    await page.click('[data-testid="sidebar-profile"], a[href*="profile"], text=Perfil');
    
    // ‚è≥ Esperar a que la p√°gina de perfil cargue
    await page.waitForLoadState('networkidle');
    
    // ‚úÖ Verificar que estamos en la p√°gina de perfil
    await expect(page).toHaveURL(/.*profile/);
    
    // üéØ Verificar elementos principales del header de perfil
    await expect(page.locator('h1')).toBeVisible(); // Nombre del usuario
    await expect(page.locator('text=Miembro desde')).toBeVisible();
    
    // üéØ Verificar stats r√°pidas
    await expect(page.locator('text=Nivel')).toBeVisible();
    await expect(page.locator('text=Puntos')).toBeVisible();
    await expect(page.locator('text=Tareas Completadas')).toBeVisible();
    
    // üéØ Verificar tabs de navegaci√≥n
    await expect(page.locator('text=Informaci√≥n')).toBeVisible();
    await expect(page.locator('text=Actividad')).toBeVisible();
    await expect(page.locator('text=Configuraci√≥n')).toBeVisible();
    
    // üì∏ Captura de pantalla del perfil completo
    await page.screenshot({ 
      path: 'test-results/profile-overview.png', 
      fullPage: true 
    });
  });

  test('Profile information tab displays user data correctly', async ({ page }) => {
    // üéØ Navegar a perfil
    await page.click('[data-testid="sidebar-profile"], a[href*="profile"], text=Perfil');
    await page.waitForLoadState('networkidle');
    
    // üéØ Verificar que estamos en el tab de Informaci√≥n (deber√≠a ser el default)
    await expect(page.locator('text=Informaci√≥n Personal')).toBeVisible();
    
    // üéØ Verificar campos de informaci√≥n personal
    await expect(page.locator('text=Email')).toBeVisible();
    await expect(page.locator('text=Nombre Completo')).toBeVisible();
    await expect(page.locator('text=Miembro Desde')).toBeVisible();
    await expect(page.locator('text=Rol')).toBeVisible();
    
    // üéØ Verificar estado de la cuenta
    await expect(page.locator('text=Estado de la Cuenta')).toBeVisible();
    await expect(page.locator('text=Estado de Verificaci√≥n')).toBeVisible();
    await expect(page.locator('text=Token de Autenticaci√≥n')).toBeVisible();
    
    // üì∏ Captura del tab de informaci√≥n
    await page.screenshot({ 
      path: 'test-results/profile-information-tab.png', 
      fullPage: true 
    });
  });

  test('Profile activity tab shows placeholder content', async ({ page }) => {
    // üéØ Navegar a perfil
    await page.click('[data-testid="sidebar-profile"], a[href*="profile"], text=Perfil');
    await page.waitForLoadState('networkidle');
    
    // üéØ Hacer clic en el tab de Actividad
    await page.click('text=Actividad');
    await page.waitForTimeout(500); // Esperar transici√≥n del tab
    
    // üéØ Verificar contenido placeholder del m√≥dulo de actividad
    await expect(page.locator('text=M√≥dulo de Actividad')).toBeVisible();
    await expect(page.locator('text=Pr√≥ximamente: Historial de Actividades')).toBeVisible();
    await expect(page.locator('text=Actividades en Marketplace')).toBeVisible();
    
    // üì∏ Captura del tab de actividad
    await page.screenshot({ 
      path: 'test-results/profile-activity-tab.png', 
      fullPage: true 
    });
  });

  test('Profile configuration tab shows pending integration', async ({ page }) => {
    // üéØ Navegar a perfil
    await page.click('[data-testid="sidebar-profile"], a[href*="profile"], text=Perfil');
    await page.waitForLoadState('networkidle');
    
    // üéØ Hacer clic en el tab de Configuraci√≥n
    await page.click('text=Configuraci√≥n');
    await page.waitForTimeout(500); // Esperar transici√≥n del tab
    
    // üéØ Verificar alertas de configuraci√≥n pendiente
    await expect(page.locator('text=Configuraciones de Usuario')).toBeVisible();
    await expect(page.locator('text=pendiente de integraci√≥n con backend')).toBeVisible();
    await expect(page.locator('text=Notificaciones')).toBeVisible();
    await expect(page.locator('text=Privacidad')).toBeVisible();
    
    // üì∏ Captura del tab de configuraci√≥n
    await page.screenshot({ 
      path: 'test-results/profile-configuration-tab.png', 
      fullPage: true 
    });
  });

  test('Edit profile dialog opens and closes correctly', async ({ page }) => {
    // üéØ Navegar a perfil
    await page.click('[data-testid="sidebar-profile"], a[href*="profile"], text=Perfil');
    await page.waitForLoadState('networkidle');
    
    // üéØ Buscar y hacer clic en el bot√≥n de editar (icono de l√°piz)
    const editButton = page.locator('[aria-label="edit"], button:has-text("Edit"), button:has([data-testid="EditIcon"])').first();
    await expect(editButton).toBeVisible();
    await editButton.click();
    
    // ‚è≥ Esperar a que el di√°logo aparezca
    await page.waitForTimeout(500);
    
    // üéØ Verificar que el di√°logo de edici√≥n est√° abierto
    await expect(page.locator('text=Editar Perfil')).toBeVisible();
    await expect(page.locator('label:has-text("Nombre Completo")')).toBeVisible();
    await expect(page.locator('label:has-text("Bio")')).toBeVisible();
    await expect(page.locator('label:has-text("Ubicaci√≥n")')).toBeVisible();
    await expect(page.locator('label:has-text("Tel√©fono")')).toBeVisible();
    
    // üéØ Verificar botones del di√°logo
    await expect(page.locator('button:has-text("Cancelar")')).toBeVisible();
    await expect(page.locator('button:has-text("Guardar Cambios")')).toBeVisible();
    
    // üì∏ Captura del di√°logo de edici√≥n
    await page.screenshot({ 
      path: 'test-results/profile-edit-dialog.png' 
    });
    
    // üéØ Cerrar el di√°logo haciendo clic en Cancelar
    await page.click('button:has-text("Cancelar")');
    await page.waitForTimeout(500);
    
    // ‚úÖ Verificar que el di√°logo se cerr√≥
    await expect(page.locator('text=Editar Perfil')).not.toBeVisible();
  });

  test('Edit profile form accepts input correctly', async ({ page }) => {
    // üéØ Navegar a perfil
    await page.click('[data-testid="sidebar-profile"], a[href*="profile"], text=Perfil');
    await page.waitForLoadState('networkidle');
    
    // üéØ Abrir di√°logo de edici√≥n
    const editButton = page.locator('[aria-label="edit"], button:has-text("Edit"), button:has([data-testid="EditIcon"])').first();
    await editButton.click();
    await page.waitForTimeout(500);
    
    // üéØ Llenar campos del formulario
    const nameField = page.locator('input[label="Nombre Completo"], input:near(label:has-text("Nombre Completo"))').first();
    await nameField.fill('Juan P√©rez Actualizado');
    
    const bioField = page.locator('textarea:near(label:has-text("Bio"))').first();
    await bioField.fill('Bio actualizada desde test automatizado');
    
    const locationField = page.locator('input:near(label:has-text("Ubicaci√≥n"))').first();
    await locationField.fill('Bogot√°, Colombia');
    
    const phoneField = page.locator('input:near(label:has-text("Tel√©fono"))').first();
    await phoneField.fill('+57 300 555 1234');
    
    // üì∏ Captura del formulario lleno
    await page.screenshot({ 
      path: 'test-results/profile-edit-form-filled.png' 
    });
    
    // üéØ Verificar que los campos tienen los valores esperados
    await expect(nameField).toHaveValue('Juan P√©rez Actualizado');
    await expect(bioField).toHaveValue('Bio actualizada desde test automatizado');
    await expect(locationField).toHaveValue('Bogot√°, Colombia');
    await expect(phoneField).toHaveValue('+57 300 555 1234');
    
    // üéØ Cancelar para no modificar datos reales
    await page.click('button:has-text("Cancelar")');
    await page.waitForTimeout(500);
  });

  test('Profile page handles authentication state correctly', async ({ page }) => {
    // üéØ Este test verifica que la p√°gina maneja correctamente el estado de autenticaci√≥n
    
    // Primero navegar a perfil (deber√≠a mostrar datos del usuario autenticado)
    await page.click('[data-testid="sidebar-profile"], a[href*="profile"], text=Perfil');
    await page.waitForLoadState('networkidle');
    
    // üéØ Verificar que se muestra informaci√≥n del usuario (no mensaje de "no autenticado")
    const noAuthAlert = page.locator('text=No hay usuario autenticado');
    const loadingSkeletons = page.locator('[data-testid="skeleton"], .MuiSkeleton-root');
    
    // Deber√≠a mostrar contenido real o esqueletos de carga, no alerta de no autenticado
    const hasRealContent = await page.locator('h1').isVisible();
    const hasLoadingState = await loadingSkeletons.first().isVisible();
    const hasNoAuthAlert = await noAuthAlert.isVisible();
    
    // ‚úÖ Verificar estado correcto
    if (hasNoAuthAlert) {
      // Si muestra alerta de no autenticado, documentar esto
      await page.screenshot({ 
        path: 'test-results/profile-no-auth-state.png' 
      });
      console.log('‚ö†Ô∏è Profile page shows no authentication alert - this may be expected if no user is logged in');
    } else if (hasLoadingState) {
      // Si muestra estado de carga, documentar
      await page.screenshot({ 
        path: 'test-results/profile-loading-state.png' 
      });
      console.log('‚è≥ Profile page is in loading state');
    } else if (hasRealContent) {
      // Si muestra contenido real, es el estado ideal
      await page.screenshot({ 
        path: 'test-results/profile-authenticated-state.png' 
      });
      console.log('‚úÖ Profile page shows authenticated user content');
    }
    
    // Al menos uno de estos estados deber√≠a ser verdadero
    expect(hasNoAuthAlert || hasLoadingState || hasRealContent).toBeTruthy();
  });

  test('Profile page responsive design works correctly', async ({ page }) => {
    // üéØ Navegar a perfil
    await page.click('[data-testid="sidebar-profile"], a[href*="profile"], text=Perfil');
    await page.waitForLoadState('networkidle');
    
    // üéØ Test en desktop (por defecto)
    await page.screenshot({ 
      path: 'test-results/profile-desktop-view.png', 
      fullPage: true 
    });
    
    // üéØ Test en tablet
    await page.setViewportSize({ width: 768, height: 1024 });
    await page.waitForTimeout(500);
    await page.screenshot({ 
      path: 'test-results/profile-tablet-view.png', 
      fullPage: true 
    });
    
    // üéØ Test en m√≥vil
    await page.setViewportSize({ width: 375, height: 667 });
    await page.waitForTimeout(500);
    await page.screenshot({ 
      path: 'test-results/profile-mobile-view.png', 
      fullPage: true 
    });
    
    // ‚úÖ Verificar que elementos clave siguen visibles en m√≥vil
    await expect(page.locator('h1')).toBeVisible(); // Nombre del usuario
    await expect(page.locator('text=Nivel')).toBeVisible(); // Stats
    await expect(page.locator('text=Informaci√≥n')).toBeVisible(); // Tabs
    
    // üîÑ Restaurar viewport
    await page.setViewportSize({ width: 1280, height: 720 });
  });
});

test.describe('Profile Page Backend Integration', () => {
  test('Profile page shows backend connectivity status', async ({ page }) => {
    // üéØ Navegar a perfil
    await page.goto('/profile');
    await page.waitForLoadState('networkidle');
    
    // üîç Verificar indicadores de conectividad con backend
    const authTokenStatus = page.locator('text=Token de Autenticaci√≥n');
    const accountStatus = page.locator('text=Estado de Verificaci√≥n');
    
    if (await authTokenStatus.isVisible()) {
      // üéØ Verificar estado del token
      const tokenActiveText = page.locator('text=Activo');
      const tokenInactiveText = page.locator('text=No disponible');
      
      const hasActiveToken = await tokenActiveText.isVisible();
      const hasInactiveToken = await tokenInactiveText.isVisible();
      
      // üì∏ Captura del estado de conectividad
      await page.screenshot({ 
        path: 'test-results/profile-backend-connectivity.png' 
      });
      
      if (hasActiveToken) {
        console.log('‚úÖ Backend token is active - good backend connectivity');
      } else if (hasInactiveToken) {
        console.log('‚ö†Ô∏è Backend token is not available - check backend connectivity');
      }
      
      // Al menos uno deber√≠a estar presente
      expect(hasActiveToken || hasInactiveToken).toBeTruthy();
    }
  });
}); 