import { test, expect } from '@playwright/test';

test.describe('LETS Onboarding Wizard', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the SuperApp
    await page.goto('/');
    
    // Wait for React to mount
    await page.waitForSelector('#root', { timeout: 15000 });
    
    // Check if already logged in by looking for login form or dashboard
    const loginForm = page.locator('[data-testid="login-email-input"]');
    const isLoginFormVisible = await loginForm.isVisible().catch(() => false);
    
    if (isLoginFormVisible) {
      // Login with test credentials
      await page.fill('[data-testid="login-email-input"] input', 'user@gamifier.com');
      await page.fill('[data-testid="login-password-input"] input', '123456');
      await page.click('[data-testid="login-submit-button"]');
      
      // Wait for login to complete
      await page.waitForURL('**/', { timeout: 15000 });
    }
    
    // Clear localStorage to ensure fresh onboarding state
    await page.evaluate(() => {
      localStorage.removeItem('lets_education_state');
      localStorage.removeItem('coomunity_lets_onboarding');
    });
  });

  test('should show LETS onboarding wizard for new users', async ({ page }) => {
    // Navigate to LETS module (independent module, not marketplace submenu)
    await page.goto('/lets');
    
    // Wait for page to load
    await page.waitForSelector('#root', { timeout: 15000 });
    
    // Debug: Check localStorage state
    const letsState = await page.evaluate(() => {
      return localStorage.getItem('lets_education_state');
    });
    console.log('üîç LETS Education State:', letsState);
    
    // Debug: Check page content
    const pageContent = await page.textContent('body');
    const letsContentCount = (pageContent?.match(/LETS|√únits|intercambio local/gi) || []).length;
    console.log('üìù LETS-related content found:', letsContentCount);
    
    // Verify LETS page loaded by checking for specific page content
    await expect(page.locator('text=üîÑ Sistema LETS Coom√únity')).toBeVisible({ timeout: 10000 });
    console.log('‚úÖ LETS page loaded successfully');
    
    // Look for onboarding wizard
    const onboardingWizard = page.locator('[data-testid="lets-onboarding-wizard"], .lets-onboarding-wizard, text=Bienvenido al sistema LETS');
    const isOnboardingVisible = await onboardingWizard.isVisible().catch(() => false);
    
    if (isOnboardingVisible) {
      console.log('‚úÖ Onboarding wizard is visible');
      
      // Test wizard navigation
      await expect(onboardingWizard).toBeVisible();
      
      // Look for next/continue button
      const nextButton = page.locator('button:has-text("Siguiente"), button:has-text("Continuar"), button:has-text("Comenzar")');
      if (await nextButton.isVisible()) {
        await nextButton.click();
        console.log('‚úÖ Successfully clicked next button');
      }
    } else {
      console.log('‚ö†Ô∏è Onboarding wizard not visible - checking if already completed');
      
      // Check if onboarding was already completed
      const completedState = await page.evaluate(() => {
        const state = localStorage.getItem('lets_education_state');
        return state ? JSON.parse(state) : null;
      });
      
      if (completedState?.hasCompletedOnboarding) {
        console.log('‚ÑπÔ∏è Onboarding already completed');
        // This is acceptable - user has already seen onboarding
      } else {
        // Force show onboarding by resetting state
        await page.evaluate(() => {
          localStorage.setItem('lets_education_state', JSON.stringify({
            hasCompletedOnboarding: false,
            currentStep: 0,
            completedSteps: []
          }));
        });
        
        // Reload page to trigger onboarding
        await page.reload();
        await page.waitForSelector('#root', { timeout: 15000 });
        
        // Check again for onboarding wizard
        await expect(page.locator('text=LETS, text=Bienvenido, text=onboarding')).toBeVisible({ timeout: 10000 });
      }
    }
  });

  test('should complete LETS onboarding flow', async ({ page }) => {
    // Navigate to LETS module
    await page.goto('/lets');
    
    // Wait for page to load
    await page.waitForSelector('#root', { timeout: 15000 });
    
    // Force fresh onboarding state
    await page.evaluate(() => {
      localStorage.setItem('lets_education_state', JSON.stringify({
        hasCompletedOnboarding: false,
        currentStep: 0,
        completedSteps: []
      }));
    });
    
    // Reload to trigger onboarding
    await page.reload();
    await page.waitForSelector('#root', { timeout: 15000 });
    
    // Look for and interact with onboarding wizard
    const wizardContainer = page.locator('[data-testid="lets-onboarding-wizard"], .lets-onboarding-wizard');
    
    // If wizard is visible, complete the flow
    if (await wizardContainer.isVisible()) {
      console.log('‚úÖ Starting onboarding flow');
      
      // Complete onboarding steps (adapt based on actual wizard implementation)
      const maxSteps = 5; // Reasonable limit
      for (let step = 0; step < maxSteps; step++) {
        const nextButton = page.locator('button:has-text("Siguiente"), button:has-text("Continuar"), button:has-text("Finalizar")');
        
        if (await nextButton.isVisible()) {
          await nextButton.click();
          await page.waitForTimeout(1000); // Wait for transition
          console.log(`‚úÖ Completed step ${step + 1}`);
        } else {
          break; // No more steps
        }
      }
      
      // Verify onboarding completion
      const finalState = await page.evaluate(() => {
        const state = localStorage.getItem('lets_education_state');
        return state ? JSON.parse(state) : null;
      });
      
      console.log('üèÅ Final onboarding state:', finalState);
      expect(finalState?.hasCompletedOnboarding).toBe(true);
    } else {
      console.log('‚ÑπÔ∏è Onboarding wizard not found - may already be completed');
    }
  });
}); 