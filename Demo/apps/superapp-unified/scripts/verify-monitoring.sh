#!/bin/bash

# üîç Script de Verificaci√≥n de Monitoreo - Coom√únity SuperApp
# Ejecuta pruebas E2E para verificar la implementaci√≥n de monitoreo en tiempo real

echo "üîç Iniciando verificaci√≥n de monitoreo en tiempo real..."
echo "=========================================="

# Verificar que estamos en el directorio correcto
if [ ! -f "package.json" ]; then
    echo "‚ùå Error: Ejecutar desde el directorio apps/superapp-unified"
    exit 1
fi

# Verificar que la aplicaci√≥n est√° corriendo
echo "üì° Verificando que la aplicaci√≥n est√© corriendo..."
if curl -s http://localhost:3333 > /dev/null; then
    echo "‚úÖ Aplicaci√≥n corriendo en localhost:3333"
else
    echo "‚ùå Aplicaci√≥n no est√° corriendo. Iniciando..."
    npm run dev &
    APP_PID=$!
    echo "‚è≥ Esperando que la aplicaci√≥n inicie..."
    sleep 10
    STARTED_APP=true
fi

# Ejecutar pruebas de monitoreo
echo ""
echo "üß™ Ejecutando pruebas de monitoreo..."
echo "=========================================="

# Prueba r√°pida de integraci√≥n
echo "üöÄ Test de integraci√≥n completa..."
npx playwright test monitoring-verification-fixed.spec.ts --project=chromium --grep="Complete Monitoring Stack Integration" --reporter=line

# Pruebas espec√≠ficas importantes
echo ""
echo "‚ö° Tests espec√≠ficos importantes..."
npx playwright test monitoring-verification-fixed.spec.ts --project=chromium --grep="Monitoring Initialization|Error Boundary|Performance Monitoring" --reporter=line

# Resultados finales
echo ""
echo "üìä RESUMEN DE VERIFICACI√ìN"
echo "=========================================="

# Verificar archivos de monitoreo
if [ -f "src/lib/monitoring.ts" ]; then
    echo "‚úÖ Librer√≠a de monitoreo: Presente"
else
    echo "‚ùå Librer√≠a de monitoreo: No encontrada"
fi

if [ -f "src/components/ui/ErrorBoundary.tsx" ]; then
    echo "‚úÖ Error Boundary: Presente"
else
    echo "‚ùå Error Boundary: No encontrado"
fi

if [ -f "src/hooks/useMonitoring.ts" ]; then
    echo "‚úÖ Hooks de monitoreo: Presentes"
else
    echo "‚ùå Hooks de monitoreo: No encontrados"
fi

# Verificar configuraci√≥n de entorno
echo ""
echo "üîß Configuraci√≥n de Entorno:"
if [ -f ".env" ]; then
    echo "‚úÖ Archivo .env: Presente"
    if grep -q "VITE_SENTRY_DSN" .env; then
        echo "‚úÖ Sentry DSN: Configurado"
    else
        echo "‚ö†Ô∏è Sentry DSN: No configurado (opcional para desarrollo)"
    fi
    
    if grep -q "VITE_GA4_MEASUREMENT_ID" .env; then
        echo "‚úÖ GA4 Measurement ID: Configurado"
    else
        echo "‚ö†Ô∏è GA4 Measurement ID: No configurado (opcional para desarrollo)"
    fi
else
    echo "‚ö†Ô∏è Archivo .env: No encontrado (copiar desde env.example)"
fi

# Verificar dependencias
echo ""
echo "üì¶ Dependencias de Monitoreo:"
if npm list @sentry/react > /dev/null 2>&1; then
    echo "‚úÖ @sentry/react: Instalado"
else
    echo "‚ùå @sentry/react: No instalado"
fi

if npm list web-vitals > /dev/null 2>&1; then
    echo "‚úÖ web-vitals: Instalado"
else
    echo "‚ùå web-vitals: No instalado"
fi

if npm list @playwright/test > /dev/null 2>&1; then
    echo "‚úÖ @playwright/test: Instalado"
else
    echo "‚ùå @playwright/test: No instalado"
fi

# Generar reporte final
echo ""
echo "üìã PR√ìXIMOS PASOS RECOMENDADOS:"
echo "1. Configurar variables de entorno reales (Sentry DSN, GA4 ID)"
echo "2. Probar en entorno de staging con monitoreo activo"
echo "3. Configurar alertas en Sentry dashboard"
echo "4. Crear dashboards personalizados en GA4"

# Limpiar si iniciamos la aplicaci√≥n
if [ "$STARTED_APP" = true ]; then
    echo ""
    echo "üßπ Cerrando aplicaci√≥n iniciada por el script..."
    kill $APP_PID
fi

echo ""
echo "üéâ Verificaci√≥n de monitoreo completada!"
echo "Ver reporte detallado en: PLAYWRIGHT_MONITORING_VERIFICATION_RESULTS.md" 