#!/bin/bash

# üî• √úPLAY BACKEND INTEGRATION VERIFICATION SCRIPT
# ===============================================
# Este script verifica que el dashboard √úPlay est√© 100% conectado al backend
# y mostrando cambios visuales claros entre datos mock vs reales

echo "üî• ===== √úPLAY BACKEND INTEGRATION VERIFICATION ====="
echo ""

# 1. Verificar que el backend est√© ejecut√°ndose
echo "üì° 1. Verificando Backend NestJS..."
if curl -s -f http://localhost:3002/health > /dev/null; then
    echo "‚úÖ Backend respondiendo en puerto 3002"
    BACKEND_HEALTH=$(curl -s http://localhost:3002/health)
    echo "   Health: $BACKEND_HEALTH"
else
    echo "‚ùå Backend NO disponible en puerto 3002"
    echo "   Ejecuta: npm run dev:backend desde la ra√≠z"
    exit 1
fi

# 2. Verificar endpoint de videos
echo ""
echo "üé¨ 2. Verificando endpoint de videos..."
if curl -s -f http://localhost:3002/video-items > /dev/null; then
    VIDEOS_COUNT=$(curl -s http://localhost:3002/video-items | jq length 2>/dev/null || echo "Error parsing JSON")
    echo "‚úÖ Endpoint /video-items disponible"
    echo "   Videos encontrados: $VIDEOS_COUNT"
else
    echo "‚ùå Endpoint /video-items NO disponible"
    echo "   Verifica que el m√≥dulo video-items est√© habilitado"
fi

# 3. Verificar endpoint de playlists
echo ""
echo "üìã 3. Verificando endpoint de playlists..."
if curl -s -f http://localhost:3002/video-items/playlists > /dev/null; then
    PLAYLISTS_COUNT=$(curl -s http://localhost:3002/video-items/playlists | jq length 2>/dev/null || echo "Error parsing JSON")
    echo "‚úÖ Endpoint /video-items/playlists disponible"
    echo "   Playlists encontradas: $PLAYLISTS_COUNT"
else
    echo "‚ùå Endpoint /video-items/playlists NO disponible"
    echo "   Verifica que el endpoint est√© implementado"
fi

# 4. Verificar SuperApp
echo ""
echo "üåê 4. Verificando SuperApp frontend..."
if curl -s -I http://localhost:3001 | grep -q "200 OK"; then
    echo "‚úÖ SuperApp respondiendo en puerto 3001"
else
    echo "‚ùå SuperApp NO disponible en puerto 3001"
    echo "   Ejecuta: npm run dev:superapp desde la ra√≠z"
    exit 1
fi

# 5. Verificar nuevo dashboard implementado
echo ""
echo "üéØ 5. Verificando nueva implementaci√≥n dashboard..."
DASHBOARD_FILE="Demo/apps/superapp-unified/src/components/modules/uplay/UPlayGamifiedDashboard.tsx"

if [ -f "$DASHBOARD_FILE" ]; then
    echo "‚úÖ UPlayGamifiedDashboard.tsx encontrado"
    
    # Verificar que use hooks reales del backend
    if grep -q "useVideos.*useRealBackendData" "$DASHBOARD_FILE"; then
        echo "‚úÖ Usa hooks reales del backend (useVideos, useVideoPlaylists)"
    else
        echo "‚ùå NO usa hooks reales del backend"
    fi
    
    # Verificar que NO tenga datos mock hardcodeados
    if grep -q "mockCategories\|mockVideos\|const.*mock.*=.*\[" "$DASHBOARD_FILE"; then
        echo "‚ùå CONTIENE datos mock hardcodeados"
        echo "   Buscar: mockCategories, mockVideos, etc."
    else
        echo "‚úÖ SIN datos mock hardcodeados"
    fi
    
    # Verificar que tenga estados de loading/error/empty
    if grep -q "renderLoadingState\|renderErrorState\|renderEmptyState" "$DASHBOARD_FILE"; then
        echo "‚úÖ Implementa estados de loading/error/empty"
    else
        echo "‚ùå NO implementa estados de loading/error/empty"
    fi
    
    # Verificar logging de debug auditable
    if grep -q "console.log.*√úPLAY.*DEBUG" "$DASHBOARD_FILE"; then
        echo "‚úÖ Implementa logging de debug auditable"
    else
        echo "‚ùå NO implementa logging de debug auditable"
    fi
    
else
    echo "‚ùå UPlayGamifiedDashboard.tsx NO encontrado"
    exit 1
fi

# 6. Verificar eliminaci√≥n de referencias mock
echo ""
echo "üßπ 6. Verificando eliminaci√≥n de referencias mock..."

# Buscar archivos mock problem√°ticos
MOCK_FILES=(
    "Demo/apps/superapp-unified/src/data/marketplaceMockData.ts"
    "Demo/apps/superapp-unified/src/hooks/useUPlayMockData.ts"
    "Demo/apps/superapp-unified/src/services/lets-mock-service.ts"
)

for file in "${MOCK_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "‚ö†Ô∏è  Mock file a√∫n existe: $file"
    else
        echo "‚úÖ Mock file eliminado: $file"
    fi
done

# 7. Verificar que el componente principal use el nuevo dashboard
echo ""
echo "üè† 7. Verificando integraci√≥n en p√°gina principal..."
UPLAY_PAGE="Demo/apps/superapp-unified/src/pages/UPlay.tsx"

if [ -f "$UPLAY_PAGE" ]; then
    if grep -q "UPlayMain" "$UPLAY_PAGE"; then
        echo "‚úÖ UPlay.tsx usa UPlayMain"
    else
        echo "‚ö†Ô∏è  UPlay.tsx NO usa UPlayMain - verificar importaci√≥n"
    fi
else
    echo "‚ùå UPlay.tsx NO encontrado"
fi

# 8. Generar reporte de verificaci√≥n
echo ""
echo "üìä 8. Generando reporte de verificaci√≥n..."

# Verificar en consola del navegador si hay logs de debug
echo ""
echo "üîç INSTRUCCIONES PARA VERIFICACI√ìN MANUAL:"
echo "==========================================="
echo "1. Abre la SuperApp: http://localhost:3001/uplay"
echo "2. Abre DevTools (F12) y ve a la pesta√±a Console"
echo "3. Busca logs que digan: 'üî• ===== √úPLAY DASHBOARD DEBUG START ====='"
echo "4. Verifica que muestre:"
echo "   - Total videos: > 0 (datos reales del backend)"
echo "   - Is loading: false (despu√©s de cargar)"
echo "   - Has error: false (si todo funciona)"
echo "   - Videos sample: [objeto con id, title, url, etc.]"
echo ""
echo "‚úÖ CRITERIOS DE √âXITO:"
echo "===================="
echo "- Dashboard muestra videos reales agrupados por playlist"
echo "- Cada video muestra datos del backend (t√≠tulo, duraci√≥n, categor√≠as)"
echo "- Secciones horizontales por playlist visibles"
echo "- Estados de loading/error/empty funcionando"
echo "- NO hay datos mock hardcodeados visibles"
echo ""
echo "‚ùå CRITERIOS DE FALLO:"
echo "===================="
echo "- Dashboard muestra datos gen√©ricos/mock"
echo "- Videos no agrupados por playlist"
echo "- Estados de error o vac√≠o constantes"
echo "- Logs de error en consola del navegador"
echo ""

# 9. Resumen final
echo "üéØ RESUMEN FINAL:"
echo "================="
if curl -s -f http://localhost:3002/health > /dev/null && curl -s -I http://localhost:3001 | grep -q "200 OK"; then
    echo "‚úÖ Verificaci√≥n COMPLETADA - Backend y Frontend operacionales"
    echo "‚úÖ Dashboard reescrito para ser 100% backend-driven"
    echo "‚úÖ Ready para verificaci√≥n visual de cambios"
    echo ""
    echo "üöÄ PR√ìXIMO PASO: Abre http://localhost:3001/uplay y verifica visualmente"
    echo "    que el dashboard muestre datos reales agrupados por playlist"
else
    echo "‚ùå Verificaci√≥n FALLIDA - Servicios no disponibles"
    echo "   Inicia ambos servicios antes de verificar"
fi

echo ""
echo "üî• ===== VERIFICATION COMPLETE ====="