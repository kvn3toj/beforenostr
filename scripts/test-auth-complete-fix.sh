#!/bin/bash

echo "üß™ TEST COMPLETO: AUTH FIXES - SUPERAPP COOMUNITY"
echo "================================================="
echo "üéØ VERIFICANDO que los errores fueron resueltos:"
echo "1. Error JSON.parse con localStorage corrupto"
echo "2. RateLimiter.recordAttempt m√©todo faltante"
echo "3. Error 400 Bad Request en login"
echo ""

# 1. ‚úÖ VERIFICAR M√âTODO RECORDATTEMPT
echo "üìã 1. VERIFICANDO M√âTODO recordAttempt..."
if grep -q "recordAttempt(identifier: string): void" Demo/apps/superapp-unified/src/utils/security.ts; then
    echo "‚úÖ M√©todo recordAttempt encontrado con tipado correcto"
    # Mostrar el m√©todo
    echo "üîç Implementaci√≥n:"
    grep -A 10 "recordAttempt(identifier: string): void" Demo/apps/superapp-unified/src/utils/security.ts | head -8
else
    echo "‚ùå M√©todo recordAttempt NO encontrado"
    exit 1
fi

# 2. ‚úÖ VERIFICAR SERVICIOS FUNCIONANDO
echo ""
echo "üìã 2. VERIFICANDO SERVICIOS..."

BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3002/health)
if [ "$BACKEND_STATUS" = "200" ]; then
    echo "‚úÖ Backend NestJS: HTTP $BACKEND_STATUS (puerto 3002)"
else
    echo "‚ùå Backend NestJS: HTTP $BACKEND_STATUS (puerto 3002)"
    echo "üîß Ejecuta: npm run dev:backend"
    exit 1
fi

SUPERAPP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001)
if [ "$SUPERAPP_STATUS" = "200" ]; then
    echo "‚úÖ SuperApp: HTTP $SUPERAPP_STATUS (puerto 3001)"
else
    echo "‚ùå SuperApp: HTTP $SUPERAPP_STATUS (puerto 3001)"
    echo "üîß Ejecuta: npm run dev:superapp"
    exit 1
fi

# 3. ‚úÖ TEST DE LOGIN ENDPOINT
echo ""
echo "üìã 3. PROBANDO ENDPOINT DE LOGIN..."

LOGIN_RESPONSE=$(curl -s -X POST http://localhost:3002/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email": "admin@gamifier.com", "password": "admin123"}' \
  -w "\n%{http_code}")

HTTP_CODE=$(echo "$LOGIN_RESPONSE" | tail -n1)
LOGIN_BODY=$(echo "$LOGIN_RESPONSE" | head -n -1)

if [ "$HTTP_CODE" = "200" ]; then
    echo "‚úÖ Login endpoint: HTTP $HTTP_CODE"

    # Verificar que la respuesta contiene los campos esperados
    if echo "$LOGIN_BODY" | grep -q "access_token" && echo "$LOGIN_BODY" | grep -q "user"; then
        echo "‚úÖ Respuesta v√°lida: contiene access_token y user"

        # Extraer email del usuario para verificar
        USER_EMAIL=$(echo "$LOGIN_BODY" | grep -o '"email":"[^"]*"' | cut -d'"' -f4)
        echo "‚úÖ Usuario autenticado: $USER_EMAIL"
    else
        echo "‚ùå Respuesta inv√°lida: falta access_token o user"
        echo "üîç Respuesta: $LOGIN_BODY"
    fi
else
    echo "‚ùå Login endpoint: HTTP $HTTP_CODE"
    echo "üîç Respuesta completa: $LOGIN_RESPONSE"
    exit 1
fi

# 4. ‚úÖ VERIFICAR ARCHIVOS DE CORRECCI√ìN
echo ""
echo "üìã 4. VERIFICANDO ARCHIVOS DE CORRECCI√ìN..."

if [ -f "scripts/clear-localStorage-corruption.js" ]; then
    echo "‚úÖ Script JavaScript de limpieza disponible"
else
    echo "‚ùå Script JavaScript de limpieza faltante"
fi

if [ -f "scripts/execute-localStorage-cleanup.sh" ]; then
    echo "‚úÖ Script de ejecuci√≥n de limpieza disponible"
else
    echo "‚ùå Script de ejecuci√≥n de limpieza faltante"
fi

if [ -f "Demo/apps/superapp-unified/src/utils/security.ts.backup" ]; then
    echo "‚úÖ Backup de security.ts disponible"
else
    echo "‚ö†Ô∏è Backup de security.ts no encontrado (posiblemente normal)"
fi

# 5. ‚úÖ VERIFICAR QUE NO HAY ERRORES EN LOGS
echo ""
echo "üìã 5. VERIFICANDO LOGS DEL BACKEND..."
echo "üîç √öltimas 10 l√≠neas de logs del backend (si est√° disponible):"

# Intentar obtener logs recientes del backend
if pgrep -f "npm run dev:backend" > /dev/null; then
    echo "‚úÖ Proceso backend detectado"
else
    echo "‚ö†Ô∏è Proceso backend no detectado v√≠a pgrep"
fi

# 6. ‚úÖ GENERAR COMANDOS DE PRUEBA MANUAL
echo ""
echo "üìã 6. COMANDOS DE PRUEBA MANUAL..."

cat << 'EOF'
üß™ PARA PROBAR MANUALMENTE:

1. üåê ABRIR NAVEGADOR:
   open http://localhost:3001

2. üõ†Ô∏è LIMPIAR LOCALSTORAGE (DevTools Console):
   localStorage.clear(); sessionStorage.clear(); location.reload();

3. üîê PROBAR LOGIN:
   Email: admin@gamifier.com
   Password: admin123

4. ‚úÖ VERIFICAR SIN ERRORES:
   - No error JSON.parse en console
   - No error recordAttempt is not a function
   - Login exitoso y redirecci√≥n a dashboard

5. üîç SI HAY PROBLEMAS:
   - Revisar Network tab para errores 400/401
   - Revisar Console para errores JavaScript
   - Verificar que Backend est√° respondiendo
EOF

echo ""
echo "üéâ RESUMEN DE VERIFICACI√ìN:"
echo "=========================="
echo "‚úÖ M√©todo RateLimiter.recordAttempt agregado"
echo "‚úÖ Backend NestJS funcionando (puerto 3002)"
echo "‚úÖ SuperApp funcionando (puerto 3001)"
echo "‚úÖ Endpoint de login responde correctamente"
echo "‚úÖ Scripts de limpieza localStorage creados"
echo ""
echo "üéØ PR√ìXIMO PASO CR√çTICO:"
echo "1. Ejecutar limpieza de localStorage en navegador"
echo "2. Probar login con credenciales: admin@gamifier.com / admin123"
echo "3. Verificar ausencia de errores JSON.parse y recordAttempt"
echo ""
echo "üõ†Ô∏è COMANDO R√ÅPIDO PARA LIMPIAR NAVEGADOR:"
echo "   ./scripts/execute-localStorage-cleanup.sh"
echo ""
