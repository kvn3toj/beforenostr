#!/bin/bash

# üîÆ CoP OR√ÅCULO - Script de Setup Completo
# Script para migrar e implementar la Comunidad de Pr√°ctica "Or√°culo"
# Autor: «ìAN (Agente IA Full-Stack de Coom√únity)
# Fecha: 20 de Junio, 2025

set -e  # Salir en caso de error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funci√≥n para logging
log() {
    echo -e "${CYAN}[CoP OR√ÅCULO]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Banner de inicio
echo -e "${PURPLE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     üîÆ CoP OR√ÅCULO SETUP üîÆ                  ‚ïë
‚ïë                                                              ‚ïë
‚ïë    Comunidad de Pr√°ctica Gamificada para Administradores    ‚ïë
‚ïë         Transformando Feedback en Sabidur√≠a Colectiva       ‚ïë
‚ïë                                                              ‚ïë
‚ïë                    by «ìAN - Agente IA                       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# ============================================================================
# FASE 1: VERIFICACIONES PREVIAS
# ============================================================================

log "üîç FASE 1: Verificaciones del Sistema"

# Verificar que estamos en el directorio correcto
if [ ! -f "package.json" ] || [ ! -d "backend" ] || [ ! -d "Demo/apps/superapp-unified" ]; then
    error "No est√°s en el directorio ra√≠z del proyecto Coom√únity. Aseg√∫rate de estar en la ra√≠z del monorepo."
fi

# Verificar Node.js
if ! command -v node &> /dev/null; then
    error "Node.js no est√° instalado. Por favor instala Node.js 18+ antes de continuar."
fi

NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    error "Se requiere Node.js 18+. Versi√≥n actual: $(node --version)"
fi

success "‚úÖ Node.js $(node --version) detectado"

# Verificar npm
if ! command -v npm &> /dev/null; then
    error "npm no est√° instalado."
fi

success "‚úÖ npm $(npm --version) detectado"

# Verificar PostgreSQL
if ! command -v psql &> /dev/null; then
    warning "‚ö†Ô∏è PostgreSQL CLI no detectado. Aseg√∫rate de que PostgreSQL est√© instalado y ejecut√°ndose."
else
    success "‚úÖ PostgreSQL CLI detectado"
fi

# Verificar Redis (si est√° disponible)
if command -v redis-cli &> /dev/null; then
    success "‚úÖ Redis CLI detectado"
else
    warning "‚ö†Ô∏è Redis CLI no detectado. Aseg√∫rate de que Redis est√© instalado y ejecut√°ndose."
fi

# ============================================================================
# FASE 2: INSTALACI√ìN DE DEPENDENCIAS
# ============================================================================

log "üì¶ FASE 2: Instalaci√≥n de Dependencias"

# Limpiar cach√© y node_modules si es necesario
if [ "$1" = "--clean" ]; then
    warning "üßπ Limpiando instalaci√≥n anterior..."
    rm -rf node_modules package-lock.json
    find . -name "node_modules" -type d -prune -exec rm -rf {} +
    find . -name "package-lock.json" -type f -delete
fi

# Instalar dependencias ra√≠z
log "üì¶ Instalando dependencias del monorepo..."
npm install --legacy-peer-deps

# Verificar que turbo est√© disponible
if ! command -v turbo &> /dev/null; then
    log "üîß Instalando Turborepo globalmente..."
    npm install -g turbo
fi

success "‚úÖ Dependencias instaladas correctamente"

# ============================================================================
# FASE 3: CONFIGURACI√ìN DE BASE DE DATOS
# ============================================================================

log "üóÑÔ∏è FASE 3: Configuraci√≥n de Base de Datos"

# Verificar archivo .env
if [ ! -f ".env" ]; then
    warning "‚ö†Ô∏è Archivo .env no encontrado. Creando .env base..."
    cat > .env << 'EOL'
# Base de datos
DATABASE_URL="postgresql://postgres:password@localhost:5432/coomunity_db"

# JWT
JWT_SECRET="your-super-secret-jwt-key-change-this-in-production"

# Redis
REDIS_URL="redis://localhost:6379"

# Puertos
PORT=3002
VITE_API_BASE_URL=http://localhost:3002
VITE_BASE_URL=http://localhost:3001

# Gamificaci√≥n CoP Or√°culo
LUKAS_EXCHANGE_RATE=1.0
FEEDBACK_REWARD_MULTIPLIER=1.5
COP_ORACULO_ENABLED=true
EOL
    info "üìù Archivo .env creado. Por favor revisa y ajusta las configuraciones seg√∫n tu entorno."
fi

# Verificar si PostgreSQL est√° ejecut√°ndose
if command -v pg_isready &> /dev/null; then
    if pg_isready -q; then
        success "‚úÖ PostgreSQL est√° ejecut√°ndose"
    else
        error "‚ùå PostgreSQL no est√° ejecut√°ndose. Por favor inicia PostgreSQL antes de continuar."
    fi
else
    warning "‚ö†Ô∏è No se puede verificar el estado de PostgreSQL. Aseg√∫rate de que est√© ejecut√°ndose."
fi

# Verificar conexi√≥n a la base de datos
log "üîó Verificando conexi√≥n a la base de datos..."
if npm run db:reset --silent > /dev/null 2>&1; then
    success "‚úÖ Base de datos conectada y reseteada"
else
    warning "‚ö†Ô∏è No se pudo resetear la base de datos. Intentando migraci√≥n..."
    if npx prisma migrate dev --name "cop-oraculo-initial" > /dev/null 2>&1; then
        success "‚úÖ Migraci√≥n de base de datos completada"
    else
        error "‚ùå Error en la configuraci√≥n de base de datos. Verifica tu DATABASE_URL en .env"
    fi
fi

# Ejecutar seed de datos
log "üå± Ejecutando seed de datos..."
if npm run db:seed > /dev/null 2>&1; then
    success "‚úÖ Datos de prueba insertados"
else
    warning "‚ö†Ô∏è Error al insertar datos de prueba. Continuando..."
fi

# ============================================================================
# FASE 4: VERIFICACI√ìN DE IMPLEMENTACI√ìN BACKEND
# ============================================================================

log "üîß FASE 4: Verificaci√≥n de Implementaci√≥n Backend"

# Verificar que los archivos del feedback m√≥dulo existen
FEEDBACK_FILES=(
    "backend/src/feedback/feedback.module.ts"
    "backend/src/feedback/feedback.controller.ts"
    "backend/src/feedback/feedback.service.ts"
    "backend/src/feedback/dto/create-feedback.dto.ts"
)

for file in "${FEEDBACK_FILES[@]}"; do
    if [ -f "$file" ]; then
        success "‚úÖ $file existe"
    else
        error "‚ùå $file no encontrado. La implementaci√≥n no est√° completa."
    fi
done

# Verificar que el FeedbackModule est√© importado en app.module.ts
if grep -q "FeedbackModule" backend/src/app.module.ts; then
    success "‚úÖ FeedbackModule importado en AppModule"
else
    error "‚ùå FeedbackModule no est√° importado en AppModule"
fi

# ============================================================================
# FASE 5: INICIO DE SERVICIOS
# ============================================================================

log "üöÄ FASE 5: Iniciando Servicios"

# Limpiar procesos previos
log "üßπ Limpiando procesos previos..."
npm run stop:all > /dev/null 2>&1 || true
sleep 2

# Funci√≥n para verificar si un puerto est√° libre
check_port() {
    local port=$1
    if command -v nc &> /dev/null; then
        ! nc -z localhost $port 2>/dev/null
    else
        ! curl -s localhost:$port > /dev/null 2>&1
    fi
}

# Verificar puertos necesarios
PORTS=(3000 3001 3002)
for port in "${PORTS[@]}"; do
    if check_port $port; then
        success "‚úÖ Puerto $port disponible"
    else
        warning "‚ö†Ô∏è Puerto $port ocupado. Intentando liberarlo..."
        fuser -k ${port}/tcp 2>/dev/null || true
        sleep 1
    fi
done

# Iniciar backend
log "üîß Iniciando Backend NestJS..."
npm run start:backend:dev > logs/backend.log 2>&1 &
BACKEND_PID=$!

# Esperar a que el backend se inicie
log "‚è≥ Esperando que el backend se inicie..."
for i in {1..30}; do
    if curl -s http://localhost:3002/api/health > /dev/null 2>&1; then
        success "‚úÖ Backend NestJS iniciado correctamente (puerto 3002)"
        break
    fi
    if [ $i -eq 30 ]; then
        error "‚ùå Backend no se inici√≥ correctamente. Revisa logs/backend.log"
    fi
    sleep 1
done

# Verificar endpoints de feedback
log "üîç Verificando endpoints del m√≥dulo Feedback..."
FEEDBACK_ENDPOINTS=(
    "http://localhost:3002/feedback"
    "http://localhost:3002/api-json"
)

for endpoint in "${FEEDBACK_ENDPOINTS[@]}"; do
    if curl -s "$endpoint" > /dev/null 2>&1; then
        success "‚úÖ Endpoint $endpoint accesible"
    else
        warning "‚ö†Ô∏è Endpoint $endpoint no accesible"
    fi
done

# Verificar endpoints de feedback multi-agente
log "üîç Verificando endpoints del sistema multi-agente..."
FEEDBACK_ENDPOINTS=(
    "http://localhost:3002/feedback"
    "http://localhost:3002/cop-oraculo/agents/dashboard/metrics"
    "http://localhost:3002/cop-oraculo/agents/wisdom/insights"
    "http://localhost:3002/api-json"
)

for endpoint in "${FEEDBACK_ENDPOINTS[@]}"; do
    if curl -s "$endpoint" > /dev/null 2>&1; then
        success "‚úÖ Endpoint $endpoint accesible"
    else
        warning "‚ö†Ô∏è Endpoint $endpoint no accesible"
    fi
done

# Test de sistema multi-agente
log "ü§ñ Probando sistema multi-agente..."
AGENT_TEST_RESPONSE=$(curl -s -X POST http://localhost:3002/cop-oraculo/agents/analyze/test-feedback-123 \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer fake-jwt-for-testing" \
  -d '{}' 2>/dev/null || echo "ERROR")

if [[ "$AGENT_TEST_RESPONSE" != "ERROR" && "$AGENT_TEST_RESPONSE" != *"error"* ]]; then
    success "‚úÖ Sistema multi-agente funcional"
else
    warning "‚ö†Ô∏è Test de sistema multi-agente fall√≥ (esperado sin autenticaci√≥n real)"
fi

# ============================================================================
# FASE 6: CONFIGURACI√ìN FRONTEND
# ============================================================================

log "üé® FASE 6: Configuraci√≥n Frontend"

# Verificar configuraci√≥n de SuperApp
SUPERAPP_ENV="Demo/apps/superapp-unified/.env"
if [ ! -f "$SUPERAPP_ENV" ]; then
    warning "‚ö†Ô∏è Archivo .env de SuperApp no encontrado. Creando..."
    cat > "$SUPERAPP_ENV" << 'EOL'
# API Configuration
VITE_API_BASE_URL=http://localhost:3002
VITE_BASE_URL=http://localhost:3001

# Features Flags
VITE_ENABLE_MOCK_AUTH=false
VITE_ENABLE_COP_ORACULO=true
VITE_ENABLE_LUKAS_ECONOMY=true

# CoP Or√°culo Configuration
VITE_COP_ORACULO_WS_URL=ws://localhost:3002
VITE_LUKAS_DISPLAY_ENABLED=true
VITE_FEEDBACK_REWARDS_ENABLED=true
EOL
    success "‚úÖ Archivo .env de SuperApp creado"
fi

# ============================================================================
# FASE 7: INICIO DE FRONTEND (OPCIONAL)
# ============================================================================

if [ "$2" != "--backend-only" ]; then
    log "üé® FASE 7: Iniciando Frontend SuperApp"
    
    cd Demo/apps/superapp-unified
    npm run dev > ../../../logs/superapp.log 2>&1 &
    SUPERAPP_PID=$!
    cd ../../..
    
    # Esperar a que el frontend se inicie
    log "‚è≥ Esperando que la SuperApp se inicie..."
    for i in {1..30}; do
        if curl -s http://localhost:3001 > /dev/null 2>&1; then
            success "‚úÖ SuperApp iniciada correctamente (puerto 3001)"
            break
        fi
        if [ $i -eq 30 ]; then
            warning "‚ö†Ô∏è SuperApp no se inici√≥ completamente. Revisa logs/superapp.log"
        fi
        sleep 1
    done
fi

# ============================================================================
# FASE 8: TESTS DE VERIFICACI√ìN
# ============================================================================

log "üß™ FASE 8: Tests de Verificaci√≥n"

# Test de creaci√≥n de feedback
log "üîç Probando creaci√≥n de feedback..."
FEEDBACK_TEST_RESPONSE=$(curl -s -X POST http://localhost:3002/feedback \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer fake-jwt-for-testing" \
  -d '{
    "pageUrl": "http://localhost:3001/test",
    "feedbackText": "Test feedback from setup script",
    "feedbackType": "IMPROVEMENT",
    "componentContext": "setup-script-test",
    "technicalContext": {
      "userAgent": "CoP-Oraculo-Setup-Script/1.0",
      "viewport": "test",
      "route": "/test"
    }
  }' 2>/dev/null || echo "ERROR")

if [[ "$FEEDBACK_TEST_RESPONSE" != "ERROR" && "$FEEDBACK_TEST_RESPONSE" != *"error"* ]]; then
    success "‚úÖ Endpoint de feedback funcional"
else
    warning "‚ö†Ô∏è Test de feedback fall√≥ (esperado sin autenticaci√≥n real)"
fi

# Test de documentaci√≥n Swagger
if curl -s http://localhost:3002/api | grep -q "swagger"; then
    success "‚úÖ Documentaci√≥n Swagger disponible en http://localhost:3002/api"
else
    warning "‚ö†Ô∏è Documentaci√≥n Swagger no accesible"
fi

# ============================================================================
# FASE 9: REPORTE FINAL
# ============================================================================

log "üìã FASE 9: Reporte Final"

echo -e "\n${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${GREEN}‚ïë                     üéâ SETUP COMPLETADO üéâ                    ‚ïë${NC}"
echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"

info "üîÆ CoP OR√ÅCULO - Estado de los Servicios:"
echo -e "  ${CYAN}‚îú‚îÄ${NC} Backend NestJS:       ${GREEN}http://localhost:3002${NC}"
echo -e "  ${CYAN}‚îú‚îÄ${NC} Swagger API Docs:     ${GREEN}http://localhost:3002/api${NC}"
echo -e "  ${CYAN}‚îú‚îÄ${NC} Feedback Endpoint:    ${GREEN}http://localhost:3002/feedback${NC}"

if [ "$2" != "--backend-only" ]; then
    echo -e "  ${CYAN}‚îî‚îÄ${NC} SuperApp Frontend:   ${GREEN}http://localhost:3001${NC}"
fi

echo -e "\n${BLUE}üìö Funcionalidades Implementadas:${NC}"
echo -e "  ${CYAN}‚úÖ${NC} Sistema de Feedback persistente"
echo -e "  ${CYAN}‚úÖ${NC} Base de datos configurada con modelos"
echo -e "  ${CYAN}‚úÖ${NC} APIs REST para gesti√≥n de feedback"
echo -e "  ${CYAN}‚úÖ${NC} Estructura base para L√ºkas de Sabidur√≠a"
echo -e "  ${CYAN}‚úÖ${NC} Documentaci√≥n autom√°tica con Swagger"

echo -e "\n${YELLOW}üöÄ Pr√≥ximos Pasos:${NC}"
echo -e "  ${CYAN}1.${NC} Revisa la documentaci√≥n API en ${GREEN}http://localhost:3002/api${NC}"
echo -e "  ${CYAN}2.${NC} Implementa la interfaz de usuario para la CoP"
echo -e "  ${CYAN}3.${NC} Configura el sistema de L√ºkas de Sabidur√≠a"
echo -e "  ${CYAN}4.${NC} A√±ade las mec√°nicas de gamificaci√≥n"
echo -e "  ${CYAN}5.${NC} Integra con la SuperApp principal"

echo -e "\n${PURPLE}üìÇ Archivos de Log:${NC}"
echo -e "  ${CYAN}‚îú‚îÄ${NC} Backend: logs/backend.log"
if [ "$2" != "--backend-only" ]; then
    echo -e "  ${CYAN}‚îî‚îÄ${NC} SuperApp: logs/superapp.log"
fi

echo -e "\n${BLUE}üîß Comandos √ötiles:${NC}"
echo -e "  ${CYAN}‚îú‚îÄ${NC} Detener servicios: ${YELLOW}npm run stop:all${NC}"
echo -e "  ${CYAN}‚îú‚îÄ${NC} Reiniciar backend: ${YELLOW}npm run start:backend:dev${NC}"
echo -e "  ${CYAN}‚îú‚îÄ${NC} Ver logs backend: ${YELLOW}tail -f logs/backend.log${NC}"
echo -e "  ${CYAN}‚îî‚îÄ${NC} Reset BD: ${YELLOW}npm run db:reset${NC}"

# Crear script de inicio r√°pido
cat > scripts/cop-oraculo-start.sh << 'EOL'
#!/bin/bash
# Quick start script para CoP Or√°culo
echo "üîÆ Iniciando CoP Or√°culo..."
npm run stop:all > /dev/null 2>&1 || true
npm run start:backend:dev &
sleep 5
echo "‚úÖ CoP Or√°culo iniciado en http://localhost:3002"
echo "üìö Documentaci√≥n API: http://localhost:3002/api"
EOL

chmod +x scripts/cop-oraculo-start.sh
success "‚úÖ Script de inicio r√°pido creado: scripts/cop-oraculo-start.sh"

echo -e "\n${GREEN}üåü ¬°La CoP Or√°culo est√° lista para transformar feedback en sabidur√≠a! üåü${NC}\n"

# Guardar PIDs para cleanup
if [ -n "$BACKEND_PID" ]; then
    echo $BACKEND_PID > .cop-oraculo-backend.pid
fi

if [ -n "$SUPERAPP_PID" ]; then
    echo $SUPERAPP_PID > .cop-oraculo-superapp.pid
fi