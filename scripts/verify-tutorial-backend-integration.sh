#!/bin/bash

# üéì VERIFICACI√ìN COMPLETA: TUTORIALES DISCOVERY & INTEGRACI√ìN BACKEND
# ============================================================================
# Script para verificar que los cambios implementados est√©n correctamente
# alineados con el backend NestJS y que los endpoints necesarios est√©n disponibles

echo "üéì INICIANDO VERIFICACI√ìN COMPLETA DE TUTORIALES DISCOVERY..."
echo "============================================================================"

# üîß Configuraci√≥n
BACKEND_URL="http://localhost:3002"
FRONTEND_URL="http://localhost:3001"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# üéØ Contadores para el resumen final
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# üé® Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# üìä Funci√≥n para reportar resultados
report_check() {
    local check_name="$1"
    local status="$2"
    local details="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ "$status" = "PASS" ]; then
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
        echo -e "  ‚úÖ ${GREEN}$check_name${NC}"
        [ -n "$details" ] && echo -e "     $details"
    else
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
        echo -e "  ‚ùå ${RED}$check_name${NC}"
        [ -n "$details" ] && echo -e "     ${YELLOW}$details${NC}"
    fi
}

# üè• Funci√≥n para verificar salud del backend
check_backend_health() {
    echo ""
    echo "üè• 1. VERIFICACI√ìN DE SALUD DEL BACKEND"
    echo "----------------------------------------"
    
    local health_response=$(curl -s "$BACKEND_URL/health" 2>/dev/null)
    local health_status=$?
    
    if [ $health_status -eq 0 ] && echo "$health_response" | grep -q "ok"; then
        report_check "Backend NestJS Health Check" "PASS" "Puerto 3002 respondiendo correctamente"
    else
        report_check "Backend NestJS Health Check" "FAIL" "Backend no disponible en puerto 3002"
        return 1
    fi
}

# üîê Funci√≥n para obtener token de autenticaci√≥n
get_auth_token() {
    echo ""
    echo "üîê 2. AUTENTICACI√ìN CON BACKEND"
    echo "-------------------------------"
    
    local login_payload='{"email": "admin@gamifier.com", "password": "admin123"}'
    local login_response=$(curl -s -X POST "$BACKEND_URL/auth/login" \
        -H "Content-Type: application/json" \
        -d "$login_payload" 2>/dev/null)
    
    if echo "$login_response" | grep -q "access_token"; then
        JWT_TOKEN=$(echo "$login_response" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
        report_check "Autenticaci√≥n JWT" "PASS" "Token obtenido exitosamente"
        export JWT_TOKEN
    else
        report_check "Autenticaci√≥n JWT" "FAIL" "No se pudo obtener token de autenticaci√≥n"
        return 1
    fi
}

# üéØ Funci√≥n para verificar endpoints de m√©tricas de usuario
check_user_metrics_endpoint() {
    echo ""
    echo "üéØ 3. VERIFICACI√ìN DE ENDPOINTS DE M√âTRICAS"
    echo "--------------------------------------------"
    
    local user_id="00000000-0000-0000-0000-000000000001"
    local metrics_response=$(curl -s "$BACKEND_URL/users/$user_id/ayni-metrics" \
        -H "Authorization: Bearer $JWT_TOKEN" 2>/dev/null)
    
    if echo "$metrics_response" | grep -q "ondas" && echo "$metrics_response" | grep -q "meritos"; then
        local ondas=$(echo "$metrics_response" | grep -o '"ondas":[0-9]*' | cut -d':' -f2)
        local meritos=$(echo "$metrics_response" | grep -o '"meritos":[0-9]*' | cut -d':' -f2)
        report_check "Endpoint de m√©tricas Ayni" "PASS" "Ondas: $ondas, Meritos: $meritos"
    else
        report_check "Endpoint de m√©tricas Ayni" "FAIL" "Endpoint no devuelve m√©tricas v√°lidas"
    fi
}

# üèÜ Funci√≥n para verificar sistema de recompensas
check_rewards_system() {
    echo ""
    echo "üèÜ 4. VERIFICACI√ìN DEL SISTEMA DE RECOMPENSAS"
    echo "----------------------------------------------"
    
    # Verificar endpoint de creaci√≥n de m√©ritos
    local merit_payload='{
        "userId": "00000000-0000-0000-0000-000000000001",
        "type": "MERITO",
        "amount": 5,
        "source": "CHALLENGE_COMPLETION",
        "relatedEntityId": "tutorial-test"
    }'
    
    local merit_response=$(curl -s -X POST "$BACKEND_URL/merits" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -H "Content-Type: application/json" \
        -d "$merit_payload" 2>/dev/null)
    
    local merit_status=$(echo "$merit_response" | grep -o '"statusCode":[0-9]*' | cut -d':' -f2)
    
    if [ "$merit_status" = "500" ]; then
        report_check "Endpoint de creaci√≥n de m√©ritos" "FAIL" "Error 500 - Posible problema con modelo Prisma"
    elif echo "$merit_response" | grep -q "id"; then
        report_check "Endpoint de creaci√≥n de m√©ritos" "PASS" "M√©rito creado exitosamente"
    else
        report_check "Endpoint de creaci√≥n de m√©ritos" "FAIL" "Respuesta inesperada del endpoint"
    fi
}

# üéÆ Funci√≥n para verificar endpoints de video questions
check_video_questions_endpoint() {
    echo ""
    echo "üéÆ 5. VERIFICACI√ìN DE PREGUNTAS DE VIDEO"
    echo "-----------------------------------------"
    
    local video_questions_response=$(curl -s "$BACKEND_URL/video-items/1/questions" \
        -H "Authorization: Bearer $JWT_TOKEN" 2>/dev/null)
    
    if [ "$video_questions_response" = "[]" ]; then
        report_check "Endpoint de preguntas de video" "PASS" "Endpoint disponible (sin preguntas configuradas)"
    elif echo "$video_questions_response" | grep -q "question"; then
        local questions_count=$(echo "$video_questions_response" | grep -o '"id"' | wc -l)
        report_check "Endpoint de preguntas de video" "PASS" "Endpoint con $questions_count preguntas configuradas"
    else
        report_check "Endpoint de preguntas de video" "FAIL" "Endpoint no responde correctamente"
    fi
}

# üìÇ Funci√≥n para verificar archivos del frontend
check_frontend_files() {
    echo ""
    echo "üìÇ 6. VERIFICACI√ìN DE ARCHIVOS FRONTEND"
    echo "----------------------------------------"
    
    # Verificar DiscoveryTutorialProvider expandido
    local tutorial_provider="$PROJECT_ROOT/Demo/apps/superapp-unified/src/components/tutorials/DiscoveryTutorialProvider.tsx"
    if [ -f "$tutorial_provider" ]; then
        local tutorial_lines=$(wc -l < "$tutorial_provider")
        if [ "$tutorial_lines" -gt 500 ]; then
            report_check "DiscoveryTutorialProvider expandido" "PASS" "$tutorial_lines l√≠neas (vs. ~100 original)"
        else
            report_check "DiscoveryTutorialProvider expandido" "FAIL" "Archivo parece no estar expandido ($tutorial_lines l√≠neas)"
        fi
    else
        report_check "DiscoveryTutorialProvider expandido" "FAIL" "Archivo no encontrado"
    fi
    
    # Verificar servicio de tutoriales
    local tutorial_service="$PROJECT_ROOT/Demo/apps/superapp-unified/src/services/tutorial.service.ts"
    if [ -f "$tutorial_service" ]; then
        if grep -q "TutorialService" "$tutorial_service"; then
            report_check "Tutorial Service creado" "PASS" "Servicio de tutoriales implementado"
        else
            report_check "Tutorial Service creado" "FAIL" "Servicio incompleto o corrupto"
        fi
    else
        report_check "Tutorial Service creado" "FAIL" "Archivo de servicio no encontrado"
    fi
}

# üåê Funci√≥n para verificar estado del frontend
check_frontend_status() {
    echo ""
    echo "üåê 7. VERIFICACI√ìN DEL FRONTEND"
    echo "-------------------------------"
    
    local frontend_response=$(curl -s -I "$FRONTEND_URL" 2>/dev/null | head -1)
    
    if echo "$frontend_response" | grep -q "200 OK"; then
        report_check "SuperApp Frontend" "PASS" "Funcionando en puerto 3001"
    else
        report_check "SuperApp Frontend" "FAIL" "No disponible en puerto 3001"
    fi
}

# üîç Funci√≥n para verificar integraci√≥n de tutoriales
check_tutorial_integration() {
    echo ""
    echo "üîç 8. VERIFICACI√ìN DE INTEGRACI√ìN DE TUTORIALES"
    echo "------------------------------------------------"
    
    # Verificar estructura de tutoriales expandidos
    local tutorial_provider="$PROJECT_ROOT/Demo/apps/superapp-unified/src/components/tutorials/DiscoveryTutorialProvider.tsx"
    
    if [ -f "$tutorial_provider" ]; then
        # Verificar que contiene tutoriales expandidos
        local marketplace_steps=$(grep -c "marketplace-discovery" "$tutorial_provider" || echo "0")
        local uplay_steps=$(grep -c "uplay-discovery" "$tutorial_provider" || echo "0")
        local social_steps=$(grep -c "social-discovery" "$tutorial_provider" || echo "0")
        
        if [ "$marketplace_steps" -gt 0 ] && [ "$uplay_steps" -gt 0 ] && [ "$social_steps" -gt 0 ]; then
            report_check "Tutoriales discovery expandidos" "PASS" "Marketplace: $marketplace_steps, √úPlay: $uplay_steps, Social: $social_steps"
        else
            report_check "Tutoriales discovery expandidos" "FAIL" "Tutoriales no completamente expandidos"
        fi
        
        # Verificar que contiene recompensas
        if grep -q "completionRewards" "$tutorial_provider"; then
            report_check "Sistema de recompensas en tutoriales" "PASS" "Recompensas configuradas en tutoriales"
        else
            report_check "Sistema de recompensas en tutoriales" "FAIL" "Recompensas no configuradas"
        fi
        
        # Verificar que contiene tips y elementos interactivos
        if grep -q "tips.*actionButton" "$tutorial_provider"; then
            report_check "Elementos interactivos avanzados" "PASS" "Tips y botones de acci√≥n implementados"
        else
            report_check "Elementos interactivos avanzados" "FAIL" "Elementos interactivos faltantes"
        fi
    fi
}

# üìã Funci√≥n para verificar documentaci√≥n
check_documentation() {
    echo ""
    echo "üìã 9. VERIFICACI√ìN DE DOCUMENTACI√ìN"
    echo "------------------------------------"
    
    local summary_doc="$PROJECT_ROOT/docs/implementation/DISCOVERY_TUTORIALS_EXPANSION_SUMMARY.md"
    if [ -f "$summary_doc" ]; then
        local doc_lines=$(wc -l < "$summary_doc")
        if [ "$doc_lines" -gt 50 ]; then
            report_check "Documentaci√≥n de expansi√≥n" "PASS" "Documento completo ($doc_lines l√≠neas)"
        else
            report_check "Documentaci√≥n de expansi√≥n" "FAIL" "Documentaci√≥n incompleta"
        fi
    else
        report_check "Documentaci√≥n de expansi√≥n" "FAIL" "Documentaci√≥n no encontrada"
    fi
}

# üîÆ Funci√≥n para verificar preparaci√≥n para integraci√≥n backend
check_backend_integration_readiness() {
    echo ""
    echo "üîÆ 10. PREPARACI√ìN PARA INTEGRACI√ìN BACKEND"
    echo "--------------------------------------------"
    
    local tutorial_service="$PROJECT_ROOT/Demo/apps/superapp-unified/src/services/tutorial.service.ts"
    
    if [ -f "$tutorial_service" ]; then
        # Verificar que contiene comentarios de integraci√≥n futura
        if grep -q "INTEGRACI√ìN FUTURA" "$tutorial_service"; then
            report_check "Comentarios de integraci√≥n futura" "PASS" "Endpoints futuros documentados"
        else
            report_check "Comentarios de integraci√≥n futura" "FAIL" "Integraci√≥n futura no documentada"
        fi
        
        # Verificar que tiene m√©todos para sincronizaci√≥n
        if grep -q "syncWithBackend" "$tutorial_service"; then
            report_check "M√©todo de sincronizaci√≥n backend" "PASS" "M√©todo syncWithBackend implementado"
        else
            report_check "M√©todo de sincronizaci√≥n backend" "FAIL" "Sincronizaci√≥n no implementada"
        fi
        
        # Verificar que maneja recompensas
        if grep -q "calculateRewards" "$tutorial_service"; then
            report_check "Sistema de c√°lculo de recompensas" "PASS" "C√°lculo de recompensas implementado"
        else
            report_check "Sistema de c√°lculo de recompensas" "FAIL" "C√°lculo de recompensas faltante"
        fi
    fi
}

# üéØ Funci√≥n principal
main() {
    echo "üéì VERIFICACI√ìN COMPLETA: TUTORIALES DISCOVERY & BACKEND INTEGRATION"
    echo "$(date '+%Y-%m-%d %H:%M:%S')"
    echo "============================================================================"
    
    # Ejecutar todas las verificaciones
    check_backend_health || echo "‚ö†Ô∏è Continuando sin backend..."
    
    if [ -n "$JWT_TOKEN" ] || get_auth_token; then
        check_user_metrics_endpoint
        check_rewards_system
        check_video_questions_endpoint
    else
        echo "‚ö†Ô∏è Saltando verificaciones que requieren autenticaci√≥n"
        TOTAL_CHECKS=$((TOTAL_CHECKS + 3))
        FAILED_CHECKS=$((FAILED_CHECKS + 3))
    fi
    
    check_frontend_files
    check_frontend_status
    check_tutorial_integration
    check_documentation
    check_backend_integration_readiness
    
    # üìä Resumen final
    echo ""
    echo "üìä RESUMEN DE VERIFICACI√ìN"
    echo "=========================="
    echo -e "Total de verificaciones: ${BLUE}$TOTAL_CHECKS${NC}"
    echo -e "Verificaciones exitosas: ${GREEN}$PASSED_CHECKS${NC}"
    echo -e "Verificaciones fallidas: ${RED}$FAILED_CHECKS${NC}"
    
    local success_rate=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))
    echo -e "Tasa de √©xito: ${BLUE}${success_rate}%${NC}"
    
    if [ $success_rate -ge 80 ]; then
        echo -e ""
        echo -e "üéâ ${GREEN}VERIFICACI√ìN EXITOSA${NC}"
        echo -e "Los tutoriales discovery est√°n correctamente implementados y listos para integraci√≥n con el backend."
        echo -e ""
        echo -e "üîÆ PR√ìXIMOS PASOS RECOMENDADOS:"
        echo -e "1. Implementar endpoints espec√≠ficos para tutoriales en el backend NestJS"
        echo -e "2. Crear tablas de Tutorial y TutorialCompletion en Prisma"
        echo -e "3. Integrar TutorialService con endpoints reales del backend"
        echo -e "4. Implementar notificaciones de recompensas en tiempo real"
        echo -e "5. Crear tests E2E para el flujo completo de tutoriales"
    elif [ $success_rate -ge 60 ]; then
        echo -e ""
        echo -e "‚ö†Ô∏è ${YELLOW}VERIFICACI√ìN PARCIAL${NC}"
        echo -e "La mayor√≠a de componentes est√°n funcionando, pero hay √°reas que necesitan atenci√≥n."
    else
        echo -e ""
        echo -e "‚ùå ${RED}VERIFICACI√ìN FALLIDA${NC}"
        echo -e "M√∫ltiples componentes necesitan ser corregidos antes de proceder."
    fi
    
    echo ""
    echo "============================================================================"
    echo "Verificaci√≥n completada: $(date '+%Y-%m-%d %H:%M:%S')"
    
    # Return appropriate exit code
    if [ $success_rate -ge 80 ]; then
        exit 0
    else
        exit 1
    fi
}

# üöÄ Ejecutar verificaci√≥n
main "$@" 