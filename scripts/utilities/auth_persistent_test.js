const { chromium } = require('playwright');

async function runAuthPersistenceTest() {
  console.log('üîê Iniciando test de persistencia de autenticaci√≥n...\n');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1000 
  });
  
  const context = await browser.newContext();
  const page = await context.newPage();

  // Capturar errores de consola y p√°gina
  page.on('console', msg => {
    if (msg.type() === 'error') {
      console.log('‚ùå Console error:', msg.text());
    }
  });
  
  page.on('pageerror', error => {
    console.log('‚ùå Page error:', error.message);
  });

  try {
    // FASE 1: LOGIN INICIAL Y VERIFICACI√ìN
    console.log('üìã FASE 1: Login inicial...');
    await page.goto('http://localhost:3000/login');
    await page.waitForLoadState('networkidle');

    // Rellenar credenciales de admin
    await page.fill('input[name="email"]', 'admin@gamifier.com');
    await page.fill('input[name="password"]', 'admin123');
    await page.click('button[type="submit"]');

    // Esperar redirecci√≥n y verificar login exitoso
    await page.waitForURL('**/');
    
    // Verificaci√≥n robusta de login exitoso
    try {
      await page.waitForSelector('nav, [role="navigation"], button[aria-label*="menu"]', { timeout: 5000 });
      console.log('‚úÖ Login exitoso - Navegaci√≥n detectada');
    } catch {
      const currentUrl = page.url();
      if (!currentUrl.includes('/login')) {
        console.log('‚úÖ Login exitoso - Verificado por URL');
      } else {
        throw new Error('Login fall√≥ - A√∫n en p√°gina de login');
      }
    }

    // FASE 2: VERIFICAR PERSISTENCIA EN P√ÅGINA DE ROLES
    console.log('\nüìã FASE 2: Verificando p√°gina de Roles...');
    await page.goto('http://localhost:3000/roles');
    await page.waitForLoadState('networkidle');
    
    // Verificar que no nos redirige a login
    const rolesUrl = page.url();
    if (rolesUrl.includes('/login')) {
      console.log('‚ùå Roles: Redirigido a login - Problema de autenticaci√≥n');
    } else {
      console.log('‚úÖ Roles: Navegaci√≥n exitosa, URL:', rolesUrl);
      
      // Verificar contenido de la p√°gina
      const rolesContent = await page.textContent('body');
      if (rolesContent.includes('401') || rolesContent.includes('Unauthorized')) {
        console.log('‚ùå Roles: Error 401 en contenido');
      } else if (rolesContent.includes('roles') || rolesContent.includes('Roles') || rolesContent.includes('permisos')) {
        console.log('‚úÖ Roles: Contenido v√°lido detectado');
      } else {
        console.log('‚ö†Ô∏è Roles: P√°gina cargada pero contenido incierto');
      }
    }

    // FASE 3: VERIFICAR PERSISTENCIA EN P√ÅGINA DE MUNDOS
    console.log('\nüìã FASE 3: Verificando p√°gina de Mundos...');
    await page.goto('http://localhost:3000/mundos');
    await page.waitForLoadState('networkidle');
    
    const mundosUrl = page.url();
    if (mundosUrl.includes('/login')) {
      console.log('‚ùå Mundos: Redirigido a login - Problema de autenticaci√≥n');
    } else {
      console.log('‚úÖ Mundos: Navegaci√≥n exitosa, URL:', mundosUrl);
      
      const mundosContent = await page.textContent('body');
      if (mundosContent.includes('401') || mundosContent.includes('Unauthorized')) {
        console.log('‚ùå Mundos: Error 401 en contenido');
      } else if (mundosContent.includes('mundos') || mundosContent.includes('Mundos') || mundosContent.includes('worlds')) {
        console.log('‚úÖ Mundos: Contenido v√°lido detectado');
      } else {
        console.log('‚ö†Ô∏è Mundos: P√°gina cargada pero contenido incierto');
      }
    }

    // FASE 4: VERIFICAR PERSISTENCIA EN P√ÅGINA DE PLAYLISTS
    console.log('\nüìã FASE 4: Verificando p√°gina de Playlists...');
    await page.goto('http://localhost:3000/playlists');
    await page.waitForLoadState('networkidle');
    
    const playlistsUrl = page.url();
    if (playlistsUrl.includes('/login')) {
      console.log('‚ùå Playlists: Redirigido a login - Problema de autenticaci√≥n');
    } else {
      console.log('‚úÖ Playlists: Navegaci√≥n exitosa, URL:', playlistsUrl);
      
      const playlistsContent = await page.textContent('body');
      if (playlistsContent.includes('401') || playlistsContent.includes('Unauthorized')) {
        console.log('‚ùå Playlists: Error 401 en contenido');
      } else if (playlistsContent.includes('playlist') || playlistsContent.includes('Playlist') || playlistsContent.includes('listas')) {
        console.log('‚úÖ Playlists: Contenido v√°lido detectado');
      } else {
        console.log('‚ö†Ô∏è Playlists: P√°gina cargada pero contenido incierto');
      }
    }

    // FASE 5: VERIFICAR SOCIAL PAGE (Nueva implementaci√≥n)
    console.log('\nüìã FASE 5: Verificando p√°gina Social...');
    await page.goto('http://localhost:3000/social');
    await page.waitForLoadState('networkidle');
    
    const socialUrl = page.url();
    if (socialUrl.includes('/login')) {
      console.log('‚ùå Social: Redirigido a login - Problema de autenticaci√≥n');
    } else {
      console.log('‚úÖ Social: Navegaci√≥n exitosa, URL:', socialUrl);
      
      // Verificar que la p√°gina social carga con datos
      try {
        await page.waitForSelector('text=Red Social', { timeout: 3000 });
        console.log('‚úÖ Social: T√≠tulo detectado');
        
        // Verificar estad√≠sticas sociales
        const stats = await page.locator('text=Publicaciones').count();
        if (stats > 0) {
          console.log('‚úÖ Social: Estad√≠sticas sociales cargadas');
        } else {
          console.log('‚ö†Ô∏è Social: Estad√≠sticas no visibles');
        }
      } catch {
        console.log('‚ö†Ô∏è Social: T√≠tulo no encontrado, pero p√°gina cargada');
      }
    }

    // FASE 6: VERIFICAR ESTADO DE AUTENTICACI√ìN EN LOCALSTORAGE
    console.log('\nüìã FASE 6: Verificando estado de autenticaci√≥n...');
    const token = await page.evaluate(() => localStorage.getItem('token'));
    const user = await page.evaluate(() => localStorage.getItem('user'));
    
    if (token) {
      console.log('‚úÖ Token encontrado en localStorage:', token.substring(0, 20) + '...');
    } else {
      console.log('‚ùå No hay token en localStorage');
    }
    
    if (user) {
      console.log('‚úÖ Usuario encontrado en localStorage:', user);
    } else {
      console.log('‚ùå No hay usuario en localStorage');
    }

    console.log('\nüéâ Test de persistencia de autenticaci√≥n completado');

  } catch (error) {
    console.error('‚ùå Error durante el test:', error);
    await page.screenshot({ 
      path: `auth-persistence-error-${Date.now()}.png`,
      fullPage: true 
    });
  } finally {
    await browser.close();
  }
}

runAuthPersistenceTest().catch(console.error); 