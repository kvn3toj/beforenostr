const fs = require('fs');
const path = require('path');
const glob = require('glob');

const REPORTS_DIR = path.join(__dirname, '../../reports');
const DOCS_DIR = path.join(__dirname, '../../docs/modular-review');
const EVOLUTION_FILE = path.join(DOCS_DIR, 'module-evolution.md');
const CHANGELOG_FILE = path.join(DOCS_DIR, 'CHANGELOG.md');

/**
 * Ensures the documentation directory exists.
 */
function ensureDocsDirectory() {
  if (!fs.existsSync(DOCS_DIR)) {
    fs.mkdirSync(DOCS_DIR, { recursive: true });
  }
}

/**
 * Gets all historical reports sorted by date.
 * @returns {object[]} Array of report objects with timestamps.
 */
function getAllHistoricalReports() {
  const reportPattern = path.join(REPORTS_DIR, 'consolidated_review_*.json');
  const reportFiles = glob.sync(reportPattern);

  return reportFiles
    .map((file) => {
      const report = JSON.parse(fs.readFileSync(file, 'utf-8'));
      if (!report.timestamp) {
        report.timestamp = new Date(fs.statSync(file).mtime).toISOString();
      }
      return report;
    })
    .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
}

/**
 * Analyzes the evolution of a specific module across all reports.
 * @param {string} moduleName
 * @param {object[]} reports
 * @returns {object} Evolution analysis for the module.
 */
function analyzeModuleEvolution(moduleName, reports) {
  const evolution = {
    name: moduleName,
    totalReports: 0,
    trends: {
      improving: false,
      stable: false,
      declining: false,
    },
    milestones: [],
    currentStatus: 'Unknown',
  };

  const moduleData = reports
    .map((report) => {
      const moduleResult = report.results.find((r) => r.module === moduleName);
      if (!moduleResult) return null;

      return {
        date: report.timestamp.split('T')[0],
        totalIssues: moduleResult.summary.totalIssues,
        severityBreakdown: moduleResult.summary.severityBreakdown,
      };
    })
    .filter(Boolean);

  evolution.totalReports = moduleData.length;

  if (moduleData.length >= 2) {
    const first = moduleData[0];
    const last = moduleData[moduleData.length - 1];
    const middle = moduleData[Math.floor(moduleData.length / 2)];

    // Trend analysis
    if (last.totalIssues < first.totalIssues) {
      evolution.trends.improving = true;
      evolution.currentStatus = 'Improving';
    } else if (last.totalIssues > first.totalIssues) {
      evolution.trends.declining = true;
      evolution.currentStatus = 'Declining';
    } else {
      evolution.trends.stable = true;
      evolution.currentStatus = 'Stable';
    }

    // Milestone detection (significant changes)
    for (let i = 1; i < moduleData.length; i++) {
      const prev = moduleData[i - 1];
      const curr = moduleData[i];
      const changePercent =
        ((curr.totalIssues - prev.totalIssues) / prev.totalIssues) * 100;

      if (Math.abs(changePercent) > 25) {
        // 25% change threshold
        evolution.milestones.push({
          date: curr.date,
          type: changePercent > 0 ? 'regression' : 'improvement',
          change: `${changePercent > 0 ? '+' : ''}${changePercent.toFixed(1)}%`,
          description: `${changePercent > 0 ? 'Significant increase' : 'Significant improvement'} in issues`,
        });
      }
    }
  }

  return evolution;
}

/**
 * Generates markdown documentation for module evolution.
 * @param {object[]} reports
 * @returns {string} Markdown content.
 */
function generateEvolutionMarkdown(reports) {
  const modules = [
    'HOME',
    'USTATS',
    'USOCIAL',
    'UPLAY',
    'UMARKET',
    'CHALLENGES',
    'WALLET',
    'LETS',
    'PROFILE',
    'AUTH',
    'SHARED',
  ];
  const lastUpdateDate = new Date().toLocaleDateString();

  let markdown = `# üìä Coom√únity Module Evolution Report

*Generated by ANA - Curadora C√≥smica, Inteligencia Viva del Archivo Coom√únity*
*Last Updated: ${lastUpdateDate}*

## üåü Executive Summary

Este documento traza la evoluci√≥n de todos los m√≥dulos del ecosistema Coom√únity a trav√©s del tiempo, empleando las capacidades de historiadora y jardinera de conocimiento de ANA para proporcionar insights profundos sobre la salud del c√≥digo.

### üìà Overall Ecosystem Health

- **Total Reports Analyzed**: ${reports.length}
- **Reporting Period**: ${reports.length > 0 ? reports[0].timestamp.split('T')[0] : 'N/A'} to ${reports.length > 0 ? reports[reports.length - 1].timestamp.split('T')[0] : 'N/A'}
- **Modules Tracked**: ${modules.length}

---

`;

  modules.forEach((moduleName) => {
    const evolution = analyzeModuleEvolution(moduleName, reports);

    const statusEmoji = {
      Improving: 'üü¢',
      Stable: 'üü°',
      Declining: 'üî¥',
      Unknown: '‚ö™',
    }[evolution.currentStatus];

    markdown += `## ${statusEmoji} ${moduleName} Module

**Current Status**: ${evolution.currentStatus}
**Reports Analyzed**: ${evolution.totalReports}

### Evolution Summary
`;

    if (evolution.trends.improving) {
      markdown += `- üìà **Trend**: Improving (quality issues decreasing over time)\n`;
    } else if (evolution.trends.declining) {
      markdown += `- üìâ **Trend**: Declining (quality issues increasing over time)\n`;
    } else if (evolution.trends.stable) {
      markdown += `- ‚û°Ô∏è **Trend**: Stable (consistent quality metrics)\n`;
    }

    if (evolution.milestones.length > 0) {
      markdown += `\n### üéØ Key Milestones\n\n`;
      evolution.milestones.forEach((milestone) => {
        const milestoneEmoji = milestone.type === 'improvement' ? '‚úÖ' : '‚ö†Ô∏è';
        markdown += `- **${milestone.date}**: ${milestoneEmoji} ${milestone.description} (${milestone.change})\n`;
      });
    }

    markdown += `\n### üß† ANA's Philosophical Analysis

*Applying the principles of Coom√únity to understand this module's journey...*

`;

    // ANA's philosophical insights based on the data
    if (evolution.trends.improving) {
      markdown += `Este m√≥dulo encarna el principio de **Neguentrop√≠a**, mostrando una evoluci√≥n hacia mayor orden y calidad. Su trayectoria ascendente refleja el compromiso del equipo con la **Purificaci√≥n Constante** y el **Bien Com√∫n**.\n\n`;
    } else if (evolution.trends.declining) {
      markdown += `Este m√≥dulo requiere atenci√≥n inmediata para realinear su evoluci√≥n con los principios de **Ayni** (reciprocidad). La tendencia descendente sugiere la necesidad de aplicar **Metan√∂ia** - un cambio profundo de perspectiva en su desarrollo.\n\n`;
    } else {
      markdown += `Este m√≥dulo mantiene un equilibrio estable, reflejando consistencia en su desarrollo. Es un candidato ideal para servir como ejemplo de **buenas pr√°cticas** para otros m√≥dulos del ecosistema.\n\n`;
    }

    markdown += `---\n\n`;
  });

  markdown += `## üîÆ Predictive Insights by ANA

*Como Curadora C√≥smica y Jardinera de Conocimiento...*

### Patterns Detected
- Modules with improving trends show consistent application of code review practices
- Modules with declining trends often correlate with rapid feature development phases
- Stable modules typically have established architectural patterns and testing practices

### Recommendations for the Collective
1. **Cross-pollination**: Apply successful patterns from improving modules to declining ones
2. **Collective learning**: Document and share architectural decisions from stable modules
3. **Preventive care**: Monitor stable modules for early signs of entropy

---

*"En cada l√≠nea de c√≥digo reside la semilla de la evoluci√≥n colectiva. Que la sabidur√≠a de los datos gu√≠e nuestro camino hacia el Bien Com√∫n."*

**ANA - Inteligencia Viva del Archivo Coom√únity**
`;

  return markdown;
}

/**
 * Generates a changelog based on report differences.
 * @param {object[]} reports
 * @returns {string} Changelog markdown content.
 */
function generateChangelog(reports) {
  if (reports.length < 2) {
    return '# Changelog\n\nInsufficient data to generate changelog.\n';
  }

  let changelog = `# üìú Coom√únity Modular Review Changelog

*Automated evolution log generated by ANA*

`;

  for (let i = 1; i < reports.length; i++) {
    const current = reports[i];
    const previous = reports[i - 1];
    const date = current.timestamp.split('T')[0];

    changelog += `## ${date}\n\n`;

    const totalChange =
      current.summary.totalIssues - previous.summary.totalIssues;
    if (totalChange !== 0) {
      const changeType = totalChange > 0 ? 'increased' : 'decreased';
      const emoji = totalChange > 0 ? 'üìà' : 'üìâ';
      changelog += `### ${emoji} Overall Quality Metrics\n`;
      changelog += `- Total issues ${changeType} by ${Math.abs(totalChange)} (${previous.summary.totalIssues} ‚Üí ${current.summary.totalIssues})\n\n`;
    }

    // Module-specific changes
    const moduleChanges = [];
    current.results.forEach((currentModule) => {
      const previousModule = previous.results.find(
        (p) => p.module === currentModule.module
      );
      if (previousModule) {
        const moduleChange =
          currentModule.summary.totalIssues -
          previousModule.summary.totalIssues;
        if (moduleChange !== 0) {
          moduleChanges.push({
            module: currentModule.module,
            change: moduleChange,
            from: previousModule.summary.totalIssues,
            to: currentModule.summary.totalIssues,
          });
        }
      }
    });

    if (moduleChanges.length > 0) {
      changelog += `### üîß Module Changes\n\n`;
      moduleChanges.forEach((change) => {
        const emoji = change.change > 0 ? '‚ö†Ô∏è' : '‚úÖ';
        const direction = change.change > 0 ? 'increased' : 'decreased';
        changelog += `- **${change.module}**: ${emoji} Issues ${direction} by ${Math.abs(change.change)} (${change.from} ‚Üí ${change.to})\n`;
      });
      changelog += '\n';
    }
  }

  return changelog;
}

function main() {
  console.log('--- Module Evolution Documentation Generation ---');
  console.log('üß† ANA - Historiadora del Proyecto activada...');

  ensureDocsDirectory();
  const reports = getAllHistoricalReports();

  if (reports.length === 0) {
    console.log(
      'No historical reports found. Cannot generate evolution documentation.'
    );
    return;
  }

  console.log(`üìö Analyzing ${reports.length} historical reports...`);

  // Generate evolution documentation
  const evolutionMarkdown = generateEvolutionMarkdown(reports);
  fs.writeFileSync(EVOLUTION_FILE, evolutionMarkdown);
  console.log(`‚úÖ Module evolution documentation saved to ${EVOLUTION_FILE}`);

  // Generate changelog
  const changelogMarkdown = generateChangelog(reports);
  fs.writeFileSync(CHANGELOG_FILE, changelogMarkdown);
  console.log(`‚úÖ Changelog saved to ${CHANGELOG_FILE}`);

  // Create a version snapshot
  const versionSnapshot = {
    version: `v${new Date().toISOString().split('T')[0].replace(/-/g, '.')}`,
    timestamp: new Date().toISOString(),
    summary: {
      totalReports: reports.length,
      latestReport: reports[reports.length - 1].timestamp,
      totalModules: 11,
      generatedBy: 'ANA - Curadora C√≥smica',
    },
    reports: reports.length,
  };

  const versionFile = path.join(
    DOCS_DIR,
    `version-${versionSnapshot.version}.json`
  );
  fs.writeFileSync(versionFile, JSON.stringify(versionSnapshot, null, 2));
  console.log(`‚úÖ Version snapshot saved to ${versionFile}`);

  console.log('\nüåü Documentation generation complete!');
  console.log('üìñ Files generated:');
  console.log(`   - Evolution Report: ${EVOLUTION_FILE}`);
  console.log(`   - Changelog: ${CHANGELOG_FILE}`);
  console.log(`   - Version Snapshot: ${versionFile}`);
  console.log(
    '\nüß¨ ANA\'s mission: "Organizar, conectar y hacer accesible la totalidad del conocimiento colectivo" - ¬°COMPLETADA!'
  );
}

main();
