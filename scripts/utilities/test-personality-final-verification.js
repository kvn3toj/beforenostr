const { chromium } = require('playwright');

async function testPersonalityFinalVerification() {
  console.log('üéØ Verificaci√≥n final de funcionalidad de personalidades...\n');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1500 
  });
  
  const context = await browser.newContext();
  const page = await context.newPage();

  // Configurar listeners para capturar errores de consola
  page.on('console', msg => {
    if (msg.type() === 'error') {
      console.log('‚ùå Error de consola:', msg.text());
    }
  });

  page.on('pageerror', error => {
    console.log('‚ùå Error de p√°gina:', error.message);
  });

  try {
    // 1. Navegaci√≥n directa a personalidades
    console.log('üìã Navegando a p√°gina de personalidades...');
    await page.goto('http://localhost:3000/personalities');
    await page.waitForLoadState('networkidle');
    
    // Esperar un poco para que los componentes se carguen
    await page.waitForTimeout(3000);
    
    // Verificar URL
    const currentUrl = page.url();
    console.log(`üìç URL actual: ${currentUrl}`);
    
    if (!currentUrl.includes('/personalities')) {
      throw new Error('No se pudo navegar a la p√°gina de personalidades');
    }
    
    // 2. Verificar elementos b√°sicos de la p√°gina
    console.log('\nüîç Verificando elementos de la p√°gina...');
    
    // Buscar t√≠tulo de personalidades
    const hasTitle = await page.locator('text=Personalidades, text=MBTI').count() > 0;
    console.log(`üìÑ T√≠tulo encontrado: ${hasTitle ? '‚úÖ' : '‚ùå'}`);
    
    // Verificar que hay tarjetas en la p√°gina
    const cardCount = await page.locator('.MuiCard-root, [role="article"]').count();
    console.log(`üÉè Tarjetas detectadas: ${cardCount}`);
    
    // Verificar si hay un bot√≥n de asignar
    const hasAssignButton = await page.locator('button:has-text("Asignar"), button[aria-label*="asignar"]').count() > 0;
    console.log(`üîò Bot√≥n de asignar encontrado: ${hasAssignButton ? '‚úÖ' : '‚ùå'}`);
    
    // 3. Verificar datos de personalidades MBTI
    console.log('\nüé≠ Verificando personalidades MBTI...');
    
    const mbtiTypes = ['INTJ', 'INTP', 'ENTJ', 'ENTP', 'INFJ', 'INFP', 'ENFJ', 'ENFP', 
                       'ISTJ', 'ISFJ', 'ESTJ', 'ESFJ', 'ISTP', 'ISFP', 'ESTP', 'ESFP'];
    
    let foundTypes = [];
    for (const type of mbtiTypes) {
      const typeExists = await page.locator(`text=${type}`).count() > 0;
      if (typeExists) {
        foundTypes.push(type);
      }
    }
    
    console.log(`‚úÖ Tipos MBTI encontrados (${foundTypes.length}/16):`, foundTypes.slice(0, 8).join(', '), foundTypes.length > 8 ? '...' : '');
    
    // 4. Verificar elementos visuales espec√≠ficos
    console.log('\nüé® Verificando elementos visuales...');
    
    const avatarCount = await page.locator('.MuiAvatar-root').count();
    console.log(`üë§ Avatares: ${avatarCount}`);
    
    const chipCount = await page.locator('.MuiChip-root').count();
    console.log(`üè∑Ô∏è Chips: ${chipCount}`);
    
    const progressBarCount = await page.locator('.MuiLinearProgress-root').count();
    console.log(`üìä Barras de progreso: ${progressBarCount}`);
    
    // 5. Probar interacci√≥n con bot√≥n de asignar (si existe)
    if (hasAssignButton) {
      console.log('\nüé≠ Probando modal de asignaci√≥n...');
      
      try {
        // Buscar y hacer clic en el bot√≥n de asignar
        const assignButton = page.locator('button:has-text("Asignar")').first();
        await assignButton.click();
        
        // Esperar a que aparezca el modal
        await page.waitForSelector('[role="dialog"]', { timeout: 5000 });
        console.log('‚úÖ Modal de asignaci√≥n abierto');
        
        // Verificar contenido del modal
        const modalTitle = await page.textContent('[role="dialog"] h2, [role="dialog"] .MuiDialogTitle-root').catch(() => 'T√≠tulo no encontrado');
        console.log(`üìã T√≠tulo del modal: ${modalTitle}`);
        
        // Cerrar modal
        await page.click('button:has-text("Cancelar")');
        console.log('‚úÖ Modal cerrado');
        
      } catch (error) {
        console.log('‚ö†Ô∏è No se pudo probar el modal:', error.message);
      }
    }
    
    // 6. Captura de pantalla final
    console.log('\nüì∏ Capturando estado final...');
    await page.screenshot({ 
      path: `personality-final-verification-${Date.now()}.png`,
      fullPage: true 
    });
    console.log('‚úÖ Captura guardada');
    
    // 7. Resumen final
    console.log('\nüéâ VERIFICACI√ìN FINAL COMPLETADA');
    console.log('=' * 50);
    console.log(`‚úÖ P√°gina accesible: ${currentUrl.includes('/personalities')}`);
    console.log(`‚úÖ Elementos b√°sicos: ${hasTitle && cardCount > 0}`);
    console.log(`‚úÖ Personalidades MBTI: ${foundTypes.length}/16`);
    console.log(`‚úÖ Funcionalidad de asignaci√≥n: ${hasAssignButton}`);
    console.log(`‚úÖ Elementos visuales: ${avatarCount > 0 && chipCount > 0}`);
    
    if (foundTypes.length >= 8 && hasTitle && cardCount > 0) {
      console.log('\nüöÄ IMPLEMENTACI√ìN EXITOSA - La funcionalidad de personalidades est√° funcionando correctamente!');
    } else {
      console.log('\n‚ö†Ô∏è IMPLEMENTACI√ìN PARCIAL - Algunos elementos pueden necesitar ajustes');
    }

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
    
    // Capturar screenshot de error
    await page.screenshot({ 
      path: `personality-verification-error-${Date.now()}.png`,
      fullPage: true 
    });
    
    console.log('üì∏ Screenshot de error capturado');
  } finally {
    await browser.close();
  }
}

testPersonalityFinalVerification().catch(console.error); 