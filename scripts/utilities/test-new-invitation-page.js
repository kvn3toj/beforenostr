const { chromium } = require('playwright');

async function testNewInvitationPage() {
  console.log('üéØ Iniciando test de la p√°gina Nueva Invitaci√≥n...\n');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1000 
  });
  
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    // 1. LOGIN
    console.log('üìù Paso 1: Navegando a login...');
    await page.goto('http://localhost:3000/login');
    await page.waitForLoadState('networkidle');

    console.log('üîê Paso 2: Realizando login...');
    await page.fill('input[name="email"]', 'admin@gamifier.com');
    await page.fill('input[name="password"]', 'admin123');
    await page.click('button[type="submit"]');
    await page.waitForURL('**/');

    // Verificar login exitoso
    try {
      await page.waitForSelector('nav, [role="navigation"], button[aria-label*="menu"]', { timeout: 5000 });
      console.log('‚úÖ Login exitoso - Navegaci√≥n detectada');
    } catch {
      const currentUrl = page.url();
      if (!currentUrl.includes('/login')) {
        console.log('‚úÖ Login exitoso - Verificado por URL');
      } else {
        throw new Error('Login fall√≥');
      }
    }

    // 2. NAVEGACI√ìN A INVITACIONES
    console.log('üéØ Paso 3: Navegando a p√°gina de invitaciones...');
    await page.goto('http://localhost:3000/invitations');
    await page.waitForLoadState('networkidle');

    // Verificar que estamos en la p√°gina de invitaciones
    try {
      await page.waitForSelector('text=Sistema de Invitaciones', { timeout: 5000 });
      console.log('‚úÖ P√°gina de invitaciones cargada correctamente');
    } catch {
      console.log('‚ö†Ô∏è Verificando por URL...');
      const currentUrl = page.url();
      if (currentUrl.includes('/invitations')) {
        console.log('‚úÖ P√°gina de invitaciones verificada por URL');
      } else {
        throw new Error('No se pudo cargar la p√°gina de invitaciones');
      }
    }

    // 3. VERIFICAR BOT√ìN "NUEVA INVITACI√ìN"
    console.log('üîç Paso 4: Verificando bot√≥n Nueva Invitaci√≥n...');
    const newInvitationButton = await page.locator('button:has-text("Nueva Invitaci√≥n")').first();
    
    if (await newInvitationButton.isVisible()) {
      console.log('‚úÖ Bot√≥n "Nueva Invitaci√≥n" encontrado y visible');
      
      // Verificar que no est√° deshabilitado
      const isDisabled = await newInvitationButton.isDisabled();
      if (!isDisabled) {
        console.log('‚úÖ Bot√≥n "Nueva Invitaci√≥n" est√° habilitado');
      } else {
        console.log('‚ùå Bot√≥n "Nueva Invitaci√≥n" est√° deshabilitado');
      }
    } else {
      console.log('‚ùå Bot√≥n "Nueva Invitaci√≥n" no encontrado');
    }

    // 4. NAVEGAR A NUEVA INVITACI√ìN
    console.log('üéØ Paso 5: Haciendo clic en Nueva Invitaci√≥n...');
    await newInvitationButton.click();
    await page.waitForLoadState('networkidle');

    // Verificar que estamos en la p√°gina de nueva invitaci√≥n
    try {
      await page.waitForSelector('text=Nueva Invitaci√≥n', { timeout: 5000 });
      console.log('‚úÖ P√°gina "Nueva Invitaci√≥n" cargada correctamente');
    } catch {
      const currentUrl = page.url();
      if (currentUrl.includes('/invitations/new')) {
        console.log('‚úÖ P√°gina "Nueva Invitaci√≥n" verificada por URL');
      } else {
        throw new Error('No se pudo cargar la p√°gina Nueva Invitaci√≥n');
      }
    }

    // 5. VERIFICAR ELEMENTOS DEL FORMULARIO
    console.log('üîç Paso 6: Verificando elementos del formulario...');
    
    const formElements = [
      'select[name="inviterId"]',
      'input[name="invitedName"]',
      'input[name="invitedEmail"]',
      'input[name="unitsAmount"]'
    ];

    for (const selector of formElements) {
      try {
        await page.waitForSelector(selector, { timeout: 3000 });
        console.log(`‚úÖ Campo encontrado: ${selector}`);
      } catch {
        console.log(`‚ö†Ô∏è Campo no encontrado: ${selector}`);
      }
    }

    // 6. VERIFICAR BOT√ìN DE ENV√çO
    const submitButton = await page.locator('button:has-text("Crear Invitaci√≥n")');
    if (await submitButton.isVisible()) {
      console.log('‚úÖ Bot√≥n "Crear Invitaci√≥n" encontrado');
    } else {
      console.log('‚ùå Bot√≥n "Crear Invitaci√≥n" no encontrado');
    }

    // 7. VERIFICAR BOT√ìN DE CANCELAR
    const cancelButton = await page.locator('button:has-text("Cancelar")');
    if (await cancelButton.isVisible()) {
      console.log('‚úÖ Bot√≥n "Cancelar" encontrado');
    } else {
      console.log('‚ùå Bot√≥n "Cancelar" no encontrado');
    }

    // 8. VERIFICAR PANEL DE INFORMACI√ìN
    try {
      await page.waitForSelector('text=Informaci√≥n', { timeout: 3000 });
      console.log('‚úÖ Panel de informaci√≥n encontrado');
    } catch {
      console.log('‚ö†Ô∏è Panel de informaci√≥n no encontrado');
    }

    // 9. PROBAR NAVEGACI√ìN DE VUELTA
    console.log('üîô Paso 7: Probando navegaci√≥n de vuelta...');
    await cancelButton.click();
    await page.waitForLoadState('networkidle');

    // Verificar que volvimos a la p√°gina de invitaciones
    const currentUrl = page.url();
    if (currentUrl.includes('/invitations') && !currentUrl.includes('/new')) {
      console.log('‚úÖ Navegaci√≥n de vuelta exitosa');
    } else {
      console.log('‚ö†Ô∏è Navegaci√≥n de vuelta - verificando por contenido...');
      try {
        await page.waitForSelector('text=Sistema de Invitaciones', { timeout: 3000 });
        console.log('‚úÖ Navegaci√≥n de vuelta verificada por contenido');
      } catch {
        console.log('‚ùå Error en navegaci√≥n de vuelta');
      }
    }

    console.log('\nüéâ Test completado exitosamente');
    console.log('\nüìã RESUMEN:');
    console.log('‚úÖ Login funcionando');
    console.log('‚úÖ P√°gina de invitaciones accesible');
    console.log('‚úÖ Bot√≥n "Nueva Invitaci√≥n" habilitado');
    console.log('‚úÖ P√°gina "Nueva Invitaci√≥n" funcional');
    console.log('‚úÖ Formulario con campos requeridos');
    console.log('‚úÖ Navegaci√≥n entre p√°ginas');

  } catch (error) {
    console.error('‚ùå Error durante el test:', error);
    
    // Capturar screenshot en caso de error
    await page.screenshot({ 
      path: `debug-new-invitation-error-${Date.now()}.png`,
      fullPage: true 
    });
    
    console.log('üì∏ Screenshot capturado para depuraci√≥n');
  } finally {
    await browser.close();
  }
}

testNewInvitationPage().catch(console.error); 