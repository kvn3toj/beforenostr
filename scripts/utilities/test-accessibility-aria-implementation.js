const { chromium } = require('playwright');

async function testAccessibilityAria() {
  console.log('üß™ Iniciando test de mejoras de ARIA y Live Regions...\n');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1000
  });
  
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    // 1. LOGIN Y NAVEGACI√ìN
    console.log('üîê Realizando login...');
    await page.goto('http://localhost:3000/login');
    await page.waitForLoadState('networkidle');
    
    await page.fill('input[name="email"]', 'admin@gamifier.com');
    await page.fill('input[name="password"]', 'admin123');
    await page.click('button[type="submit"]');
    await page.waitForURL('**/');
    
    // Verificar login exitoso
    try {
      await page.waitForSelector('nav, [role="navigation"]', { timeout: 5000 });
      console.log('‚úÖ Login exitoso - Navegaci√≥n detectada');
    } catch {
      const currentUrl = page.url();
      if (!currentUrl.includes('/login')) {
        console.log('‚úÖ Login exitoso - Verificado por URL');
      } else {
        throw new Error('Login fall√≥');
      }
    }

    // 2. NAVEGAR A P√ÅGINA DE USUARIOS
    console.log('\nüìä Navegando a p√°gina de usuarios...');
    await page.click('text=Usuarios');
    await page.waitForURL('**/users');
    
    // Verificar que la p√°gina carg√≥
    try {
      await page.waitForSelector('text=Gesti√≥n de Usuarios', { timeout: 5000 });
      console.log('‚úÖ P√°gina de usuarios cargada');
    } catch {
      await page.waitForSelector('[role="main"]', { timeout: 5000 });
      console.log('‚úÖ P√°gina cargada (verificado por role)');
    }

    // 3. VERIFICAR LIVE REGIONS
    console.log('\nüîä Verificando Live Regions...');
    
    // Buscar live regions en el DOM
    const liveRegions = await page.locator('[aria-live]').count();
    console.log(`‚úÖ Live regions encontradas: ${liveRegions}`);
    
    if (liveRegions > 0) {
      console.log('‚úÖ Sistema de Live Regions implementado correctamente');
    } else {
      console.log('‚ö†Ô∏è No se encontraron Live Regions - verificar implementaci√≥n');
    }

    // 4. VERIFICAR ARIA-LABELS EN ICONBUTTONS
    console.log('\nüè∑Ô∏è Verificando aria-labels en IconButtons...');
    
    // Buscar IconButtons en la tabla de usuarios
    const iconButtons = await page.locator('button[aria-label*="Editar"], button[aria-label*="Eliminar"]').count();
    console.log(`‚úÖ IconButtons con aria-label encontrados: ${iconButtons}`);
    
    if (iconButtons > 0) {
      // Verificar contenido espec√≠fico de aria-label
      const editButton = await page.locator('button[aria-label*="Editar"]').first();
      if (await editButton.count() > 0) {
        const ariaLabel = await editButton.getAttribute('aria-label');
        console.log(`‚úÖ Aria-label de bot√≥n editar: "${ariaLabel}"`);
      }
    }

    // 5. VERIFICAR ESTRUCTURA DE TABLA CON ARIA
    console.log('\nüìã Verificando estructura ARIA de tabla...');
    
    // Verificar que la tabla tiene los atributos ARIA correctos
    const table = await page.locator('table[aria-label]').first();
    if (await table.count() > 0) {
      const ariaLabel = await table.getAttribute('aria-label');
      const ariaRowCount = await table.getAttribute('aria-rowcount');
      console.log(`‚úÖ Tabla con aria-label: "${ariaLabel}"`);
      console.log(`‚úÖ Tabla con aria-rowcount: ${ariaRowCount}`);
    }
    
    // Verificar headers con scope
    const scopedHeaders = await page.locator('th[scope="col"]').count();
    console.log(`‚úÖ Headers con scope="col": ${scopedHeaders}`);
    
    // Verificar aria-sort en columnas ordenables
    const sortableColumns = await page.locator('th[aria-sort]').count();
    console.log(`‚úÖ Columnas con aria-sort: ${sortableColumns}`);

    // 6. VERIFICAR TEXTFIELDS CON IDS AUTOM√ÅTICOS
    console.log('\nüìù Verificando TextFields con IDs autom√°ticos...');
    
    const textFields = await page.locator('input[aria-describedby]').count();
    console.log(`‚úÖ TextFields con aria-describedby: ${textFields}`);

    // 7. TEST DE NAVEGACI√ìN POR TECLADO
    console.log('\n‚å®Ô∏è Testeando navegaci√≥n por teclado...');
    
    // Enfocar primer bot√≥n y navegar con Tab
    await page.keyboard.press('Tab');
    let focusedElement = await page.evaluate(() => document.activeElement?.tagName);
    console.log(`‚úÖ Elemento enfocado: ${focusedElement}`);
    
    // Verificar que los estados de foco son visibles
    const focusStyles = await page.evaluate(() => {
      const focused = document.activeElement;
      if (focused) {
        const styles = window.getComputedStyle(focused);
        return {
          outline: styles.outline,
          boxShadow: styles.boxShadow
        };
      }
      return null;
    });
    
    if (focusStyles && (focusStyles.outline !== 'none' || focusStyles.boxShadow !== 'none')) {
      console.log('‚úÖ Estados de foco visibles detectados');
    } else {
      console.log('‚ö†Ô∏è Estados de foco podr√≠an no ser visibles');
    }

    // 8. CAPTURAR SCREENSHOT DE VERIFICACI√ìN
    console.log('\nüì∏ Capturando screenshot de verificaci√≥n...');
    await page.screenshot({ 
      path: `accessibility-aria-implementation-verification-${Date.now()}.png`,
      fullPage: true 
    });

    console.log('\nüéâ Test de mejoras de ARIA completado exitosamente!');
    console.log('\nüìä RESUMEN DE VERIFICACI√ìN:');
    console.log(`   üîä Live Regions: ${liveRegions > 0 ? '‚úÖ Implementadas' : '‚ùå No encontradas'}`);
    console.log(`   üè∑Ô∏è IconButtons con aria-label: ${iconButtons > 0 ? '‚úÖ Correcto' : '‚ùå Faltante'}`);
    console.log(`   üìã Tabla con ARIA: ${scopedHeaders > 0 ? '‚úÖ Implementada' : '‚ùå Incompleta'}`);
    console.log(`   üìù TextFields con aria-describedby: ${textFields > 0 ? '‚úÖ Correcto' : '‚ùå Faltante'}`);
    console.log(`   ‚å®Ô∏è Navegaci√≥n por teclado: ${focusStyles ? '‚úÖ Funcional' : '‚ö†Ô∏è Revisar'}`);

  } catch (error) {
    console.error('‚ùå Error durante el test:', error);
    await page.screenshot({ 
      path: `accessibility-test-error-${Date.now()}.png`,
      fullPage: true 
    });
  } finally {
    await browser.close();
  }
}

testAccessibilityAria().catch(console.error); 