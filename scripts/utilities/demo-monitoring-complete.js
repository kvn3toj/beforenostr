const fetch = require('node-fetch');

async function demoMonitoringComplete() {
  console.log('üéØ DEMOSTRACI√ìN COMPLETA DEL SISTEMA DE MONITOREO GAMIFIER\n');
  console.log('=' .repeat(60));

  try {
    // 1. Verificar estado de todos los servicios
    console.log('\n1Ô∏è‚É£ VERIFICANDO ESTADO DE SERVICIOS...\n');
    
    // Backend GAMIFIER
    console.log('üîç Verificando Backend GAMIFIER...');
    const healthResponse = await fetch('http://localhost:3002/health');
    const healthData = await healthResponse.json();
    console.log(`‚úÖ Backend GAMIFIER: ${healthData.message} (Puerto 3002)`);

    // Prometheus
    console.log('üîç Verificando Prometheus...');
    const prometheusResponse = await fetch('http://localhost:9090/-/healthy');
    if (prometheusResponse.ok) {
      console.log('‚úÖ Prometheus: Funcionando correctamente (Puerto 9090)');
    }

    // Grafana
    console.log('üîç Verificando Grafana...');
    const grafanaResponse = await fetch('http://localhost:3001/api/health');
    const grafanaData = await grafanaResponse.json();
    console.log(`‚úÖ Grafana: v${grafanaData.version} funcionando (Puerto 3001)`);

    // 2. Generar actividad para m√©tricas
    console.log('\n2Ô∏è‚É£ GENERANDO ACTIVIDAD PARA M√âTRICAS...\n');
    
    const endpoints = [
      '/health',
      '/metrics-test', 
      '/prometheus-metrics'
    ];

    for (let i = 0; i < 10; i++) {
      const endpoint = endpoints[i % endpoints.length];
      console.log(`üìä Generando request ${i + 1}/10: GET ${endpoint}`);
      
      try {
        await fetch(`http://localhost:3002${endpoint}`);
        console.log(`   ‚úÖ Request exitoso`);
      } catch (error) {
        console.log(`   ‚ùå Request fall√≥: ${error.message}`);
      }
      
      await new Promise(resolve => setTimeout(resolve, 300));
    }

    // 3. Mostrar m√©tricas actuales
    console.log('\n3Ô∏è‚É£ M√âTRICAS ACTUALES DEL SISTEMA...\n');
    
    const metricsResponse = await fetch('http://localhost:3002/prometheus-metrics');
    const metricsText = await metricsResponse.text();
    
    console.log(`üìà Total de m√©tricas generadas: ${metricsText.length} caracteres`);
    
    // Extraer m√©tricas espec√≠ficas
    const httpRequestsMatches = metricsText.match(/http_requests_total\{[^}]+\} (\d+)/g);
    const cacheOperationsMatches = metricsText.match(/cache_operations_total\{[^}]+\} (\d+)/g);
    const httpDurationMatches = metricsText.match(/http_request_duration_seconds_bucket/g);
    
    console.log('\nüìä RESUMEN DE M√âTRICAS:');
    console.log(`   üåê HTTP Requests registrados: ${httpRequestsMatches ? httpRequestsMatches.length : 0} tipos`);
    console.log(`   üíæ Cache Operations registradas: ${cacheOperationsMatches ? cacheOperationsMatches.length : 0} tipos`);
    console.log(`   ‚è±Ô∏è  HTTP Duration buckets: ${httpDurationMatches ? httpDurationMatches.length : 0} buckets`);

    // 4. Mostrar muestra de m√©tricas importantes
    console.log('\n4Ô∏è‚É£ MUESTRA DE M√âTRICAS IMPORTANTES...\n');
    
    const importantMetrics = metricsText.split('\n').filter(line => 
      line.includes('http_requests_total') || 
      line.includes('cache_operations_total') ||
      line.includes('cache_hit_ratio') ||
      line.includes('http_request_duration_seconds_count')
    ).slice(0, 10);

    importantMetrics.forEach(metric => {
      if (metric.trim()) {
        console.log(`üìä ${metric}`);
      }
    });

    // 5. Informaci√≥n de acceso a dashboards
    console.log('\n5Ô∏è‚É£ ACCESO A DASHBOARDS DE MONITOREO...\n');
    
    console.log('üéõÔ∏è  PROMETHEUS (M√©tricas y Queries):');
    console.log('   üìç URL: http://localhost:9090');
    console.log('   üîç Queries de ejemplo:');
    console.log('      ‚Ä¢ rate(http_requests_total[5m])');
    console.log('      ‚Ä¢ cache_hit_ratio');
    console.log('      ‚Ä¢ histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))');
    
    console.log('\nüìä GRAFANA (Dashboards Visuales):');
    console.log('   üìç URL: http://localhost:3001');
    console.log('   üîê Credenciales: admin / admin123');
    console.log('   üìà Dashboard: "GAMIFIER Backend Metrics"');
    
    console.log('\nüîó ENDPOINTS DE M√âTRICAS:');
    console.log('   üìç Backend Health: http://localhost:3002/health');
    console.log('   üìç M√©tricas Prometheus: http://localhost:3002/prometheus-metrics');
    console.log('   üìç Test de M√©tricas: http://localhost:3002/metrics-test');

    // 6. Verificar targets de Prometheus
    console.log('\n6Ô∏è‚É£ ESTADO DE TARGETS EN PROMETHEUS...\n');
    
    try {
      const targetsResponse = await fetch('http://localhost:9090/api/v1/targets');
      const targetsData = await targetsResponse.json();
      
      console.log('üéØ Targets configurados:');
      targetsData.data.activeTargets.forEach(target => {
        const status = target.health === 'up' ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${target.labels.job}: ${target.health}`);
        if (target.health === 'down' && target.lastError) {
          console.log(`      Error: ${target.lastError}`);
        }
      });
    } catch (error) {
      console.log('‚ùå No se pudo verificar targets de Prometheus');
    }

    // 7. Resumen final
    console.log('\n7Ô∏è‚É£ RESUMEN FINAL...\n');
    
    console.log('üéâ SISTEMA DE MONITOREO COMPLETAMENTE FUNCIONAL!');
    console.log('\n‚úÖ Componentes operativos:');
    console.log('   ‚Ä¢ Backend GAMIFIER con m√©tricas instrumentadas');
    console.log('   ‚Ä¢ Prometheus recolectando m√©tricas');
    console.log('   ‚Ä¢ Grafana con dashboards pre-configurados');
    console.log('   ‚Ä¢ M√©tricas de HTTP, Cache y Performance');
    
    console.log('\nüìã Pr√≥ximos pasos recomendados:');
    console.log('   1. Abrir Grafana en http://localhost:3001');
    console.log('   2. Explorar el dashboard "GAMIFIER Backend Metrics"');
    console.log('   3. Crear queries personalizadas en Prometheus');
    console.log('   4. Configurar alertas basadas en m√©tricas');
    
    console.log('\nüöÄ ¬°El sistema est√° listo para monitoreo en producci√≥n!');
    console.log('=' .repeat(60));

  } catch (error) {
    console.error('‚ùå Error en la demostraci√≥n:', error.message);
    console.log('\nüîß Verificar que todos los servicios est√©n corriendo:');
    console.log('   ‚Ä¢ Backend: npx tsx watch src/main.ts');
    console.log('   ‚Ä¢ Docker: docker-compose up -d prometheus grafana');
  }
}

demoMonitoringComplete().catch(console.error); 