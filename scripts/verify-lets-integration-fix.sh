#!/bin/bash

echo "üîç VERIFICACI√ìN DE INTEGRACI√ìN LETS - Coom√únity SuperApp"
echo "=========================================================="

# 1. Verificar que PostgreSQL est√© ejecut√°ndose
echo "1. üóÑÔ∏è Verificando PostgreSQL..."
POSTGRES_STATUS=$(brew services list | grep postgresql@15 | awk '{print $2}')
if [ "$POSTGRES_STATUS" != "started" ]; then
  echo "‚ùå ERROR: PostgreSQL no est√° ejecut√°ndose"
  exit 1
fi
echo "‚úÖ PostgreSQL ejecut√°ndose correctamente"

# 2. Verificar que el backend est√© respondiendo
echo "2. üîß Verificando Backend..."
BACKEND_HEALTH=$(curl -s http://localhost:1111/health | grep -o '"status":"ok"')
if [ -z "$BACKEND_HEALTH" ]; then
  echo "‚ùå ERROR: Backend no responde en puerto 3002"
  exit 1
fi
echo "‚úÖ Backend respondiendo correctamente"

# 3. Verificar que la SuperApp est√© respondiendo
echo "3. üåê Verificando SuperApp..."
SUPERAPP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:2222)
if [ "$SUPERAPP_STATUS" != "200" ]; then
  echo "‚ùå ERROR: SuperApp no responde en puerto 3001"
  exit 1
fi
echo "‚úÖ SuperApp respondiendo correctamente"

# 4. Verificar endpoint LETs con autenticaci√≥n
echo "4. üí∞ Verificando endpoints LETs..."
# Obtener token JWT
TOKEN_RESPONSE=$(curl -s -X POST "http://localhost:1111/auth/login" \
  -H "Content-Type: application/json" \
  -d '{"email": "admin@gamifier.com", "password": "admin123"}')

ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)

if [ -z "$ACCESS_TOKEN" ]; then
  echo "‚ùå ERROR: No se pudo obtener token de autenticaci√≥n"
  exit 1
fi

# Probar endpoint LETs ping
LETS_PING=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" http://localhost:1111/lets/ping | grep -o '"message":"LETS module is working"')
if [ -z "$LETS_PING" ]; then
  echo "‚ùå ERROR: Endpoint LETs ping no funciona"
  exit 1
fi

# Probar endpoint LETs history
LETS_HISTORY=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" http://localhost:1111/lets/history/00000000-0000-0000-0000-000000000001)
if [[ $LETS_HISTORY == *"error"* ]]; then
  echo "‚ùå ERROR: Endpoint LETs history retorna error"
  exit 1
fi

echo "‚úÖ Endpoints LETs funcionando correctamente"

# 5. Verificar que LetsModule est√© en AppModule
echo "5. üì¶ Verificando integraci√≥n LetsModule..."
LETS_MODULE_IMPORT=$(grep -c "import { LetsModule }" src/app.module.ts)
LETS_MODULE_USAGE=$(grep -c "LetsModule," src/app.module.ts)

if [ "$LETS_MODULE_IMPORT" -eq 0 ] || [ "$LETS_MODULE_USAGE" -eq 0 ]; then
  echo "‚ùå ERROR: LetsModule no est√° correctamente integrado en AppModule"
  exit 1
fi
echo "‚úÖ LetsModule correctamente integrado"

# 6. Verificar correcci√≥n en servicio frontend
echo "6. üîÑ Verificando correcci√≥n en servicio frontend..."
CORRECT_ENDPOINT=$(grep -c "/lets/history/" Demo/apps/superapp-unified/src/lib/lets-backend-service.ts)
if [ "$CORRECT_ENDPOINT" -eq 0 ]; then
  echo "‚ùå ERROR: Endpoint incorrecto en servicio frontend"
  exit 1
fi
echo "‚úÖ Servicio frontend corregido"

# 7. Verificar procesos limpios
echo "7. üßπ Verificando que no hay procesos m√∫ltiples..."
MULTIPLE_VITE=$(ps aux | grep -E "vite" | grep -v grep | wc -l)
if [ "$MULTIPLE_VITE" -gt 1 ]; then
  echo "‚ö†Ô∏è ADVERTENCIA: M√∫ltiples procesos Vite detectados ($MULTIPLE_VITE)"
fi

echo ""
echo "üéâ VERIFICACI√ìN COMPLETADA EXITOSAMENTE"
echo "========================================="
echo "‚úÖ PostgreSQL: Ejecut√°ndose"
echo "‚úÖ Backend NestJS: Puerto 3002 funcional"
echo "‚úÖ SuperApp: Puerto 3001 funcional"
echo "‚úÖ M√≥dulo LETs: Integrado y funcional"
echo "‚úÖ Endpoints LETs: Respondiendo correctamente"
echo "‚úÖ Servicio Frontend: Corregido"
echo ""
echo "üîß PROBLEMAS RESUELTOS:"
echo "‚Ä¢ Error 404 en /lets/transactions/user/* ‚Üí Corregido a /lets/history/*"
echo "‚Ä¢ LetsModule faltante en AppModule ‚Üí Agregado"
echo "‚Ä¢ Endpoints LETs no disponibles ‚Üí Ahora funcionan"
echo "‚Ä¢ Procesos m√∫ltiples ‚Üí Limpiados"
echo ""
echo "üö® NOTAS:"
echo "‚Ä¢ Las im√°genes de Unsplash pueden seguir dando 404 (es normal)"
echo "‚Ä¢ Los endpoints LETs requieren autenticaci√≥n JWT"
echo "‚Ä¢ El token del usuario en los logs es: 00000000-0000-0000-0000-000000000001" 