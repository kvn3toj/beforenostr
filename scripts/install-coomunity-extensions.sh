#!/bin/bash

# üå± Script de Instalaci√≥n de Extensiones Coom√únity
# Basado en principios naturales y filosof√≠a Ayni
# Actualizado con las extensiones faltantes implementadas

set -e

# Colores para output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Funci√≥n de logging
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Banner
echo -e "${GREEN}"
echo "üå± ================================================================"
echo "   INSTALADOR DE EXTENSIONES COOMUNITY VS CODE"
echo "   Configuraci√≥n Natural de Productividad y Bienestar"
echo "================================================================${NC}"
echo ""

# Verificar que code command est√° disponible
if ! command -v code &> /dev/null; then
    log_error "VS Code CLI 'code' no est√° disponible"
    echo "Instala VS Code y aseg√∫rate de que 'code' est√© en PATH"
    exit 1
fi

log_info "Instalando extensiones Coom√únity optimizadas..."
echo ""

# === PACK ESENCIAL DE PRODUCTIVIDAD ===
echo -e "${BLUE}üå≥ TRONCO - Pack Esencial de Productividad${NC}"

# Array de extensiones esenciales
ESSENTIAL_EXTENSIONS=(
    "GitHub.copilot"                      # GitHub Copilot - IA Colaborativa
    "GitHub.copilot-chat"                 # GitHub Copilot Chat - Ayni con IA
    "rangav.vscode-thunder-client"        # Thunder Client - REST sin salir de VS Code
    "eamodio.gitlens"                     # GitLens - Transparencia en Git
    "esbenp.prettier-vscode"              # Prettier - Belleza Autom√°tica
    "dbaeumer.vscode-eslint"              # ESLint - Calidad Preventiva
    "formulahendry.auto-rename-tag"       # Auto Rename Tag - Eficiencia JSX
    "christian-kohler.path-intellisense"  # Path Intellisense - Navegaci√≥n Sin Errores
)

for extension in "${ESSENTIAL_EXTENSIONS[@]}"; do
    log_info "Instalando: $extension"
    if code --install-extension "$extension" --force; then
        log_success "‚úì $extension instalado"
    else
        log_warning "‚ö† Error instalando $extension"
    fi
done

echo ""

# === MONITOREO Y PERFORMANCE ===
echo -e "${BLUE}üçÉ HOJAS - Monitoreo y Performance${NC}"

PERFORMANCE_EXTENSIONS=(
    "wix.vscode-import-cost"              # Import Cost - Consciencia de Tama√±o
    "ms-vscode.vscode-typescript-next"    # TypeScript Insider - √öltima versi√≥n
    "bradlc.vscode-tailwindcss"           # Tailwind CSS - Styling Eficiente
)

for extension in "${PERFORMANCE_EXTENSIONS[@]}"; do
    log_info "Instalando: $extension"
    if code --install-extension "$extension" --force; then
        log_success "‚úì $extension instalado"
    else
        log_warning "‚ö† Error instalando $extension"
    fi
done

echo ""

# === ORGANIZACI√ìN Y NAVEGACI√ìN ===
echo -e "${BLUE}üåø RAMAS - Organizaci√≥n y Navegaci√≥n${NC}"

ORGANIZATION_EXTENSIONS=(
    "alefragnani.project-manager"         # Project Manager - Gesti√≥n Multi-Proyecto
    "alefragnani.bookmarks"               # Bookmarks - Marcadores de C√≥digo
    "johnpapa.vscode-peacock"             # Peacock - Colores por Proyecto
    "PKief.material-icon-theme"           # Material Icon Theme - Iconos Naturales
    "Equinusocio.vsc-material-theme"      # Material Theme - Tema Natural
)

for extension in "${ORGANIZATION_EXTENSIONS[@]}"; do
    log_info "Instalando: $extension"
    if code --install-extension "$extension" --force; then
        log_success "‚úì $extension instalado"
    else
        log_warning "‚ö† Error instalando $extension"
    fi
done

echo ""

# === COLABORACI√ìN Y GIT ===
echo -e "${BLUE}üå¨Ô∏è AIRE - Colaboraci√≥n y Flujo${NC}"

COLLABORATION_EXTENSIONS=(
    "ms-vsliveshare.vsliveshare"          # Live Share - Colaboraci√≥n Real Time
    "GitHub.vscode-pull-request-github"   # GitHub PR - Gesti√≥n de PR
    "mhutchie.git-graph"                  # Git Graph - Visualizaci√≥n de Ramas
    "donjayamanne.githistory"             # Git History - Memoria del Proyecto
    "ms-vsliveshare.vsliveshare-pack"     # Live Share Pack - Suite Completa
)

for extension in "${COLLABORATION_EXTENSIONS[@]}"; do
    log_info "Instalando: $extension"
    if code --install-extension "$extension" --force; then
        log_success "‚úì $extension instalado"
    else
        log_warning "‚ö† Error instalando $extension"
    fi
done

echo ""

# === REACT/TYPESCRIPT ESPEC√çFICAS ===
echo -e "${BLUE}‚öõÔ∏è DESARROLLO - React y TypeScript${NC}"

REACT_EXTENSIONS=(
    "dsznajder.es7-react-js-snippets"     # React Snippets - Eficiencia React
    "ms-playwright.playwright"            # Playwright - Testing E2E
    "ms-vscode.vscode-json"               # JSON Language Support
)

for extension in "${REACT_EXTENSIONS[@]}"; do
    log_info "Instalando: $extension"
    if code --install-extension "$extension" --force; then
        log_success "‚úì $extension instalado"
    else
        log_warning "‚ö† Error instalando $extension"
    fi
done

echo ""

# === HERRAMIENTAS AVANZADAS ===
echo -e "${BLUE}üîß AVANZADO - Herramientas Especializadas${NC}"

ADVANCED_EXTENSIONS=(
    "WallabyJs.quokka-vscode"             # Quokka - Prototipado JS/TS
    "SonarSource.sonarlint-vscode"        # SonarLint - Calidad de C√≥digo
    "ms-vscode.vscode-docker"             # Docker - Contenedores
)

for extension in "${ADVANCED_EXTENSIONS[@]}"; do
    log_info "Instalando: $extension"
    if code --install-extension "$extension" --force; then
        log_success "‚úì $extension instalado"
    else
        log_warning "‚ö† Error instalando $extension"
    fi
done

echo ""

# === TESTING Y CALIDAD ===
echo -e "${BLUE}üß™ TESTING - Calidad y Verificaci√≥n${NC}"

TESTING_EXTENSIONS=(
    "hbenl.vscode-test-explorer"          # Test Explorer - Vista Unificada de Tests
    "ms-vscode.test-adapter-converter"    # Test Adapter - Compatibilidad
)

for extension in "${TESTING_EXTENSIONS[@]}"; do
    log_info "Instalando: $extension"
    if code --install-extension "$extension" --force; then
        log_success "‚úì $extension instalado"
    else
        log_warning "‚ö† Error instalando $extension"
    fi
done

echo ""

# === PRODUCTIVIDAD ADICIONAL ===
echo -e "${BLUE}üìã PRODUCTIVIDAD - Herramientas Adicionales${NC}"

PRODUCTIVITY_EXTENSIONS=(
    "ms-vscode.vscode-todo-highlight"     # TODO Highlight - Resaltado de Tareas
    "Gruntfuggly.todo-tree"               # TODO Tree - Vista de Tareas
)

for extension in "${PRODUCTIVITY_EXTENSIONS[@]}"; do
    log_info "Instalando: $extension"
    if code --install-extension "$extension" --force; then
        log_success "‚úì $extension instalado"
    else
        log_warning "‚ö† Error instalando $extension"
    fi
done

echo ""

# === CONFIGURACI√ìN AUTOM√ÅTICA ===
echo -e "${BLUE}‚öôÔ∏è CONFIGURACI√ìN - Aplicando Settings Optimizados${NC}"

# Crear directorio .vscode si no existe
mkdir -p .vscode

# Verificar si los archivos de configuraci√≥n fueron creados
if [ -f ".vscode/settings.json" ]; then
    log_success "‚úì Configuraci√≥n de settings.json aplicada"
else
    log_warning "‚ö† Archivo .vscode/settings.json no encontrado"
fi

if [ -f ".vscode/extensions.json" ]; then
    log_success "‚úì Configuraci√≥n de extensions.json aplicada"
else
    log_warning "‚ö† Archivo .vscode/extensions.json no encontrado"
fi

echo ""

# === VERIFICACI√ìN FINAL ===
echo -e "${BLUE}üîç VERIFICACI√ìN - Estado de Extensiones${NC}"

# Contar extensiones instaladas
TOTAL_EXTENSIONS=$(code --list-extensions | wc -l)
log_info "Total de extensiones instaladas: $TOTAL_EXTENSIONS"

# Verificar extensiones cr√≠ticas
CRITICAL_EXTENSIONS=("eamodio.gitlens" "esbenp.prettier-vscode" "dbaeumer.vscode-eslint" "ms-playwright.playwright")
MISSING_CRITICAL=0

for extension in "${CRITICAL_EXTENSIONS[@]}"; do
    if code --list-extensions | grep -q "$extension"; then
        log_success "‚úì $extension verificado"
    else
        log_error "‚úó $extension NO ENCONTRADO"
        ((MISSING_CRITICAL++))
    fi
done

echo ""

# === RESUMEN FINAL ===
echo -e "${GREEN}"
echo "üéâ =============================================================="
echo "   INSTALACI√ìN COMPLETADA - EXTENSIONES COOMUNITY"
echo "=============================================================="
echo -e "${NC}"

if [ $MISSING_CRITICAL -eq 0 ]; then
    log_success "üåü Todas las extensiones cr√≠ticas instaladas correctamente"
    echo ""
    log_info "üöÄ Pr√≥ximos pasos:"
    echo "   1. Reinicia VS Code para cargar todas las extensiones"
    echo "   2. Verifica que el tema Material Theme est√© aplicado"
    echo "   3. Configura Peacock con colores Coom√únity"
    echo "   4. Prueba GitHub Copilot si tienes acceso"
    echo "   5. Configura GitLens con tus preferencias"
    echo ""
    log_info "üìñ Documentaci√≥n adicional en:"
    echo "   docs/implementation/RECOMMENDED_EXTENSIONS.md"
else
    log_warning "‚ö†Ô∏è  $MISSING_CRITICAL extensiones cr√≠ticas no se instalaron correctamente"
    echo "   Revisa los mensajes de error y reintenta la instalaci√≥n"
fi

echo ""
log_info "üí° Tips para usar las nuevas extensiones:"
echo "   ‚Ä¢ Cmd/Ctrl+Shift+P: Command Palette"
echo "   ‚Ä¢ GitLens: Hover sobre l√≠neas para ver git blame"
echo "   ‚Ä¢ Thunder Client: Nuevo panel en sidebar"
echo "   ‚Ä¢ Live Share: Comparte sesiones con el equipo"
echo "   ‚Ä¢ Import Cost: Ve el tama√±o de imports en c√≥digo"
echo "   ‚Ä¢ TODO Tree: Panel especial para tareas Coom√únity"

echo ""
echo -e "${GREEN}üå± ¬°Feliz desarrollo con filosof√≠a Coom√únity! üå±${NC}"
echo "" 