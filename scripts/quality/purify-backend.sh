#!/bin/bash

# üé≠ SCRIPT DE PURIFICACI√ìN DE CALIDAD - BACKEND COOMUNITY
# Parte de la Sinfon√≠a de la Calidad Modular
# Filosof√≠a SAGE: Purificaci√≥n sistem√°tica del c√≥digo

set -e

echo "üéº INICIANDO SINFON√çA DE PURIFICACI√ìN DE CALIDAD"
echo "================================================"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar estad√≠sticas
show_stats() {
    local title="$1"
    local errors="$2"
    local warnings="$3"

    echo -e "${BLUE}üìä ${title}${NC}"
    echo -e "   üî¥ Errores: ${RED}${errors}${NC}"
    echo -e "   üü° Warnings: ${YELLOW}${warnings}${NC}"
    echo "   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
}

# Verificar que estamos en la ra√≠z del proyecto
if [ ! -f "eslint.config.cjs" ]; then
    echo -e "${RED}‚ùå Error: Ejecutar desde la ra√≠z del monorepo${NC}"
    exit 1
fi

echo -e "${BLUE}üéØ Objetivo: Backend NestJS (backend/src)${NC}"
echo ""

# PASO 1: Purificaci√≥n autom√°tica
echo -e "${GREEN}üîß PASO 1: Purificaci√≥n autom√°tica...${NC}"
npx eslint backend/src --fix --quiet || true
echo -e "${GREEN}‚úÖ Purificaci√≥n autom√°tica completada${NC}"
echo ""

# PASO 2: An√°lisis completo con m√©tricas
echo -e "${GREEN}üìä PASO 2: An√°lisis de calidad completo...${NC}"

# Crear directorio de reportes si no existe
mkdir -p logs/quality

# Generar reporte completo
REPORT_FILE="logs/quality/backend-quality-report-$(date +%Y%m%d_%H%M%S).txt"
echo "Generando reporte en: $REPORT_FILE"

{
    echo "üéº REPORTE DE CALIDAD - BACKEND COOMUNITY"
    echo "========================================"
    echo "Fecha: $(date)"
    echo "Configuraci√≥n: Sinfon√≠a de Calidad Modular"
    echo ""

    echo "üìä AN√ÅLISIS COMPLETO:"
    echo "===================="
    npx eslint backend/src --format=stylish 2>&1 || true

    echo ""
    echo "üìã RESUMEN POR CATEGOR√çAS:"
    echo "========================="

    echo ""
    echo "üî¥ ERRORES CR√çTICOS (no-explicit-any):"
    npx eslint backend/src --format=unix 2>/dev/null | grep "no-explicit-any" | wc -l || echo "0"

    echo ""
    echo "üî¥ VARIABLES NO UTILIZADAS:"
    npx eslint backend/src --format=unix 2>/dev/null | grep "no-unused-vars" | wc -l || echo "0"

    echo ""
    echo "üü° CONSOLE STATEMENTS:"
    npx eslint backend/src --format=unix 2>/dev/null | grep "no-console" | wc -l || echo "0"

} > "$REPORT_FILE"

# PASO 3: Mostrar resumen en consola
echo -e "${GREEN}üìà PASO 3: Resumen ejecutivo...${NC}"

# Contar errores y warnings
TOTAL_OUTPUT=$(npx eslint backend/src 2>&1 || true)
ERRORS=$(echo "$TOTAL_OUTPUT" | grep -o "[0-9]\+ error" | grep -o "[0-9]\+" | head -1 || echo "0")
WARNINGS=$(echo "$TOTAL_OUTPUT" | grep -o "[0-9]\+ warning" | grep -o "[0-9]\+" | head -1 || echo "0")

# Estad√≠sticas espec√≠ficas
ANY_ERRORS=$(npx eslint backend/src --format=unix 2>/dev/null | grep -c "no-explicit-any" || echo "0")
UNUSED_VARS=$(npx eslint backend/src --format=unix 2>/dev/null | grep -c "no-unused-vars" || echo "0")
CONSOLE_WARNS=$(npx eslint backend/src --format=unix 2>/dev/null | grep -c "no-console" || echo "0")

echo ""
show_stats "ESTADO GENERAL" "$ERRORS" "$WARNINGS"
echo ""
show_stats "ERRORES CR√çTICOS" "$ANY_ERRORS tipos any" "$UNUSED_VARS vars no usadas"
echo ""
show_stats "WARNINGS DE DESARROLLO" "$CONSOLE_WARNS console.log" "0 otros"

# PASO 4: Recomendaciones
echo ""
echo -e "${BLUE}üéØ RECOMENDACIONES SAGE:${NC}"
echo "========================"

if [ "$ERRORS" -gt 0 ]; then
    echo -e "${RED}üî¥ Acci√≥n requerida: $ERRORS errores cr√≠ticos${NC}"
    echo "   ‚Ä¢ Priorizar: tipos 'any' ‚Üí interfaces espec√≠ficas"
    echo "   ‚Ä¢ Limpiar: variables no utilizadas"
    echo "   ‚Ä¢ Revisar: try/catch innecesarios"
else
    echo -e "${GREEN}‚úÖ ¬°Excelente! Sin errores cr√≠ticos${NC}"
fi

if [ "$WARNINGS" -gt 100 ]; then
    echo -e "${YELLOW}üü° Optimizaci√≥n sugerida: $WARNINGS warnings${NC}"
    echo "   ‚Ä¢ Considerar: remover console.log en producci√≥n"
    echo "   ‚Ä¢ Mantener: logs de debugging importantes"
else
    echo -e "${GREEN}‚úÖ Warnings bajo control${NC}"
fi

echo ""
echo -e "${GREEN}üìÅ Reporte detallado guardado en:${NC} $REPORT_FILE"
echo ""
echo -e "${BLUE}üéº SINFON√çA DE PURIFICACI√ìN COMPLETADA${NC}"
echo "======================================="
