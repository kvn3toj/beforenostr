#!/bin/bash
echo "üîç AN√ÅLISIS DE DATOS MOCK QUE BLOQUEAN VISUALIZACI√ìN DE CAMBIOS - SUPERAPP COOMUNITY"
echo "=============================================================================="
echo ""

# Directorio de la SuperApp
SUPERAPP_DIR="Demo/apps/superapp-unified/src"

# Funci√≥n para analizar archivos mock
analyze_mock_files() {
    local module_name=$1
    local search_path=$2
    
    echo "üìÇ M√ìDULO: $module_name"
    echo "   Ruta: $search_path"
    echo ""
    
    # Buscar archivos con contenido mock
    mock_files=$(find "$search_path" -name "*.ts" -o -name "*.tsx" 2>/dev/null | xargs grep -l "mock\|Mock\|MOCK\|hardcoded\|fallback" 2>/dev/null)
    
    if [ -n "$mock_files" ]; then
        echo "   ‚ö†Ô∏è  ARCHIVOS CON DATOS MOCK DETECTADOS:"
        for file in $mock_files; do
            echo "      üìÑ $(basename $file)"
            # Contar l√≠neas con mock
            mock_lines=$(grep -c "mock\|Mock\|MOCK\|hardcoded\|fallback" "$file" 2>/dev/null || echo "0")
            echo "         L√≠neas mock: $mock_lines"
            
            # Mostrar algunos patrones espec√≠ficos
            if grep -q "getMockQuestions\|useMockData\|simulateData" "$file" 2>/dev/null; then
                echo "         üö® PATR√ìN CR√çTICO: Funciones mock de datos"
            fi
            if grep -q "mockCategories\|MOCK_ROOMS\|mockQuestions" "$file" 2>/dev/null; then
                echo "         üö® PATR√ìN CR√çTICO: Variables mock constantes"
            fi
            if grep -q "fallbackData\|VITE_ENABLE_MOCK" "$file" 2>/dev/null; then
                echo "         üö® PATR√ìN CR√çTICO: L√≥gica de bypass"
            fi
        done
        echo ""
    else
        echo "   ‚úÖ Sin archivos mock detectados"
        echo ""
    fi
}

echo "üéØ AN√ÅLISIS POR M√ìDULO PRINCIPAL:"
echo ""

# Analizar cada m√≥dulo
analyze_mock_files "√úPLAY" "$SUPERAPP_DIR/components/modules/uplay"
analyze_mock_files "MARKETPLACE" "$SUPERAPP_DIR/components/modules/marketplace" 
analyze_mock_files "LETS" "$SUPERAPP_DIR/components/modules/lets"
analyze_mock_files "SOCIAL" "$SUPERAPP_DIR/components/modules/social"
analyze_mock_files "USTATS" "$SUPERAPP_DIR/components/modules/ustats"
analyze_mock_files "CHALLENGES" "$SUPERAPP_DIR/components/modules/challenges"
analyze_mock_files "WALLET" "$SUPERAPP_DIR/components/modules/wallet"

echo "üîß AN√ÅLISIS DE ARCHIVOS DE DATOS Y SERVICIOS:"
echo ""
analyze_mock_files "DATA FILES" "$SUPERAPP_DIR/data"
analyze_mock_files "SERVICES" "$SUPERAPP_DIR/services"
analyze_mock_files "HOOKS" "$SUPERAPP_DIR/hooks"
analyze_mock_files "STORES" "$SUPERAPP_DIR/stores"
analyze_mock_files "LIB" "$SUPERAPP_DIR/lib"

echo "üìã P√ÅGINAS CON DATOS MOCK:"
echo ""
analyze_mock_files "PAGES" "$SUPERAPP_DIR/pages"

echo ""
echo "üéØ RESUMEN DE ARCHIVOS CR√çTICOS IDENTIFICADOS:"
echo "=============================================="

# Buscar archivos espec√≠ficos problem√°ticos
echo ""
echo "üìÑ ARCHIVOS DE DATOS MOCK PRINCIPALES:"
find $SUPERAPP_DIR -name "*mock*" -type f 2>/dev/null | while read file; do
    echo "   üî∏ $(basename $file) -> $file"
done

echo ""
echo "üìÑ ARCHIVOS CON PATRONES CR√çTICOS:"
grep -r "marketplaceMockData\|letsMockService\|MOCK_ROOMS\|getMockQuestions" $SUPERAPP_DIR --include="*.ts" --include="*.tsx" -l 2>/dev/null | while read file; do
    echo "   üö® $(basename $file) -> $file"
done

echo ""
echo "üîç AN√ÅLISIS COMPLETADO - BACKGROUND AGENT PUEDE PROCESAR ESTOS RESULTADOS" 