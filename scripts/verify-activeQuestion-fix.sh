#!/bin/bash

echo "üîç VERIFICACI√ìN: activeQuestion.options.map - Correcci√≥n ID: 4ea202b21d6643c68ceea6512bad7251"
echo "=================================================================================="

# Funci√≥n para verificar arquitectura de puertos
check_services() {
    echo "üìã 1. VERIFICACI√ìN DE SERVICIOS"
    echo "------------------------------"
    
    # SuperApp
    SUPERAPP_STATUS=$(curl -s -I http://localhost:3001 | head -1 | grep "200 OK" || echo "‚ùå No disponible")
    if [[ "$SUPERAPP_STATUS" =~ "200 OK" ]]; then
        echo "‚úÖ SuperApp (puerto 3001): Operacional"
    else
        echo "‚ö†Ô∏è SuperApp (puerto 3001): No disponible"
        echo "   üí° Ejecuta: npm run dev:superapp"
    fi
    
    # Backend
    BACKEND_STATUS=$(curl -s http://localhost:3002/health 2>/dev/null | grep "ok" || echo "‚ùå No disponible")
    if [[ "$BACKEND_STATUS" =~ "ok" ]]; then
        echo "‚úÖ Backend (puerto 3002): Operacional"
    else
        echo "‚ö†Ô∏è Backend (puerto 3002): No disponible"
        echo "   üí° Ejecuta: npm run dev:backend"
    fi
    
    echo ""
}

# Funci√≥n para verificar correcci√≥n espec√≠fica
check_activeQuestion_fix() {
    echo "üìã 2. VERIFICACI√ìN DE CORRECCI√ìN: activeQuestion.options.map"
    echo "------------------------------------------------------------"
    
    # Buscar instancias sin optional chaining (problema original)
    UNSAFE_INSTANCES=$(grep -r "activeQuestion\.options\.map" Demo/apps/superapp-unified/src --include="*.tsx" --include="*.ts" 2>/dev/null || echo "")
    
    if [ -z "$UNSAFE_INSTANCES" ]; then
        echo "‚úÖ NO se encontraron instancias problem√°ticas de 'activeQuestion.options.map'"
    else
        echo "‚ùå ENCONTRADAS instancias problem√°ticas:"
        echo "$UNSAFE_INSTANCES"
        echo ""
        echo "üîß SOLUCI√ìN REQUERIDA: Cambiar 'activeQuestion.options.map' por '(activeQuestion?.options || []).map'"
        return 1
    fi
    
    # Buscar instancias corregidas (con optional chaining)
    SAFE_INSTANCES=$(grep -r "activeQuestion\?\.options || \[\]" Demo/apps/superapp-unified/src --include="*.tsx" --include="*.ts" 2>/dev/null | wc -l)
    
    if [ "$SAFE_INSTANCES" -gt 0 ]; then
        echo "‚úÖ ENCONTRADAS $SAFE_INSTANCES instancias corregidas con optional chaining"
        echo "   Patr√≥n aplicado: (activeQuestion?.options || []).map()"
    else
        echo "‚ö†Ô∏è No se encontraron instancias del patr√≥n corregido"
        echo "   Esto podr√≠a indicar que no hay componentes que usen activeQuestion.options"
    fi
    
    echo ""
}

# Funci√≥n para verificar archivos espec√≠ficos mencionados en el error
check_specific_files() {
    echo "üìã 3. VERIFICACI√ìN DE ARCHIVOS ESPEC√çFICOS"
    echo "------------------------------------------"
    
    FILES=(
        "Demo/apps/superapp-unified/src/components/modules/uplay/components/InteractiveVideoPlayerOverlay.tsx"
        "Demo/apps/superapp-unified/src/components/modules/uplay/UnifiedUPlayPlayer.tsx"
        "Demo/apps/superapp-unified/src/components/modules/uplay/components/EnhancedInteractiveVideoPlayer.tsx"
    )
    
    for FILE in "${FILES[@]}"; do
        if [ -f "$FILE" ]; then
            echo "üìÑ Verificando: $(basename "$FILE")"
            
            # Verificar que no tenga el patr√≥n problem√°tico
            PROBLEMATIC=$(grep -n "activeQuestion\.options\.map" "$FILE" 2>/dev/null || echo "")
            if [ -z "$PROBLEMATIC" ]; then
                echo "   ‚úÖ Sin accesos inseguros a activeQuestion.options.map"
            else
                echo "   ‚ùå ENCONTRADO acceso inseguro en l√≠nea:"
                echo "   $PROBLEMATIC"
            fi
            
            # Verificar que tenga el patr√≥n corregido (opcional, puede no tenerlo si no usa preguntas)
            CORRECTED=$(grep -n "activeQuestion\?\.options || \[\]" "$FILE" 2>/dev/null || echo "")
            if [ -n "$CORRECTED" ]; then
                echo "   ‚úÖ Patr√≥n corregido encontrado:"
                echo "   $(echo "$CORRECTED" | head -1)"
            fi
            
        else
            echo "‚ö†Ô∏è Archivo no encontrado: $FILE"
        fi
        echo ""
    done
}

# Funci√≥n para verificar otros problemas potenciales relacionados
check_related_issues() {
    echo "üìã 4. VERIFICACI√ìN DE PROBLEMAS RELACIONADOS"
    echo "--------------------------------------------"
    
    # Verificar accesos directos a activeQuestion sin validaci√≥n
    DIRECT_ACCESS=$(grep -r "activeQuestion\.[^?]" Demo/apps/superapp-unified/src --include="*.tsx" --include="*.ts" 2>/dev/null | grep -v "activeQuestion\.id" | grep -v "activeQuestion\.reward &&" | wc -l)
    
    if [ "$DIRECT_ACCESS" -gt 0 ]; then
        echo "‚ö†Ô∏è ENCONTRADOS $DIRECT_ACCESS accesos directos a propiedades de activeQuestion"
        echo "   Revisar si necesitan optional chaining o est√°n dentro de condicionales"
    else
        echo "‚úÖ Todos los accesos a activeQuestion parecen seguros"
    fi
    
    # Verificar si hay otros .map() que podr√≠an tener problemas similares
    POTENTIAL_MAPS=$(grep -r "\.options\.map" Demo/apps/superapp-unified/src --include="*.tsx" --include="*.ts" 2>/dev/null | grep -v "activeQuestion" | wc -l)
    
    if [ "$POTENTIAL_MAPS" -gt 0 ]; then
        echo "‚ÑπÔ∏è ENCONTRADOS $POTENTIAL_MAPS otros usos de '.options.map()' (revisar manualmente)"
    else
        echo "‚úÖ No se encontraron otros usos potencialmente problem√°ticos de '.options.map()'"
    fi
    
    echo ""
}

# Funci√≥n para mostrar resumen de la correcci√≥n
show_solution_summary() {
    echo "üìã 5. RESUMEN DE LA CORRECCI√ìN APLICADA"
    echo "======================================="
    echo ""
    echo "üêõ PROBLEMA ORIGINAL:"
    echo "   TypeError: undefined is not an object (evaluating 'activeQuestion.options.map')"
    echo "   ID del Error: 4ea202b21d6643c68ceea6512bad7251"
    echo "   L√≠nea: InteractiveVideoPlayerOverlay.tsx:1009"
    echo ""
    echo "üîß SOLUCI√ìN APLICADA:"
    echo "   ANTES: activeQuestion.options.map((option) => ("
    echo "   DESPU√âS: (activeQuestion?.options || []).map((option) => ("
    echo ""
    echo "‚ú® BENEFICIOS:"
    echo "   ‚úÖ Manejo defensivo de datos undefined/null"
    echo "   ‚úÖ Fallback seguro con array vac√≠o []"
    echo "   ‚úÖ Compatible con datos mock y del backend real"
    echo "   ‚úÖ Previene crashes del componente"
    echo ""
    echo "üìÅ ARCHIVOS CORREGIDOS:"
    echo "   ‚Ä¢ InteractiveVideoPlayerOverlay.tsx"
    echo "   ‚Ä¢ UnifiedUPlayPlayer.tsx"
    echo "   ‚Ä¢ EnhancedInteractiveVideoPlayer.tsx"
    echo ""
}

# Ejecutar todas las verificaciones
main() {
    check_services
    check_activeQuestion_fix
    check_specific_files
    check_related_issues
    show_solution_summary
    
    echo "üéØ ESTADO FINAL:"
    echo "==============="
    
    # Contar errores encontrados
    ERROR_COUNT=0
    
    # Verificar si quedan instancias problem√°ticas
    REMAINING_ISSUES=$(grep -r "activeQuestion\.options\.map" Demo/apps/superapp-unified/src --include="*.tsx" --include="*.ts" 2>/dev/null | wc -l)
    
    if [ "$REMAINING_ISSUES" -eq 0 ]; then
        echo "‚úÖ CORRECCI√ìN EXITOSA: Todas las instancias problem√°ticas fueron corregidas"
        echo "‚úÖ El error ID: 4ea202b21d6643c68ceea6512bad7251 deber√≠a estar resuelto"
        echo "‚úÖ Los componentes √úPlay ahora manejan correctamente datos indefinidos"
        echo ""
        echo "üöÄ PR√ìXIMOS PASOS:"
        echo "   1. Refrescar la p√°gina en el navegador"
        echo "   2. Navegar a la secci√≥n √úPlay"
        echo "   3. Verificar que las preguntas interactivas funcionan correctamente"
        echo "   4. Confirmar que no hay errores en la consola del navegador"
    else
        echo "‚ùå CORRECCI√ìN INCOMPLETA: Quedan $REMAINING_ISSUES instancias problem√°ticas"
        ERROR_COUNT=$((ERROR_COUNT + REMAINING_ISSUES))
    fi
    
    return $ERROR_COUNT
}

# Ejecutar script principal
main
exit_code=$?

if [ $exit_code -eq 0 ]; then
    echo ""
    echo "üèÜ VERIFICACI√ìN COMPLETADA CON √âXITO"
else
    echo ""
    echo "‚ö†Ô∏è VERIFICACI√ìN COMPLETADA CON $exit_code ISSUES PENDIENTES"
fi

exit $exit_code 