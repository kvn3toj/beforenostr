#!/bin/bash

# üîç SCRIPT DE VERIFICACI√ìN: MIGRACI√ìN HOME A DATOS REALES DEL BACKEND
# Verifica que el m√≥dulo Home ya no usa datos hardcodeados y est√° integrado con el backend

echo "üîç VERIFICACI√ìN: MIGRACI√ìN M√ìDULO HOME A DATOS DIN√ÅMICOS"
echo "================================================================="

# Contadores
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Funci√≥n para verificar
check_condition() {
    local description="$1"
    local condition="$2"
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if eval "$condition"; then
        echo "‚úÖ $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo "‚ùå $description"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
}

echo ""
echo "üìÅ VERIFICANDO ESTRUCTURA DE HOOKS..."

# 1. Verificar que los hooks existen
check_condition "Hook useAyniMetrics.ts creado" \
    "[ -f 'Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts' ]"

check_condition "Hook useElementalConfig.ts creado" \
    "[ -f 'Demo/apps/superapp-unified/src/hooks/home/useElementalConfig.ts' ]"

check_condition "Archivo √≠ndice actualizado" \
    "[ -f 'Demo/apps/superapp-unified/src/hooks/home/index.ts' ]"

echo ""
echo "üîç VERIFICANDO CONTENIDO DE HOOKS..."

# 2. Verificar contenido de useAyniMetrics
if [ -f "Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts" ]; then
    check_condition "useAyniMetrics usa React Query" \
        "grep -q 'useQuery' Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts"
    
    check_condition "useAyniMetrics tiene endpoint del backend" \
        "grep -q 'apiService.get' Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts"
    
    check_condition "useAyniMetrics tiene datos por defecto realistas" \
        "grep -q 'DEFAULT_AYNI_METRICS' Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts"
        
    check_condition "useAyniMetrics exporta tipos TypeScript" \
        "grep -q 'export interface AyniMetricsData' Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts"
fi

# 3. Verificar contenido de useElementalConfig
if [ -f "Demo/apps/superapp-unified/src/hooks/home/useElementalConfig.ts" ]; then
    check_condition "useElementalConfig usa React Query" \
        "grep -q 'useQuery' Demo/apps/superapp-unified/src/hooks/home/useElementalConfig.ts"
    
    check_condition "useElementalConfig tiene configuraci√≥n por defecto" \
        "grep -q 'DEFAULT_ELEMENTAL_CONFIG' Demo/apps/superapp-unified/src/hooks/home/useElementalConfig.ts"
    
    check_condition "useElementalConfig incluye filosof√≠a Coom√únity" \
        "grep -q 'Impulso transformador' Demo/apps/superapp-unified/src/hooks/home/useElementalConfig.ts"
fi

echo ""
echo "üîÑ VERIFICANDO MIGRACI√ìN DE COMPONENTES..."

# 4. Verificar que AyniBalanceFullWidget fue migrado
if [ -f "Demo/apps/superapp-unified/src/components/home/widgets/AyniBalanceFullWidget.tsx" ]; then
    check_condition "AyniBalanceFullWidget elimin√≥ datos hardcodeados" \
        "! grep -q 'const mockAyniData' Demo/apps/superapp-unified/src/components/home/widgets/AyniBalanceFullWidget.tsx"
    
    check_condition "AyniBalanceFullWidget usa useAyniMetrics" \
        "grep -q 'useAyniMetrics' Demo/apps/superapp-unified/src/components/home/widgets/AyniBalanceFullWidget.tsx"
    
    check_condition "AyniBalanceFullWidget usa useElementalConfig" \
        "grep -q 'useElementalConfig' Demo/apps/superapp-unified/src/components/home/widgets/AyniBalanceFullWidget.tsx"
    
    check_condition "AyniBalanceFullWidget tiene estados de carga" \
        "grep -q 'isLoading' Demo/apps/superapp-unified/src/components/home/widgets/AyniBalanceFullWidget.tsx"
    
    check_condition "AyniBalanceFullWidget tiene manejo de errores" \
        "grep -q 'hasError' Demo/apps/superapp-unified/src/components/home/widgets/AyniBalanceFullWidget.tsx"
    
    check_condition "AyniBalanceFullWidget muestra datos en tiempo real" \
        "grep -q 'lastUpdated' Demo/apps/superapp-unified/src/components/home/widgets/AyniBalanceFullWidget.tsx"
fi

echo ""
echo "üåü VERIFICANDO FUNCIONALIDADES AVANZADAS..."

# 5. Verificar funcionalidades avanzadas
check_condition "Hook useAyniMetricsRealTime para datos en tiempo real" \
    "grep -q 'useAyniMetricsRealTime' Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts"

check_condition "Configuraci√≥n elemental incluye gradientes" \
    "grep -q 'linear-gradient' Demo/apps/superapp-unified/src/hooks/home/useElementalConfig.ts"

check_condition "M√©tricas Ayni incluyen balance elemental" \
    "grep -q 'elementos.*fuego.*agua.*tierra.*aire' Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts"

echo ""
echo "üìä VERIFICANDO INTEGRACI√ìN CON AUTHCONTEXT..."

# 6. Verificar integraci√≥n con autenticaci√≥n
check_condition "useAyniMetrics usa AuthContext" \
    "grep -q 'useAuth' Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts"

check_condition "Hook personaliza datos seg√∫n usuario" \
    "grep -q 'user.id' Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts"

echo ""
echo "üéØ VERIFICANDO OPTIMIZACIONES DE PERFORMANCE..."

# 7. Verificar optimizaciones
check_condition "useAyniMetrics tiene refetchInterval configurado" \
    "grep -q 'refetchInterval.*60.*1000' Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts"

check_condition "useElementalConfig tiene staleTime infinito" \
    "grep -q 'staleTime.*Infinity' Demo/apps/superapp-unified/src/hooks/home/useElementalConfig.ts"

check_condition "Hooks tienen placeholderData para UX instant√°nea" \
    "grep -q 'placeholderData' Demo/apps/superapp-unified/src/hooks/home/useAyniMetrics.ts && grep -q 'placeholderData' Demo/apps/superapp-unified/src/hooks/home/useElementalConfig.ts"

echo ""
echo "================================================================="

# Calcular porcentaje de √©xito
if [ $TOTAL_CHECKS -gt 0 ]; then
    SUCCESS_PERCENTAGE=$(( (PASSED_CHECKS * 100) / TOTAL_CHECKS ))
else
    SUCCESS_PERCENTAGE=0
fi

echo "üìä ESTAD√çSTICAS FINALES:"
echo "   ‚úÖ Verificaciones exitosas: $PASSED_CHECKS/$TOTAL_CHECKS"
echo "   ‚ùå Verificaciones fallidas: $FAILED_CHECKS"
echo "   üìà Porcentaje de √©xito: $SUCCESS_PERCENTAGE%"

# Determinar estado general
if [ $SUCCESS_PERCENTAGE -ge 90 ]; then
    echo ""
    echo "üéâ ESTADO: ‚úÖ MIGRACI√ìN HOME COMPLETADA EXITOSAMENTE"
    echo "üåü El m√≥dulo Home ahora usa datos din√°micos del backend!"
    echo "üöÄ Design System C√≥smico activado con m√©tricas reales!"
elif [ $SUCCESS_PERCENTAGE -ge 70 ]; then
    echo ""
    echo "‚ö†Ô∏è ESTADO: üîÑ MIGRACI√ìN HOME MAYORMENTE COMPLETADA"
    echo "üí° Algunas verificaciones menores fallaron, pero la funcionalidad principal est√° lista"
elif [ $SUCCESS_PERCENTAGE -ge 50 ]; then
    echo ""
    echo "üö® ESTADO: ‚ö†Ô∏è MIGRACI√ìN HOME PARCIALMENTE COMPLETADA"
    echo "üîß Se requiere trabajo adicional para completar la migraci√≥n"
else
    echo ""
    echo "üí• ESTADO: ‚ùå MIGRACI√ìN HOME REQUIERE ATENCI√ìN CR√çTICA"
    echo "üõ†Ô∏è M√∫ltiples verificaciones fallaron, revisar implementaci√≥n"
fi

echo ""
echo "üéØ PR√ìXIMOS PASOS RECOMENDADOS:"
echo "1. üåê Iniciar SuperApp y navegar al Dashboard Home"
echo "2. üîç Verificar que las m√©tricas Ayni muestran datos din√°micos"
echo "3. üé® Confirmar que el Design System C√≥smico est√° activo"
echo "4. üì± Probar en diferentes dispositivos y tama√±os de pantalla"
echo "5. ‚ö° Verificar performance y tiempos de carga"

echo ""
echo "‚ú® BENEFICIOS DE LA MIGRACI√ìN:"
echo "üåü Datos reales y personalizados por usuario"
echo "üîÑ Actualizaci√≥n autom√°tica cada 2 minutos"
echo "üé® Design System C√≥smico completamente activado"
echo "‚ö° Caching inteligente para mejor performance"
echo "üõ°Ô∏è Manejo robusto de errores y estados de carga"

exit 0 