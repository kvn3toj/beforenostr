const { chromium } = require('playwright');

async function testPermissionsFix() {
  console.log('üß™ Test: Verificaci√≥n de permisos despu√©s del fix');
  console.log('============================================\n');
  
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();
  
  try {
    // 1. Ir a la p√°gina de login
    console.log('üìç 1. Navegando a login...');
    await page.goto('http://localhost:3000/login');
    await page.waitForLoadState('networkidle', { timeout: 10000 });
    
    // 2. Hacer login con las credenciales correctas del admin
    console.log('üîê 2. Haciendo login...');
    await page.fill('input[name="email"]', 'admin@gamifier.com');
    await page.fill('input[name="password"]', 'admin123');
    await page.click('button[type="submit"]');
    
    // 3. Esperar redirecci√≥n a home
    console.log('‚è≥ 3. Esperando redirecci√≥n...');
    await page.waitForURL('**/');
    await page.waitForTimeout(2000);
    
    // 4. Verificar datos del usuario en localStorage
    console.log('üìä 4. Verificando datos del usuario...');
    const userData = await page.evaluate(() => {
      const user = localStorage.getItem('auth_user');
      return user ? JSON.parse(user) : null;
    });
    
    if (userData) {
      console.log('‚úÖ Usuario encontrado:');
      console.log(`   üìß Email: ${userData.email}`);
      console.log(`   üë§ Nombre: ${userData.name}`);
      console.log(`   üé≠ Roles: ${JSON.stringify(userData.roles)}`);
      console.log(`   üîë Permisos: ${userData.permissions ? userData.permissions.length : 0} permisos`);
      if (userData.permissions) {
        console.log('   üìú Lista de permisos:');
        userData.permissions.forEach((perm, i) => {
          console.log(`      ${i + 1}. ${perm}`);
        });
      }
    } else {
      console.log('‚ùå No se encontraron datos del usuario');
    }
    
    // 5. Verificar men√∫ de administraci√≥n
    console.log('\nüîç 5. Verificando men√∫ de administraci√≥n...');
    
    // Buscar la secci√≥n de administraci√≥n
    const adminSection = page.locator('text=Administration').first();
    if (await adminSection.isVisible()) {
      console.log('‚úÖ Secci√≥n de Administraci√≥n visible');
      
      // Hacer clic para expandir
      await adminSection.click();
      await page.waitForTimeout(1500);
      
      // Verificar opciones de men√∫
      const menuOptions = [
        'Users', 'Usuarios',
        'Roles',
        'Permissions', 'Permisos',
        'Items',
        'Configuration', 'Configuraci√≥n',
        'Audit Logs', 'Logs de Auditor√≠a',
        'System Status', 'Estado del Sistema'
      ];
      
      console.log('üìã Verificando opciones del men√∫:');
      for (const option of menuOptions) {
        const element = page.locator(`text=${option}`).first();
        if (await element.isVisible()) {
          console.log(`   ‚úÖ ${option}`);
        } else {
          console.log(`   ‚ùå ${option}`);
        }
      }
      
    } else {
      console.log('‚ùå Secci√≥n de Administraci√≥n NO visible');
    }
    
    // 6. Verificar p√°gina de permisos espec√≠ficamente
    console.log('\nüîß 6. Verificando p√°gina de permisos...');
    await page.goto('http://localhost:3000/permissions');
    await page.waitForLoadState('networkidle');
    
    // Verificar bot√≥n "Crear Nuevo Permiso"
    const createButton = page.locator('button:has-text("Crear Nuevo Permiso")').first();
    if (await createButton.isVisible()) {
      const isEnabled = await createButton.isEnabled();
      console.log(`‚úÖ Bot√≥n "Crear Nuevo Permiso" visible y ${isEnabled ? 'HABILITADO' : 'DESHABILITADO'}`);
    } else {
      console.log('‚ùå Bot√≥n "Crear Nuevo Permiso" NO encontrado');
    }
    
    // 7. Verificar p√°gina de roles
    console.log('\nüë• 7. Verificando p√°gina de roles...');
    await page.goto('http://localhost:3000/roles');
    await page.waitForLoadState('networkidle');
    
    const createRoleButton = page.locator('button:has-text("Crear Nuevo Rol")').first();
    if (await createRoleButton.isVisible()) {
      const isEnabled = await createRoleButton.isEnabled();
      console.log(`‚úÖ Bot√≥n "Crear Nuevo Rol" visible y ${isEnabled ? 'HABILITADO' : 'DESHABILITADO'}`);
    } else {
      console.log('‚ùå Bot√≥n "Crear Nuevo Rol" NO encontrado');
    }
    
    console.log('\nüéâ Test completado!');
    
  } catch (error) {
    console.error('‚ùå Error durante el test:', error.message);
  } finally {
    await browser.close();
  }
}

testPermissionsFix().catch(console.error); 