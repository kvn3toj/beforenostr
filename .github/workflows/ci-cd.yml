# üöÄ Coom√únity Monorepo - CI/CD Pipeline
# Pipeline optimizado con Turborepo para m√°xima eficiencia

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # ================================================================
  # Changes Detection - Optimizar builds solo para lo que cambi√≥
  # ================================================================
  detect-changes:
    name: "üîç Detect Changes"
    runs-on: ubuntu-latest
    outputs:
      superapp: ${{ steps.changes.outputs.superapp }}
      backend: ${{ steps.changes.outputs.backend }}
      shared: ${{ steps.changes.outputs.shared }}
      docker: ${{ steps.changes.outputs.docker }}
      ci: ${{ steps.changes.outputs.ci }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            superapp:
              - 'Demo/apps/superapp-unified/**'
              - 'package*.json'
              - 'turbo.json'
            backend:
              - 'Demo/backend/**'
              - 'Demo/prisma/**'
            shared:
              - 'packages/**'
              - 'shared/**'
            docker:
              - 'docker/**'
              - '**/Dockerfile'
              - 'docker-compose*.yml'
            ci:
              - '.github/workflows/**'

  # ================================================================
  # Code Quality & Security
  # ================================================================
  quality-check:
    name: "üîç Quality & Security"
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Turborepo
        run: npm install -g turbo@latest

      - name: Install dependencies
        run: npm ci

      - name: Lint & Type Check
        run: |
          turbo run lint type-check --parallel --filter='!@coomunity/backend'

      - name: Security Audit
        run: npm audit --audit-level moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # ================================================================
  # Build & Test - SuperApp
  # ================================================================
  build-test-superapp:
    name: "üèóÔ∏è Build & Test SuperApp"
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-check]
    if: needs.detect-changes.outputs.superapp == 'true' || needs.detect-changes.outputs.ci == 'true'
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Turborepo
        run: npm install -g turbo@latest

      - name: Install dependencies
        run: npm ci

      - name: Build SuperApp
        run: turbo run build:prod --filter=coomunity-superapp

      - name: Run Unit Tests
        run: turbo run test --filter=coomunity-superapp

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: superapp-build-${{ matrix.node-version }}
          path: Demo/apps/superapp-unified/dist/
          retention-days: 7

  # ================================================================
  # E2E Testing
  # ================================================================
  e2e-testing:
    name: "üß™ E2E Testing"
    runs-on: ubuntu-latest
    needs: [build-test-superapp]
    if: needs.detect-changes.outputs.superapp == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: superapp-build-18
          path: Demo/apps/superapp-unified/dist/

      - name: Start SuperApp
        run: |
          cd Demo/apps/superapp-unified
          npm run preview &
          sleep 10
        env:
          VITE_API_BASE_URL: http://localhost:3002

      - name: Run E2E Tests
        run: turbo run test:ux --filter=coomunity-superapp
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: Upload E2E Results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-results
          path: |
            Demo/test-results/
            Demo/playwright-report/
          retention-days: 7

  # ================================================================
  # Docker Build & Security Scan
  # ================================================================
  docker-build:
    name: "üê≥ Docker Build & Scan"
    runs-on: ubuntu-latest
    needs: [detect-changes, build-test-superapp]
    if: needs.detect-changes.outputs.superapp == 'true' || needs.detect-changes.outputs.docker == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/superapp
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: Demo/apps/superapp-unified
          file: Demo/apps/superapp-unified/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}/superapp:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ================================================================
  # Deploy to Staging
  # ================================================================
  deploy-staging:
    name: "üöÄ Deploy to Staging"
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-testing]
    if: github.ref == 'refs/heads/develop' && success()
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS Staging
        run: |
          echo "Deploying SuperApp to staging environment..."
          # Aqu√≠ ir√≠a el script de despliegue espec√≠fico
          aws ecs update-service \
            --cluster coomunity-staging \
            --service superapp-staging \
            --force-new-deployment

      - name: Health Check
        run: |
          echo "Performing health check..."
          for i in {1..30}; do
            if curl -f ${{ secrets.STAGING_URL }}/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          echo "Health check failed"
          exit 1

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Ejecutar tests b√°sicos contra staging

  # ================================================================
  # Deploy to Production
  # ================================================================
  deploy-production:
    name: "üåü Deploy to Production"
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-testing]
    if: github.ref == 'refs/heads/main' && success()
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS Production
        run: |
          echo "Deploying SuperApp to production environment..."
          aws ecs update-service \
            --cluster coomunity-production \
            --service superapp-production \
            --force-new-deployment

      - name: Health Check
        run: |
          echo "Performing production health check..."
          for i in {1..30}; do
            if curl -f ${{ secrets.PRODUCTION_URL }}/health; then
              echo "Production health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          echo "Production health check failed"
          exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: 'üéâ SuperApp successfully deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ================================================================
  # Cleanup
  # ================================================================
  cleanup:
    name: "üßπ Cleanup"
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Delete old container images
        run: |
          echo "Cleaning up old container images..."
          # Script para limpiar im√°genes antiguas 