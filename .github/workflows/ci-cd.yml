# üöÄ Coom√únity Monorepo - CI/CD Pipeline Optimizado
# Pipeline basado en las mejores pr√°cticas de Turborepo 2024

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      run_e2e:
        description: 'Run E2E Tests'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  # Remote Caching variables (opcional, descomentar cuando se configure)
  # TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  # TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  # ================================================================
  # Changes Detection - Optimizar builds solo para lo que cambi√≥
  # ================================================================
  detect-changes:
    name: "üîç Detect Changes"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      superapp: ${{ steps.changes.outputs.superapp }}
      backend: ${{ steps.changes.outputs.backend }}
      admin: ${{ steps.changes.outputs.admin }}
      shared: ${{ steps.changes.outputs.shared }}
      ci: ${{ steps.changes.outputs.ci }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            superapp:
              - 'Demo/apps/superapp-unified/**'
              - 'package*.json'
              - 'turbo.json'
            backend:
              - 'src/**'
              - 'prisma/**'
              - 'tsconfig.backend.json'
            admin:
              - 'admin-frontend/**'
            shared:
              - 'packages/**'
              - 'shared/**'
            ci:
              - '.github/workflows/**'

  # ================================================================
  # Central Dependency Setup (instalaci√≥n √∫nica)
  # ================================================================
  setup-dependencies:
    name: "üì¶ Setup Dependencies"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache npm dir
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install all dependencies (root)
        run: npm install --legacy-peer-deps

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

  # ================================================================
  # Backend - Verificaci√≥n independiente
  # ================================================================
  backend-check:
    name: "üîß Backend Check"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [detect-changes, setup-dependencies]
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.ci == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Backend Type Check
        run: npx tsc --noEmit -p tsconfig.backend.json

      - name: Backend Lint
        run: |
          if [ -f ".eslintrc.backend.js" ] || [ -f ".eslintrc.backend.json" ]; then
            echo "Running backend-specific linting..."
            npx eslint src/ --ext .ts,.js
          else
            echo "No backend-specific lint config found, skipping..."
          fi

      # ------------------------------------------------
      # üî® Build Docker Image del Backend usando lockfile ra√≠z
      # ------------------------------------------------
      - name: Build Backend Docker Image
        run: |
          docker build -f backend/Dockerfile -t coomunity-backend .

  # ================================================================
  # Quality Check - Linting y Type Checking
  # ================================================================
  quality-check:
    name: "üîç Quality & Security Check"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [detect-changes, setup-dependencies]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Lint & Type Check
        run: |
          turbo run lint type-check --parallel
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ vars.TURBO_TEAM }}

      - name: Format Check
        run: npm run format:check

      - name: Security Audit
        run: npm audit --audit-level moderate
        continue-on-error: true

  # ================================================================
  # Build & Test - SuperApp
  # ================================================================
  build-test-superapp:
    name: "üèóÔ∏è Build & Test SuperApp"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [detect-changes, quality-check]
    if: needs.detect-changes.outputs.superapp == 'true' || needs.detect-changes.outputs.ci == 'true'

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ matrix.node-version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ matrix.node-version }}-
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build SuperApp
        run: turbo run build --filter=coomunity-superapp
        env:
          NODE_ENV: production
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ vars.TURBO_TEAM }}

      - name: Build Production
        run: turbo run build:prod --filter=coomunity-superapp
        env:
          NODE_ENV: production

      - name: Run Unit Tests
        if: always()
        run: turbo run test --filter=coomunity-superapp
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '18'
        with:
          name: superapp-build
          path: Demo/apps/superapp-unified/dist/
          retention-days: 7

  # ================================================================
  # Build & Test - Admin Frontend
  # ================================================================
  build-test-admin:
    name: "üèóÔ∏è Build & Test Admin"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [detect-changes, quality-check]
    if: needs.detect-changes.outputs.admin == 'true' || needs.detect-changes.outputs.ci == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      # ------------------------------------------------
      # üì¶ Instalar TODAS las dependencias desde la ra√≠z (lockfile ra√≠z)
      # ------------------------------------------------
      - name: Install dependencies (root)
        run: npm install --legacy-peer-deps

      # ------------------------------------------------
      # üõ†Ô∏è Build Admin Frontend usando workspace flag
      # ------------------------------------------------
      - name: Build Admin Frontend
        run: npm run build --workspace=admin-frontend
        env:
          NODE_ENV: production

      # ------------------------------------------------
      # üß™ Tests del Admin Frontend (si existe script)
      # ------------------------------------------------
      - name: Run Admin Tests
        if: always()
        run: |
          if npm run | grep -q "test"; then
            npm run test --workspace=admin-frontend
          else
            echo "No test script found in admin-frontend, skipping..."
          fi
        continue-on-error: true

  # ================================================================
  # E2E Testing - Solo para SuperApp
  # ================================================================
  e2e-testing:
    name: "üß™ E2E Testing"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-test-superapp]
    if: |
      always() &&
      (needs.detect-changes.outputs.superapp == 'true' || needs.detect-changes.outputs.ci == 'true') &&
      (github.event.inputs.run_e2e == 'true' || github.event.inputs.run_e2e == null)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Install Playwright
        run: |
          cd Demo/apps/superapp-unified
          npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: superapp-build
          path: Demo/apps/superapp-unified/dist/

      - name: Start SuperApp Preview
        run: |
          cd Demo/apps/superapp-unified
          npm run preview &
          echo $! > preview.pid
          sleep 15
        env:
          VITE_API_BASE_URL: http://localhost:3002
          VITE_ENABLE_MOCK_AUTH: true

      - name: Run E2E Tests
        run: |
          cd Demo/apps/superapp-unified
          npx playwright test --reporter=html
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: Stop Preview Server
        if: always()
        run: |
          cd Demo/apps/superapp-unified
          if [ -f preview.pid ]; then
            kill $(cat preview.pid) || true
            rm preview.pid
          fi

      - name: Upload E2E Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            Demo/apps/superapp-unified/test-results/
            Demo/apps/superapp-unified/playwright-report/
          retention-days: 7

  # ================================================================
  # Integration Test - Verificar que todo funciona junto
  # ================================================================
  integration-test:
    name: "üîó Integration Test"
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [build-test-superapp, build-test-admin, backend-check]
    if: |
      always() &&
      (needs.detect-changes.outputs.superapp == 'true' ||
       needs.detect-changes.outputs.backend == 'true' ||
       needs.detect-changes.outputs.admin == 'true' ||
       needs.detect-changes.outputs.ci == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Validate Production Build
        run: turbo run build:prod --parallel
        env:
          NODE_ENV: production
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ vars.TURBO_TEAM }}

      - name: Check Services Health Scripts
        run: |
          if npm run | grep -q "services:check"; then
            echo "‚úÖ Services check script available"
          else
            echo "‚ÑπÔ∏è No services check script found"
          fi

  # ================================================================
  # Deployment Preview (solo en PRs)
  # ================================================================
  deploy-preview:
    name: "üöÄ Deploy Preview"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-test-superapp, e2e-testing]
    if: |
      github.event_name == 'pull_request' &&
      (needs.build-test-superapp.result == 'success' || needs.build-test-superapp.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: superapp-build
          path: Demo/apps/superapp-unified/dist/

      - name: Create Deployment Preview
        run: |
          echo "üöÄ Creating deployment preview for PR #${{ github.event.number }}"
          echo "üì¶ Build artifacts ready for deployment"
          echo "üîó Preview URL would be: https://pr-${{ github.event.number }}.coomunity.preview.dev"

          # Aqu√≠ ir√≠a la l√≥gica real de deployment a entorno de preview
          # Por ejemplo: Vercel, Netlify, AWS S3, etc.

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
                             body: 'üöÄ **Deployment Preview Ready!**\n\n' +
                     'üì± SuperApp Preview: `https://pr-${{ github.event.number }}.coomunity.preview.dev`\n' +
                     '‚è±Ô∏è Build Time: ${{ needs.build-test-superapp.outputs.build-time && needs.build-test-superapp.outputs.build-time || 'N/A' }}\n' +
                     'üß™ E2E Tests: ${{ needs.e2e-testing.result }}\n\n' +
                     '_Automatically generated by GitHub Actions_'
            })

  # ================================================================
  # Summary Job - Reporte Final
  # ================================================================
  ci-summary:
    name: "üìä CI Summary"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [detect-changes, quality-check, build-test-superapp, build-test-admin, backend-check, e2e-testing, integration-test]
    if: always()

    steps:
      - name: Generate Summary
        run: |
          echo "# üöÄ Coom√únity CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Check | ${{ needs.quality-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Check | ${{ needs.backend-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SuperApp Build | ${{ needs.build-test-superapp.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Admin Build | ${{ needs.build-test-admin.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-testing.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Test | ${{ needs.integration-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîç Changed Components" >> $GITHUB_STEP_SUMMARY
          echo "- SuperApp: ${{ needs.detect-changes.outputs.superapp }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ needs.detect-changes.outputs.backend }}" >> $GITHUB_STEP_SUMMARY
          echo "- Admin: ${{ needs.detect-changes.outputs.admin }}" >> $GITHUB_STEP_SUMMARY
          echo "- Shared: ${{ needs.detect-changes.outputs.shared }}" >> $GITHUB_STEP_SUMMARY
          echo "- CI: ${{ needs.detect-changes.outputs.ci }}" >> $GITHUB_STEP_SUMMARY
