name: 🚀 Vercel Deployment - CoomÜnity SuperApp

on:
  # Deploy automático en push a main/gamifier2.0
  push:
    branches:
      - main
      - gamifier2.0
    paths:
      - 'Demo/apps/superapp-unified/**'
      - 'vercel.json'
      - '.github/workflows/vercel-deploy.yml'

  # Deploy manual
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

  # Deploy en PRs (preview)
  pull_request:
    branches:
      - main
      - gamifier2.0
    paths:
      - 'Demo/apps/superapp-unified/**'

env:
  NODE_VERSION: '18'

jobs:
  # ================================================================
  # Detect Changes - Optimizar builds solo cuando hay cambios
  # ================================================================
  detect-changes:
    name: "🔍 Detect Changes"
    runs-on: ubuntu-latest
    outputs:
      superapp: ${{ steps.changes.outputs.superapp }}
      config: ${{ steps.changes.outputs.config }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 | grep -E '^Demo/apps/superapp-unified/'; then
            echo "superapp=true" >> $GITHUB_OUTPUT
          else
            echo "superapp=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only HEAD~1 | grep -E '^(vercel\.json|\.github/workflows/)'; then
            echo "config=true" >> $GITHUB_OUTPUT
          else
            echo "config=false" >> $GITHUB_OUTPUT
          fi

  # ================================================================
  # Build and Test - Verificar que todo compile antes de deploy
  # ================================================================
  build-and-test:
    name: "🔨 Build & Test"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.superapp == 'true' || needs.detect-changes.outputs.config == 'true' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies (root)
        run: npm install --legacy-peer-deps

      - name: Install SuperApp dependencies
        run: |
          cd Demo/apps/superapp-unified
          npm install --legacy-peer-deps

      - name: TypeScript Check (with warnings)
        run: |
          cd Demo/apps/superapp-unified
          npm run type-check || echo "⚠️ TypeScript check completed with warnings"

      - name: Lint (allow warnings)
        run: |
          cd Demo/apps/superapp-unified
          npm run lint || echo "⚠️ Linting completed with warnings"

      - name: Build Production
        run: |
          cd Demo/apps/superapp-unified
          npm run build:prod

      - name: Verify Build Output
        run: |
          cd Demo/apps/superapp-unified
          ls -la dist/
          du -sh dist/
          echo "✅ Build verification completed"

  # ================================================================
  # Deploy to Vercel
  # ================================================================
  deploy:
    name: "🚀 Deploy to Vercel"
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: always() && needs.build-and-test.result == 'success'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: vercel pull --yes --environment=${{ github.event_name == 'pull_request' && 'preview' || 'production' }}

      - name: Build Project Artifacts
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: vercel build ${{ github.event_name == 'pull_request' && '' || '--prod' }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          url=$(vercel deploy --prebuilt ${{ github.event_name == 'pull_request' && '' || '--prod' }})
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Update Deployment Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployed to Vercel',
              context: 'vercel'
            })

      - name: Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Deployment successful!**\n\n📱 **Preview URL:** ${url}\n\n✅ PWA features enabled\n⚡ Hosted on Vercel's global CDN\n🔒 HTTPS enabled automatically`
            })

  # ================================================================
  # Post-Deploy Verification
  # ================================================================
  post-deploy-verification:
    name: "✅ Post-Deploy Verification"
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'success'

    steps:
      - name: Health Check
        run: |
          # Esperar un momento para que el deployment se propague
          sleep 30

          # TODO: Agregar health check real cuando tengamos la URL
          echo "🔍 Post-deployment verification placeholder"
          echo "✅ Deployment completed successfully"

      - name: Create Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Success Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Build:** Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment:** Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **PWA:** Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **CDN:** Global (Vercel)" >> $GITHUB_STEP_SUMMARY
          echo "- **HTTPS:** Automatic" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Performance" >> $GITHUB_STEP_SUMMARY
          echo "- **Lighthouse:** TBD" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Size:** TBD" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Time:** TBD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Vercel Dashboard](https://vercel.com/dashboard)" >> $GITHUB_STEP_SUMMARY
          echo "- [Performance Monitoring](https://vercel.com/analytics)" >> $GITHUB_STEP_SUMMARY
