generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mundo {
  id          String     @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String?
  version     Int        @default(1)
  playlists   Playlist[]
  worlds      World[]

  @@index([isActive])
  @@index([createdById])
  @@map("mundos")
}

model Playlist {
  id                String             @id @default(uuid())
  mundoId           String
  name              String
  description       String?
  imageUrl          String?
  orderInMundo      Int?               @default(0)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdById       String?
  version           Int                @default(1)
  contentItems      ContentItem[]
  gamifiedPlaylists GamifiedPlaylist[]
  mundo             Mundo              @relation(fields: [mundoId], references: [id])
  videoItems        VideoItem[]

  @@index([mundoId])
  @@index([isActive])
  @@index([createdById])
  @@index([orderInMundo])
  @@map("playlists")
}

model VideoItem {
  id           Int               @id @default(autoincrement())
  title        String
  description  String?
  content      String
  url          String?
  platform     String            @default("youtube")
  externalId   String?
  playlistId   String
  itemTypeId   String
  order        Int               @default(0)
  isActive     Boolean           @default(true)
  isDeleted    Boolean           @default(false)
  deletedAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  duration     Int?
  categories   String?
  language     String?
  quality      String?
  tags         String?
  thumbnailUrl String?
  activities   Activity[]
  questions    Question[]
  subtitles    Subtitle[]
  playlist     Playlist          @relation(fields: [playlistId], references: [id])
  permissions  VideoPermissions?

  @@index([playlistId])
  @@index([itemTypeId])
  @@index([isDeleted])
  @@index([platform])
  @@index([externalId])
  @@index([language])
  @@map("video_items")
}

model Subtitle {
  id           Int       @id @default(autoincrement())
  videoItemId  Int
  languageCode String
  format       String    @default("srt")
  content      String?
  contentUrl   String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  videoItem    VideoItem @relation(fields: [videoItemId], references: [id])

  @@index([videoItemId])
  @@map("subtitles")
}

model Question {
  id            Int            @id @default(autoincrement())
  videoItemId   Int
  timestamp     Int
  type          String
  text          String
  languageCode  String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  endTimestamp  Int?
  answerOptions AnswerOption[]
  videoItem     VideoItem      @relation(fields: [videoItemId], references: [id])
  userAnswers   UserAnswer[]

  @@index([videoItemId])
  @@index([timestamp])
  @@index([endTimestamp])
  @@map("questions")
}

model AnswerOption {
  id         Int      @id @default(autoincrement())
  questionId Int
  text       String
  isCorrect  Boolean  @default(false)
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@map("answer_options")
}

model User {
  id                         String                @id @default(uuid())
  email                      String                @unique
  password                   String
  name                       String?
  avatarUrl                  String?
  isActive                   Boolean               @default(true)
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  username                   String?               @unique
  firstName                  String?
  lastName                   String?
  documentType               String?
  documentNumber             String?
  phone                      String?
  country                    String?
  address                    String?
  status                     String                @default("ACTIVE")
  topUserCount               Int                   @default(0)
  personalityId              String?
  createdActivities          Activity[]            @relation("ActivityCreator")
  comments                   Comment[]
  likes                      Like[]
  createdExperiences         Experience[]          @relation("ExperienceCreator")
  invitationsSent            GiftCard[]            @relation("InviterUser")
  ownedGroups                Group[]               @relation("GroupOwner")
  createdInvitationTemplates InvitationTemplate[]  @relation("InvitationTemplateCreator")
  merits                     Merit[]
  notifications              Notification[]
  publications               Publication[]
  createdReports             Report[]              @relation("ReportCreator")
  assignedPermissions        RolePermission[]      @relation("PermissionAssigner")
  tokens                     Token[]
  transactionsTo             Transaction[]         @relation("TransactionTo")
  transactionsFrom           Transaction[]         @relation("TransactionFrom")
  createdTemplates           UIComponentTemplate[] @relation("TemplateCreator")
  userAnswers                UserAnswer[]
  userChallenges             UserChallenge[]
  userGroups                 UserGroup[]
  invitationsReceived        UserInvitation[]
  assignedRoles              UserRole[]            @relation("RoleAssigner")
  userRoles                  UserRole[]
  personality                Personality?          @relation(fields: [personalityId], references: [id])
  videoPermissions           VideoPermissions[]
  wallet                     Wallet?
  createdWorlds              World[]               @relation("WorldCreator")
  marketplaceItems           MarketplaceItem[]

  @@index([email])
  @@index([isActive])
  @@index([username])
  @@index([status])
  @@map("users")
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model UserRole {
  userId       String
  roleId       String
  assignedAt   DateTime @default(now())
  assignedById String?
  assignedBy   User?    @relation("RoleAssigner", fields: [assignedById], references: [id])
  role         Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([assignedById])
  @@map("user_roles")
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@map("permissions")
}

model VideoPermissions {
  id                     String    @id @default(uuid())
  videoItemId            Int       @unique
  showWaveCount          Boolean   @default(true)
  showVideos             Boolean   @default(true)
  showVideoSubtitles     Boolean   @default(true)
  showComments           Boolean   @default(true)
  showPublishDate        Boolean   @default(true)
  showVideoDuration      Boolean   @default(true)
  showLikeButton         Boolean   @default(true)
  allowRewindForward     Boolean   @default(false)
  allowViewComments      Boolean   @default(true)
  allowMakeComments      Boolean   @default(true)
  showLikeComments       Boolean   @default(true)
  sortCommentsByAffinity Boolean   @default(false)
  showCommenterName      Boolean   @default(false)
  playlistPosition       String    @default("position1")
  isDraft                Boolean   @default(false)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  createdById            String?
  createdBy              User?     @relation(fields: [createdById], references: [id])
  videoItem              VideoItem @relation(fields: [videoItemId], references: [id], onDelete: Cascade)

  @@index([videoItemId])
  @@index([isDraft])
  @@index([createdById])
  @@map("video_permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime   @default(now())
  assignedById String?
  assignedBy   User?      @relation("PermissionAssigner", fields: [assignedById], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@index([assignedById])
  @@map("role_permissions")
}

model World {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String
  creatorId   String
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  mundoId     String?
  stages      Stage[]
  mundo       Mundo?   @relation(fields: [mundoId], references: [id])
  creator     User     @relation("WorldCreator", fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([status])
  @@index([mundoId])
  @@map("worlds")
}

model Stage {
  id          String       @id @default(uuid())
  worldId     String
  name        String
  order       Int
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  experiences Experience[]
  world       World        @relation(fields: [worldId], references: [id], onDelete: Cascade)

  @@index([worldId])
  @@index([order])
  @@map("stages")
}

model Experience {
  id                    String     @id @default(uuid())
  stageId               String
  title                 String
  description           String?
  type                  String
  gamificationFramework String?    @default("Octalysis")
  creatorId             String
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  activities            Activity[]
  creator               User       @relation("ExperienceCreator", fields: [creatorId], references: [id])
  stage                 Stage      @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@index([stageId])
  @@index([creatorId])
  @@map("experiences")
}

model Activity {
  id                String             @id @default(uuid())
  experienceId      String
  title             String
  description       String?
  type              String
  multimediaType    String?
  contentUrl        String?
  duration          Int?
  order             Int                @default(0)
  status            String             @default("ACTIVE")
  creatorId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  videoItemId       Int?
  videoItem         VideoItem?         @relation(fields: [videoItemId], references: [id])
  creator           User               @relation("ActivityCreator", fields: [creatorId], references: [id])
  experience        Experience         @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  questions         ActivityQuestion[]
  gamifiedPlaylists GamifiedPlaylist[]

  @@index([experienceId])
  @@index([creatorId])
  @@index([order])
  @@index([status])
  @@index([videoItemId])
  @@map("activities")
}

model GamifiedPlaylist {
  id           String    @id @default(uuid())
  activityId   String?
  playlistId   String?
  name         String
  type         String
  sequenceType String
  status       String    @default("ACTIVE")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  playlist     Playlist? @relation(fields: [playlistId], references: [id])
  activity     Activity? @relation(fields: [activityId], references: [id])

  @@index([activityId])
  @@index([playlistId])
  @@index([status])
  @@map("gamified_playlists")
}

model ActivityQuestion {
  id                     String       @id @default(uuid())
  activityId             String
  type                   String
  questionType           String
  questionText           String
  options                String?
  correctAnswer          String?
  ondasList              String?
  displayTimeSeconds     Int?
  optionalDisplaySeconds Int?
  createdAt              DateTime     @default(now())
  activity               Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userAnswers            UserAnswer[]

  @@index([activityId])
  @@map("activity_questions")
}

model UserAnswer {
  id                 String            @id @default(uuid())
  userId             String
  questionId         Int?
  activityQuestionId String?
  answerGiven        String
  isCorrect          Boolean?
  ondasEarned        Int               @default(0)
  createdAt          DateTime          @default(now())
  activityQuestion   ActivityQuestion? @relation(fields: [activityQuestionId], references: [id])
  question           Question?         @relation(fields: [questionId], references: [id])
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@index([activityQuestionId])
  @@map("user_answers")
}

model Token {
  id           String    @id @default(uuid())
  userId       String
  amount       Float
  type         String
  status       String    @default("ACTIVE")
  caducityDate DateTime?
  source       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([caducityDate])
  @@map("tokens")
}

model Merit {
  id              String   @id @default(uuid())
  userId          String
  amount          Float
  type            String
  source          String
  relatedEntityId String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([source])
  @@map("merits")
}

model Wallet {
  id                String        @id @default(uuid())
  userId            String        @unique
  blockchainAddress String?       @unique
  balanceUnits      Float         @default(0)
  balanceToins      Float         @default(0)
  status            String        @default("ACTIVE")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  transactionsTo    Transaction[] @relation("TransactionTo")
  transactionsFrom  Transaction[] @relation("TransactionFrom")
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([blockchainAddress])
  @@index([status])
  @@map("wallets")
}

model Transaction {
  id          String   @id @default(uuid())
  fromUserId  String?
  toUserId    String
  amount      Float
  tokenType   String
  type        String
  status      String   @default("PENDING")
  description String?
  createdAt   DateTime @default(now())
  toWallet    Wallet   @relation("TransactionTo", fields: [toUserId], references: [userId], map: "transaction_to_wallet_fkey")
  fromWallet  Wallet?  @relation("TransactionFrom", fields: [fromUserId], references: [userId], map: "transaction_from_wallet_fkey")
  toUser      User     @relation("TransactionTo", fields: [toUserId], references: [id], map: "transaction_to_user_fkey")
  fromUser    User?    @relation("TransactionFrom", fields: [fromUserId], references: [id], map: "transaction_from_user_fkey")

  @@index([fromUserId])
  @@index([toUserId])
  @@index([type])
  @@index([status])
  @@map("transactions")
}

model Group {
  id          String      @id @default(uuid())
  name        String
  description String?
  ownerId     String
  type        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  owner       User        @relation("GroupOwner", fields: [ownerId], references: [id])
  userGroups  UserGroup[]

  @@index([ownerId])
  @@index([type])
  @@map("groups")
}

model UserGroup {
  userId      String
  groupId     String
  roleInGroup String   @default("MEMBER")
  joinedAt    DateTime @default(now())
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@map("user_groups")
}

model Publication {
  id        String    @id @default(uuid())
  userId    String
  content   String
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("publications")
}

model Comment {
  id            String       @id @default(uuid())
  userId        String
  publicationId String?
  activityId    String?
  text          String
  createdAt     DateTime     @default(now())
  publication   Publication? @relation(fields: [publicationId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([publicationId])
  @@index([activityId])
  @@map("comments")
}

model Like {
  id            String      @id @default(uuid())
  userId        String
  publicationId String
  createdAt     DateTime    @default(now())
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, publicationId]) // Un usuario solo puede dar un like por publicación
  @@index([userId])
  @@index([publicationId])
  @@map("likes")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([type])
  @@map("notifications")
}

model InvitationTemplate {
  id        String   @id @default(uuid())
  name      String
  content   String
  creatorId String
  createdAt DateTime @default(now())
  creator   User     @relation("InvitationTemplateCreator", fields: [creatorId], references: [id])

  @@index([creatorId])
  @@map("invitation_templates")
}

model GiftCard {
  id              String           @id @default(uuid())
  inviterId       String
  invitedName     String
  invitedEmail    String
  token           String           @unique
  unitsAmount     Float
  suggestions     String?
  status          String           @default("SENT")
  createdAt       DateTime         @default(now())
  inviter         User             @relation("InviterUser", fields: [inviterId], references: [id])
  userInvitations UserInvitation[]

  @@index([inviterId])
  @@index([token])
  @@index([status])
  @@map("gift_cards")
}

model UserInvitation {
  id            String   @id @default(uuid())
  giftCardId    String
  invitedUserId String?
  status        String   @default("PENDING")
  createdAt     DateTime @default(now())
  invitedUser   User?    @relation(fields: [invitedUserId], references: [id])
  giftCard      GiftCard @relation(fields: [giftCardId], references: [id])

  @@index([giftCardId])
  @@index([invitedUserId])
  @@index([status])
  @@map("user_invitations")
}

model Report {
  id          String   @id @default(uuid())
  name        String
  type        String
  parameters  String?
  generatedAt DateTime @default(now())
  data        String
  creatorId   String
  creator     User     @relation("ReportCreator", fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([type])
  @@map("reports")
}

model Configuration {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  type      String
  updatedAt DateTime @updatedAt

  @@index([type])
  @@map("configurations")
}

model Log {
  id        String   @id @default(uuid())
  level     String
  message   String
  context   String?
  timestamp DateTime @default(now())
  metadata  String?

  @@index([level])
  @@index([timestamp])
  @@map("logs")
}

model AnalyticsData {
  id          String   @id @default(uuid())
  userId      String?
  eventType   String
  videoItemId String?
  playlistId  String?
  mundoId     String?
  sessionId   String?
  eventData   String?
  metadata    String?
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([eventType])
  @@index([videoItemId])
  @@index([playlistId])
  @@index([sessionId])
  @@index([timestamp])
  @@index([createdAt])
  @@map("analytics_data")
}

model Ranking {
  id        String   @id @default(uuid())
  name      String
  type      String
  period    String
  data      String
  createdAt DateTime @default(now())

  @@index([type])
  @@index([period])
  @@map("rankings")
}

model Personality {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  traits      String
  createdAt   DateTime @default(now())
  users       User[]

  @@map("personalities")
}

model UIComponentTemplate {
  id           String   @id @default(uuid())
  name         String
  type         String
  templateJson String
  creatorId    String
  createdAt    DateTime @default(now())
  creator      User     @relation("TemplateCreator", fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([type])
  @@map("ui_component_templates")
}

model ItemType {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?
  isActive     Boolean       @default(true)
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  contentItems ContentItem[]

  @@index([isActive])
  @@index([isDeleted])
  @@map("item_types")
}

model ContentItem {
  id          String    @id @default(uuid())
  title       String
  description String?
  content     String
  playlistId  String
  itemTypeId  String
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  itemType    ItemType  @relation(fields: [itemTypeId], references: [id])
  playlist    Playlist  @relation(fields: [playlistId], references: [id])

  @@index([playlistId])
  @@index([itemTypeId])
  @@index([isDeleted])
  @@map("content_items")
}

model Challenge {
  id             String            @id @default(uuid())
  title          String
  description    String?
  type           String
  status         String            @default("ACTIVE")
  startDate      DateTime
  endDate        DateTime
  config         String            @default("{}")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  rewards        ChallengeReward[]
  userChallenges UserChallenge[]

  @@index([status])
  @@index([type])
  @@index([startDate])
  @@index([endDate])
  @@map("challenges")
}

model ChallengeReward {
  id          String    @id @default(uuid())
  challengeId String
  type        String
  amount      Float?
  description String?
  metadata    String?
  createdAt   DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@index([challengeId])
  @@index([type])
  @@map("challenge_rewards")
}

model UserChallenge {
  id          String    @id @default(uuid())
  userId      String
  challengeId String
  status      String    @default("ACTIVE")
  progress    Float     @default(0)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  metadata    String?
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@index([status])
  @@map("user_challenges")
}

// =====================================================================
// MARKETPLACE MODULE MODELS
// =====================================================================

enum Currency {
  LUKAS
  USD
  EUR
  BTC
  ETH
}

enum MarketplaceItemType {
  PRODUCT
  SERVICE
  EXPERIENCE
  SKILL_EXCHANGE
  DIGITAL_CONTENT
}

enum MarketplaceItemStatus {
  DRAFT
  ACTIVE
  INACTIVE
  SOLD
  EXPIRED
  SUSPENDED
}

model MarketplaceItem {
  id          String                @id @default(uuid())
  name        String
  description String                @db.Text
  price       Float
  currency    Currency              @default(LUKAS)
  itemType    MarketplaceItemType   @default(SERVICE)
  status      MarketplaceItemStatus @default(ACTIVE)

  // Media and content
  images   String[] // Array de URLs de imágenes
  tags     String[]
  location String?

  // Metadata específico del tipo de item
  metadata String? @db.Text

  // Pricing adicional (sistema dual)
  priceToins Float? @default(0)

  // Relaciones
  seller   User   @relation(fields: [sellerId], references: [id])
  sellerId String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Campos de gestión
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  // Estadísticas
  viewCount     Int @default(0)
  favoriteCount Int @default(0)

  @@index([sellerId])
  @@index([itemType])
  @@index([status])
  @@index([currency])
  @@index([isActive])
  @@index([isDeleted])
  @@index([createdAt])
  @@index([price])
  @@index([location])
  @@map("marketplace_items")
}
