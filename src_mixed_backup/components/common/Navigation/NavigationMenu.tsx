import React, { useState } from 'react';
import {
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Collapse,
  Box,
  Typography,
  Badge,
  Tooltip,
  Divider,
  Avatar,
} from '@mui/material';
import {
  ExpandLess,
  ExpandMore,
  Circle as CircleIcon,
} from '@mui/icons-material';
import { useLocation, useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

export interface NavigationItem {
  id: string;
  label: string;
  icon: React.ReactNode;
  path?: string;
  children?: NavigationItem[];
  badge?: number | string;
  disabled?: boolean;
  divider?: boolean;
  category?: string;
}

export interface NavigationMenuProps {
  items: NavigationItem[];
  collapsed?: boolean;
  onItemClick?: (item: NavigationItem) => void;
}

// Componente del Logo para el menú de navegación
const NavigationLogo: React.FC<{ collapsed?: boolean }> = ({ collapsed = false }) => {
  const navigate = useNavigate();

  if (collapsed) {
    return (
      <Box
        component="button"
        onClick={() => navigate('/')}
        sx={{
          background: 'none',
          border: 'none',
          cursor: 'pointer',
          padding: 2,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          width: '100%',
          '&:hover': {
            opacity: 0.8,
          },
          transition: 'opacity 0.2s ease',
        }}
        aria-label="Ir al inicio"
      >
        <svg 
          width={32} 
          height={32} 
          viewBox="0 0 142 32" 
          fill="none" 
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M41.3139 10.681C41.2798 10.681 41.2437 10.679 41.2097 10.679C39.4323 10.675 37.677 11.2056 36.2543 12.1772C34.9759 13.051 34.0541 14.2859 33.1825 15.5088L30.4313 19.3911C30.1868 19.7502 29.9444 20.1133 29.7059 20.4804C29.6598 20.5522 29.6138 20.622 29.5657 20.6918C28.7942 21.829 27.2232 23.6444 25.0892 23.6404C24.9369 23.6404 24.7806 23.6305 24.6223 23.6105C22.6145 23.3591 21.0416 21.5058 21.0396 19.3891C21.0396 17.7113 22.1096 16.0954 23.6445 15.461C24.8007 14.9842 26.2073 15.0919 27.3194 15.7443C28.3734 16.3627 29.1088 17.45 29.8181 18.5033C29.8702 18.5811 29.9243 18.6569 29.9764 18.7348L32.5693 15.0779C32.6174 15.0101 32.6675 14.9423 32.7176 14.8724C30.5575 12.0515 28.0889 10.673 25.1894 10.667C25.1854 10.667 25.1834 10.667 25.1794 10.667C20.4204 10.663 16.3948 14.645 16.3848 19.3632C16.3768 23.7781 19.8173 27.6045 24.2176 28.0753C27.5619 28.4344 30.5696 26.8185 33.1665 23.2754L35.9257 19.4031C36.1581 19.0879 36.3805 18.7607 36.5989 18.4415C37.5928 16.9831 38.5326 15.6066 40.312 15.2355C41.5683 14.9742 42.8688 15.2954 43.8827 16.1153C44.8966 16.9373 45.4777 18.1402 45.4757 19.415C45.4717 21.6853 43.6002 23.5886 41.3038 23.6604C38.9414 23.7222 37.5948 21.819 36.3825 20.0594L33.7776 23.7182C33.7295 23.7861 33.6774 23.8479 33.6293 23.9138C34.6192 25.2384 35.8856 26.597 37.709 27.395C40.7528 28.7257 44.3476 28.209 46.8703 26.0803C47.6919 25.3881 48.3712 24.5502 48.8942 23.5906C49.5935 22.3058 49.9642 20.8654 49.9682 19.425C49.9742 14.669 46.0929 10.7468 41.3139 10.681Z" fill="#CDA83A"/>
          <path d="M13.8001 23.2724C13.1709 23.452 12.5056 23.5497 11.8183 23.5497C7.82878 23.5497 4.59468 20.3298 4.59468 16.3578C4.59468 12.3857 7.82878 9.16583 11.8183 9.16583C13.6798 9.16583 15.375 9.87006 16.6555 11.0212C17.7575 9.91595 19.066 9.01421 20.5127 8.39177C18.3547 6.05763 15.2588 4.59131 11.8183 4.59131C5.29199 4.59131 0 9.86009 0 16.3598C0 22.8595 5.29199 28.1262 11.8183 28.1262C13.3592 28.1262 14.828 27.829 16.1786 27.2943C16.7076 27.0849 17.2185 26.8395 17.7054 26.5602C16.6374 25.455 15.8079 24.1243 15.3049 22.658C14.834 22.9173 14.3291 23.1228 13.8001 23.2724Z" fill="currentColor"/>
        </svg>
      </Box>
    );
  }

  return (
    <Box
      component="button"
      onClick={() => navigate('/')}
      sx={{
        background: 'none',
        border: 'none',
        cursor: 'pointer',
        padding: 3,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        width: '100%',
        '&:hover': {
          opacity: 0.8,
        },
        transition: 'opacity 0.2s ease',
      }}
      aria-label="Ir al inicio"
    >
      <svg 
        width={120} 
        height={27} 
        viewBox="0 0 142 32" 
        fill="none" 
        xmlns="http://www.w3.org/2000/svg"
      >
        <path d="M127.445 31.9999H132.366L142 10.6455H137.121L133.402 18.8769L129.226 10.6455H124.145L130.973 24.1995L127.445 31.9999Z" fill="currentColor"/>
        <g opacity="0.4">
          <path d="M133.402 18.8769L129.226 10.6455H124.145L130.973 24.1995L133.402 18.8769Z" fill="url(#paint0_linear_nav)"/>
        </g>
        <path d="M126.025 23.619L125.813 23.7028C125.302 23.9023 124.783 24.0041 124.272 24.0041C123.651 24.0041 123.168 23.8445 122.797 23.5153C122.435 23.1961 122.258 22.7452 122.258 22.1367L122.26 15.3378H131.608L129.227 10.6456H122.26V7.22217H117.674V10.6456H109.957V15.3398H117.674V22.9627C117.674 23.9282 117.814 24.7522 118.09 25.4145C118.369 26.0828 118.754 26.6275 119.235 27.0325C119.711 27.4354 120.258 27.7227 120.862 27.8883C121.449 28.0499 122.076 28.1317 122.721 28.1317C123.28 28.1317 123.849 28.0758 124.412 27.9681C124.965 27.8604 125.496 27.7267 125.995 27.5711L126.027 27.5611V23.619H126.025Z" fill="currentColor"/>
        <path opacity="0.4" d="M118.217 10.6455H109.314V15.325H118.217V10.6455Z" fill="url(#paint1_linear_nav)"/>
        <path d="M109.299 28.1317V10.6455H113.895V28.1317H109.299ZM111.595 7.86851C112.27 7.86851 112.909 7.57325 113.348 7.06053C113.785 6.54782 113.973 5.86753 113.861 5.19322C113.705 4.24759 112.933 3.47952 111.984 3.32391C111.853 3.30197 111.723 3.29199 111.595 3.29199C110.92 3.29199 110.28 3.58725 109.842 4.09996C109.405 4.61268 109.216 5.29297 109.329 5.96728C109.485 6.91291 110.256 7.68098 111.206 7.83659C111.336 7.85853 111.467 7.86851 111.595 7.86851Z" fill="currentColor"/>
        <path d="M41.3139 10.681C41.2798 10.681 41.2437 10.679 41.2097 10.679C39.4323 10.675 37.677 11.2056 36.2543 12.1772C34.9759 13.051 34.0541 14.2859 33.1825 15.5088L30.4313 19.3911C30.1868 19.7502 29.9444 20.1133 29.7059 20.4804C29.6598 20.5522 29.6138 20.622 29.5657 20.6918C28.7942 21.829 27.2232 23.6444 25.0892 23.6404C24.9369 23.6404 24.7806 23.6305 24.6223 23.6105C22.6145 23.3591 21.0416 21.5058 21.0396 19.3891C21.0396 17.7113 22.1096 16.0954 23.6445 15.461C24.8007 14.9842 26.2073 15.0919 27.3194 15.7443C28.3734 16.3627 29.1088 17.45 29.8181 18.5033C29.8702 18.5811 29.9243 18.6569 29.9764 18.7348L32.5693 15.0779C32.6174 15.0101 32.6675 14.9423 32.7176 14.8724C30.5575 12.0515 28.0889 10.673 25.1894 10.667C25.1854 10.667 25.1834 10.667 25.1794 10.667C20.4204 10.663 16.3948 14.645 16.3848 19.3632C16.3768 23.7781 19.8173 27.6045 24.2176 28.0753C27.5619 28.4344 30.5696 26.8185 33.1665 23.2754L35.9257 19.4031C36.1581 19.0879 36.3805 18.7607 36.5989 18.4415C37.5928 16.9831 38.5326 15.6066 40.312 15.2355C41.5683 14.9742 42.8688 15.2954 43.8827 16.1153C44.8966 16.9373 45.4777 18.1402 45.4757 19.415C45.4717 21.6853 43.6002 23.5886 41.3038 23.6604C38.9414 23.7222 37.5948 21.819 36.3825 20.0594L33.7776 23.7182C33.7295 23.7861 33.6774 23.8479 33.6293 23.9138C34.6192 25.2384 35.8856 26.597 37.709 27.395C40.7528 28.7257 44.3476 28.209 46.8703 26.0803C47.6919 25.3881 48.3712 24.5502 48.8942 23.5906C49.5935 22.3058 49.9642 20.8654 49.9682 19.425C49.9742 14.669 46.0929 10.7468 41.3139 10.681Z" fill="#CDA83A"/>
        <path d="M64.4739 28.131C64.4739 28.131 64.4739 19.2952 64.4739 19.2712H64.4719C64.4659 18.8104 64.3817 18.3575 64.2194 17.9246C64.1974 17.8588 64.1734 17.7989 64.1473 17.7391C64.0712 17.5575 63.979 17.378 63.8748 17.2064C63.8047 17.0927 63.7305 16.983 63.6504 16.8773C63.1674 16.2349 62.5142 15.7501 61.7588 15.4748C61.6947 15.4508 61.6305 15.4289 61.5664 15.4109C61.1737 15.2852 60.7589 15.2234 60.3321 15.2234C59.775 15.2234 59.234 15.3331 58.7231 15.5486C58.6129 15.5945 58.5026 15.6463 58.3904 15.7062V15.7281L58.3484 15.7301C58.2401 15.788 58.138 15.8498 58.0458 15.9117V15.9376L58.0077 15.9396C57.8494 16.0453 57.6971 16.165 57.5528 16.2947C57.3525 16.4763 57.1721 16.6738 57.0178 16.8812C56.9377 16.989 56.8615 17.0987 56.7954 17.2084C56.6532 17.4398 56.5369 17.6812 56.4488 17.9286C56.2804 18.3815 56.1943 18.8583 56.1943 19.3471V28.135H51.5996V19.5565C51.5996 14.8942 55.3206 10.9042 59.8933 10.6628C59.9534 10.6589 60.0155 10.6569 60.0756 10.6549C60.1678 10.6529 60.2439 10.6509 60.3201 10.6509H60.3421C60.5004 10.6509 60.6587 10.6549 60.813 10.6628C60.9693 10.6708 61.1276 10.6848 61.2859 10.7008C61.36 10.7087 61.4302 10.7187 61.5043 10.7287L61.5484 10.7347C61.6145 10.7446 61.6826 10.7526 61.7508 10.7646C61.8269 10.7766 61.9031 10.7905 61.9792 10.8045C62.0554 10.8185 62.1315 10.8344 62.2056 10.8504C62.2818 10.8663 62.3559 10.8843 62.4321 10.9022C62.5823 10.9382 62.7306 10.9781 62.8749 11.0219C62.947 11.0439 63.0212 11.0658 63.0933 11.0918C63.1634 11.1117 63.2376 11.1377 63.3077 11.1656C63.3778 11.1895 63.45 11.2175 63.5201 11.2454C63.6604 11.2993 63.7986 11.3591 63.9369 11.4209C63.9369 11.4209 64.0972 11.4948 64.1413 11.5167L64.3437 11.6185C64.4118 11.6524 64.4759 11.6863 64.542 11.7242C64.5861 11.7481 64.7344 11.8339 64.7344 11.8339C64.9969 11.9875 65.2494 12.1531 65.4858 12.3247C65.6061 12.4125 65.7223 12.5042 65.8385 12.596C65.9487 12.6878 66.0569 12.7775 66.1631 12.8713H66.1771L66.1932 12.8952C66.2994 12.993 66.4016 13.0908 66.5038 13.1905C66.5939 13.2823 66.6841 13.376 66.7703 13.4698C67.4195 12.7656 68.1689 12.179 69.0005 11.7242C69.1307 11.6524 69.265 11.5845 69.3972 11.5187L69.4333 11.5007L69.4353 11.5027C69.6898 11.381 69.9563 11.2693 70.2328 11.1696L70.2428 11.1656H70.2548C70.3089 11.1436 70.3811 11.1177 70.4532 11.0958C71.3409 10.8025 72.2686 10.6529 73.2084 10.6529C73.7735 10.6529 74.3365 10.7067 74.8836 10.8125C75.3304 10.9003 75.7733 11.0219 76.2001 11.1776C76.6008 11.3232 76.9835 11.4968 77.3442 11.6923L77.4244 11.7322C80.1736 13.2444 81.9048 16.163 81.9389 19.349V19.4029H77.3462V19.349C77.3462 17.2623 75.7793 15.5047 73.7033 15.2593C73.6432 15.2513 73.5831 15.2453 73.521 15.2414C73.521 15.2414 73.521 15.2414 73.519 15.2414C73.503 15.2414 73.4829 15.2394 73.4629 15.2374C73.4048 15.2334 73.3467 15.2314 73.2866 15.2314C73.2545 15.2294 73.2304 15.2294 73.2104 15.2294C73.2084 15.2294 73.2084 15.2294 73.2064 15.2294C72.7996 15.2294 72.3989 15.2872 72.0182 15.403C71.9881 15.4109 71.958 15.4209 71.928 15.4309C71.8298 15.4608 71.7396 15.4927 71.6495 15.5326C71.5152 15.5865 71.3749 15.6523 71.2327 15.7281C71.1104 15.794 70.9962 15.8618 70.894 15.9316C70.7818 16.0074 70.6776 16.0852 70.5734 16.171C70.4732 16.2528 70.3731 16.3426 70.2809 16.4384C69.8441 16.8713 69.5054 17.4059 69.303 17.9825C69.263 18.0902 69.2349 18.184 69.2109 18.2777C69.1147 18.6269 69.0666 18.988 69.0666 19.351V28.139H64.4739V28.131Z" fill="currentColor"/>
        <path d="M103.091 28.1311V19.3431C103.091 17.0709 101.236 15.2235 98.9533 15.2235C96.671 15.2235 94.8155 17.0709 94.8155 19.3431V19.397H90.2168V19.3431C90.2168 16.1771 91.9481 13.2584 94.7333 11.7263C96.0137 11.02 97.4725 10.647 98.9513 10.647C103.668 10.647 107.586 14.4654 107.686 19.1596C107.688 19.2195 107.688 19.2813 107.688 19.3451V28.1331H103.091V28.1311Z" fill="currentColor"/>
        <path opacity="0.4" d="M81.9406 19.397V19.3432C81.9046 16.1571 80.1753 13.2385 77.4261 11.7263L77.346 11.6864C76.9853 11.4909 76.6026 11.3173 76.2018 11.1717C75.775 11.016 75.3322 10.8944 74.8853 10.8066C74.3383 10.7008 73.7752 10.647 73.2102 10.647C72.2684 10.647 71.3426 10.7966 70.455 11.0899C70.3828 11.1138 70.3107 11.1377 70.2566 11.1597H70.2446L70.2345 11.1637C69.958 11.2634 69.6895 11.3771 69.437 11.4968L69.435 11.4948L69.399 11.5128C69.3148 11.5547 69.2306 11.6006 69.1465 11.6445V18.5571C69.1645 18.4614 69.1866 18.3656 69.2126 18.2718C69.2347 18.1781 69.2647 18.0863 69.3048 17.9766C69.5072 17.4 69.8438 16.8654 70.2826 16.4325C70.3748 16.3387 70.473 16.2489 70.5752 16.1651C70.6794 16.0813 70.7836 16.0035 70.8958 15.9257C70.998 15.8559 71.1122 15.7861 71.2344 15.7222C71.3767 15.6464 71.517 15.5806 71.6512 15.5267C71.7414 15.4888 71.8316 15.4549 71.9297 15.425C71.9598 15.415 71.9919 15.405 72.0199 15.3971C72.4006 15.2813 72.8014 15.2235 73.2082 15.2235H73.2122C73.2322 15.2235 73.2562 15.2235 73.2883 15.2255C73.3484 15.2255 73.4065 15.2275 73.4646 15.2315C73.4847 15.2335 73.5047 15.2355 73.5207 15.2355H73.5228C73.5849 15.2394 73.645 15.2454 73.7051 15.2534C75.779 15.4988 77.346 17.2564 77.346 19.3432V19.397H81.9406Z" fill="url(#paint2_linear_nav)"/>
        <path opacity="0.4" d="M102.925 11.6111C101.728 10.9946 100.378 10.6455 98.9532 10.6455C97.4745 10.6455 96.0157 11.0186 94.7353 11.7248C91.948 13.257 90.2188 16.1756 90.2188 19.3417V19.3956H94.8174V19.3417C94.8174 17.0694 96.6729 15.222 98.9552 15.222C100.835 15.222 102.424 16.4749 102.927 18.1866V11.6111H102.925Z" fill="url(#paint3_linear_nav)"/>
        <path d="M86.0802 30.7745C81.3253 30.7745 77.4079 26.9261 77.3458 22.196C77.3438 22.1601 77.3438 22.1182 77.3438 22.0803V7.22559H81.9424V21.9905C81.9424 24.2628 83.7979 26.1102 86.0802 26.1102C88.3606 26.1102 90.2161 24.2628 90.2161 21.9905V7.22559H94.8147V22.0783C94.8147 22.1162 94.8147 22.1581 94.8127 22.196C94.7506 26.9261 90.8332 30.7745 86.0802 30.7745Z" fill="currentColor"/>
        <path d="M90.2584 4.57574C88.99 4.57574 87.9601 3.54849 87.9601 2.28787C87.9601 1.02725 88.99 0 90.2584 0C91.5268 0 92.5567 1.02725 92.5567 2.28787C92.5567 3.54849 91.5248 4.57574 90.2584 4.57574ZM81.8726 4.57574C80.6042 4.57574 79.5742 3.54849 79.5742 2.28787C79.5742 1.02725 80.6042 0 81.8726 0C83.141 0 84.1709 1.02725 84.1709 2.28787C84.1709 3.54849 83.139 4.57574 81.8726 4.57574Z" fill="#CDA83A"/>
        <path d="M13.8001 23.2724C13.1709 23.452 12.5056 23.5497 11.8183 23.5497C7.82878 23.5497 4.59468 20.3298 4.59468 16.3578C4.59468 12.3857 7.82878 9.16583 11.8183 9.16583C13.6798 9.16583 15.375 9.87006 16.6555 11.0212C17.7575 9.91595 19.066 9.01421 20.5127 8.39177C18.3547 6.05763 15.2588 4.59131 11.8183 4.59131C5.29199 4.59131 0 9.86009 0 16.3598C0 22.8595 5.29199 28.1262 11.8183 28.1262C13.3592 28.1262 14.828 27.829 16.1786 27.2943C16.7076 27.0849 17.2185 26.8395 17.7054 26.5602C16.6374 25.455 15.8079 24.1243 15.3049 22.658C14.834 22.9173 14.3291 23.1228 13.8001 23.2724Z" fill="currentColor"/>
        <defs>
          <linearGradient id="paint0_linear_nav" x1="128.89" y1="17.4209" x2="128.776" y2="14.8075" gradientUnits="userSpaceOnUse">
            <stop stopColor="currentColor" stopOpacity="0"/>
            <stop offset="0.2609" stopColor="#ADA8AA" stopOpacity="0.2609"/>
            <stop offset="0.6182" stopColor="#595355" stopOpacity="0.6182"/>
            <stop offset="0.8735" stopColor="#2F2B2C" stopOpacity="0.8735"/>
            <stop offset="1" stopColor="#211E1F"/>
          </linearGradient>
          <linearGradient id="paint1_linear_nav" x1="112.429" y1="12.985" x2="121.332" y2="12.985" gradientUnits="userSpaceOnUse">
            <stop stopColor="#211E1F"/>
            <stop offset="0.7705" stopColor="currentColor" stopOpacity="0"/>
          </linearGradient>
          <linearGradient id="paint2_linear_nav" x1="68.4236" y1="15.0211" x2="81.2191" y2="15.0211" gradientUnits="userSpaceOnUse">
            <stop offset="0.2374" stopColor="currentColor" stopOpacity="0"/>
            <stop offset="0.9413" stopColor="#211E1F"/>
          </linearGradient>
          <linearGradient id="paint3_linear_nav" x1="91.427" y1="15.0216" x2="104.895" y2="15.0216" gradientUnits="userSpaceOnUse">
            <stop offset="0.0587" stopColor="#211E1F"/>
            <stop offset="0.7626" stopColor="currentColor" stopOpacity="0"/>
          </linearGradient>
        </defs>
      </svg>
    </Box>
  );
};

export const NavigationMenu: React.FC<NavigationMenuProps> = ({
  items,
  collapsed = false,
  onItemClick,
}) => {
  const { t } = useTranslation();
  const location = useLocation();
  const navigate = useNavigate();
  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());

  const handleItemClick = (item: NavigationItem) => {
    if (item.disabled) return;

    if (item.children && item.children.length > 0) {
      const newExpanded = new Set(expandedItems);
      if (newExpanded.has(item.id)) {
        newExpanded.delete(item.id);
      } else {
        newExpanded.add(item.id);
      }
      setExpandedItems(newExpanded);
    } else if (item.path) {
      navigate(item.path);
      onItemClick?.(item);
    }
  };

  const isItemActive = (item: NavigationItem): boolean => {
    if (item.path) {
      return location.pathname === item.path || 
             (item.path !== '/' && location.pathname.startsWith(item.path));
    }
    return false;
  };

  const hasActiveChild = (item: NavigationItem): boolean => {
    if (!item.children) return false;
    return item.children.some(child => 
      isItemActive(child) || hasActiveChild(child)
    );
  };

  const renderNavigationItem = (item: NavigationItem, level: number = 0) => {
    const isActive = isItemActive(item);
    const hasChildren = item.children && item.children.length > 0;
    const isExpanded = expandedItems.has(item.id);
    const hasActiveDescendant = hasActiveChild(item);

    const listItemContent = (
      <ListItemButton
        onClick={() => handleItemClick(item)}
        disabled={item.disabled}
        sx={{
          pl: 2 + level * 2,
          pr: 2,
          py: 1,
          borderRadius: 1,
          mx: 1,
          mb: 0.5,
          minHeight: 48,
          '&.Mui-selected': {
            backgroundColor: 'primary.main',
            color: 'primary.contrastText',
            '&:hover': {
              backgroundColor: 'primary.dark',
            },
            '& .MuiListItemIcon-root': {
              color: 'primary.contrastText',
            },
          },
          '&:hover': {
            backgroundColor: isActive ? 'primary.dark' : 'action.hover',
          },
          ...(hasActiveDescendant && !isActive && {
            backgroundColor: 'action.selected',
          }),
        }}
        selected={isActive}
      >
        <ListItemIcon
          sx={{
            minWidth: collapsed ? 0 : 40,
            mr: collapsed ? 0 : 1,
            justifyContent: 'center',
            color: isActive ? 'inherit' : 'text.secondary',
          }}
        >
          {level > 0 ? (
            <CircleIcon sx={{ fontSize: 8 }} />
          ) : (
            item.icon
          )}
        </ListItemIcon>

        {!collapsed && (
          <>
            <ListItemText
              primary={
                <Typography
                  variant="body2"
                  fontWeight={isActive ? 600 : 400}
                  sx={{
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    whiteSpace: 'nowrap',
                  }}
                >
                  {item.label}
                </Typography>
              }
            />

            {item.badge && (
              <Badge
                badgeContent={item.badge}
                color="error"
                sx={{ mr: 1 }}
              />
            )}

            {hasChildren && (
              isExpanded ? <ExpandLess /> : <ExpandMore />
            )}
          </>
        )}
      </ListItemButton>
    );

    const wrappedContent = collapsed && item.label ? (
      <Tooltip title={item.label} placement="right" arrow>
        {listItemContent}
      </Tooltip>
    ) : (
      listItemContent
    );

    return (
      <React.Fragment key={item.id}>
        {item.divider && level === 0 && (
          <Divider sx={{ my: 1, mx: 2 }} />
        )}
        
        {item.category && level === 0 && !collapsed && (
          <Typography
            variant="overline"
            sx={{
              px: 3,
              py: 1,
              color: 'text.secondary',
              fontSize: '0.75rem',
              fontWeight: 600,
              letterSpacing: 1,
            }}
          >
            {item.category}
          </Typography>
        )}

        <ListItem disablePadding>
          {wrappedContent}
        </ListItem>

        {hasChildren && isExpanded && !collapsed && (
          <Collapse in={isExpanded} timeout="auto" unmountOnExit>
            <List component="div" disablePadding>
              {item.children!.map(child => renderNavigationItem(child, level + 1))}
            </List>
          </Collapse>
        )}
      </React.Fragment>
    );
  };

  return (
    <Box sx={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column' }}>
      {/* Logo Section */}
      <NavigationLogo collapsed={collapsed} />
      
      {!collapsed && <Divider sx={{ mx: 2, mb: 2 }} />}
      
      {/* Navigation Items */}
      <List
        component="nav"
        sx={{
          flexGrow: 1,
          py: 0,
          '& .MuiListItemButton-root': {
            borderRadius: 1,
          },
        }}
      >
        {items.map(item => renderNavigationItem(item))}
      </List>
    </Box>
  );
}; 