THIS SHOULD BE A LINTER ERROR# ================================================================
# CoomÜnity Monorepo - Docker Compose para Producción
# Configuración completa del ecosistema en producción
# ================================================================

version: '3.8'

services:
  # ================================================================
  # Backend NestJS - API Principal
  # ================================================================
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.simple
    container_name: coomunity-backend-prod
    ports:
      - "3002:3002"
    environment:
      # Variables de entorno de producción
      NODE_ENV: production
      PORT: 3002
      
      # Base de datos
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      
      # JWT y autenticación
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001}
      
      # Otras configuraciones
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      APP_NAME: CoomÜnity
      APP_VERSION: 1.0.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - coomunity-network
    volumes:
      - backend_uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.coomunity.service=backend"
      - "com.coomunity.environment=production"

  # ================================================================
  # SuperApp Frontend - Aplicación Principal de Usuarios
  # ================================================================
  superapp:
    build:
      context: ./Demo/apps/superapp-unified
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:3002}
        VITE_APP_ENV: production
    container_name: coomunity-superapp-prod
    ports:
      - "3001:80"
    environment:
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - coomunity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.coomunity.service=superapp"
      - "com.coomunity.environment=production"

  # ================================================================
  # Gamifier Admin Frontend - Panel de Administración
  # ================================================================
  admin:
    build:
      context: ./apps/admin-frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:3002}
        VITE_APP_ENV: production
    container_name: coomunity-admin-prod
    ports:
      - "3000:80"
    environment:
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - coomunity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.coomunity.service=admin"
      - "com.coomunity.environment=production"

  # ================================================================
  # PostgreSQL - Base de Datos Principal
  # ================================================================
  postgres:
    image: postgres:15-alpine
    container_name: coomunity-postgres-prod
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME:-coomunity_prod}
      POSTGRES_USER: ${DB_USER:-coomunity_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - coomunity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-coomunity_user} -d ${DB_NAME:-coomunity_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.coomunity.service=postgres"
      - "com.coomunity.environment=production"

  # ================================================================
  # Redis - Cache y Sessions
  # ================================================================
  redis:
    image: redis:7-alpine
    container_name: coomunity-redis-prod
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - coomunity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.coomunity.service=redis"
      - "com.coomunity.environment=production"

  # ================================================================
  # Nginx Reverse Proxy (Opcional)
  # ================================================================
  nginx:
    image: nginx:alpine
    container_name: coomunity-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - superapp
      - admin
    networks:
      - coomunity-network
    restart: unless-stopped
    profiles:
      - proxy
    labels:
      - "com.coomunity.service=nginx"
      - "com.coomunity.environment=production"

  # ================================================================
  # Prometheus - Monitoring (Opcional)
  # ================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: coomunity-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - coomunity-network
    restart: unless-stopped
    profiles:
      - monitoring
    labels:
      - "com.coomunity.service=prometheus"
      - "com.coomunity.environment=production"

  # ================================================================
  # Grafana - Dashboards (Opcional)
  # ================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: coomunity-grafana-prod
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - coomunity-network
    restart: unless-stopped
    profiles:
      - monitoring
    labels:
      - "com.coomunity.service=grafana"
      - "com.coomunity.environment=production"

# ================================================================
# Networks
# ================================================================
networks:
  coomunity-network:
    driver: bridge
    name: coomunity-prod-network

# ================================================================
# Volumes
# ================================================================
volumes:
  postgres_data:
    name: coomunity-postgres-prod-data
  redis_data:
    name: coomunity-redis-prod-data
  backend_uploads:
    name: coomunity-backend-uploads
  prometheus_data:
    name: coomunity-prometheus-data
  grafana_data:
    name: coomunity-grafana-data 