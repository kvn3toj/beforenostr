import { ICosmicBrain, CosmicState } from './interfaces/ICosmicBrain';
import { PatternPrediction, Mission, HarmonyMetrics, EvolutionReport, CosmicConfig } from './types';
export declare class CosmicBrain implements ICosmicBrain {
    private config;
    private state;
    private metrics;
    private isInitialized;
    private evolutionTimer?;
    private harmonyTimer?;
    private missionTimer?;
    constructor(config?: CosmicConfig);
    initialize(): Promise<void>;
    selfImprove(): Promise<EvolutionReport>;
    evaluateEvolution(): Promise<EvolutionReport>;
    predictPatterns(): Promise<PatternPrediction[]>;
    assignMissions(): Promise<Mission[]>;
    analyzeTeamHarmony(): Promise<HarmonyMetrics>;
    suggestHarmonyImprovements(): Promise<string[]>;
    getCosmicState(): Promise<CosmicState>;
    resetCosmic(): Promise<void>;
    validatePredictions(): Promise<PatternPrediction[]>;
    monitorMissions(): Promise<Mission[]>;
    private validateConfiguration;
    private initializeState;
    private initializeMetrics;
    private createDefaultHarmony;
    private log;
    private generateId;
    private generateVersion;
    private getCurrentVersion;
    private loadPreviousState;
    private saveState;
    private performInitialAnalysis;
    private startAutomaticEvolution;
    private startAutomaticHarmonyAnalysis;
    private startAutomaticMissionAssignment;
    private stopAutomaticProcesses;
    private analyzeCurrentState;
    private identifyImprovementAreas;
    private generateEvolutionChanges;
    private applyEvolutionChanges;
    private evaluateEvolutionImpact;
    private calculateEvolutionMetrics;
    private generateEvolutionRecommendations;
    private predictNextEvolution;
    private predictArchitecturalPatterns;
    private predictCollaborationPatterns;
    private predictPhilosophyPatterns;
    private predictTechnicalPatterns;
    private getImpactWeight;
    private analyzeCollaborationMetrics;
    private analyzePhilosophyMetrics;
    private analyzeTechnicalMetrics;
    private analyzeCommunicationMetrics;
    private analyzeWellbeingMetrics;
    private calculateOverallHarmony;
    private analyzeHarmonyTrends;
    private updateAverageHarmony;
    private updateAveragePhilosophy;
    private identifyProjectGaps;
    private identifyOpportunities;
    private generateCandidateMissions;
    private prioritizeMissions;
    private calculateMissionScore;
    private getPriorityWeight;
    private assignMissionResources;
    private getHistoricalMetrics;
    private getCurrentMetrics;
    private calculateImpactDifference;
    private generateEvaluationRecommendations;
    private extractCriticalLearnings;
    private restoreCriticalLearnings;
}
