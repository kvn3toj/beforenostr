/**
 * üéØ Dashboard Type Definitions
 *
 * Definiciones de tipos TypeScript para el AI Cosmic Brain Dashboard.
 * Implementa principios de tipado estricto y nombres descriptivos
 * para m√°xima mantenibilidad y claridad del c√≥digo.
 *
 * Filosof√≠a aplicada:
 * - Bien Com√∫n: Tipos reutilizables que benefician todo el equipo
 * - Neguentrop√≠a: Estructura clara y organizada de tipos
 * - TypeScript estricto: Prevenci√≥n de errores en tiempo de compilaci√≥n
 */

// Import base types from the main types file
export type GuardianType = 'philosophy' | 'architecture' | 'performance' | 'ux';

export interface AnalysisReport {
  id: string;
  guardianType: GuardianType;
  timestamp: Date;
  score: number;
  recommendations: string[];
  issues: string[];
  metadata: Record<string, any>;
  philosophyAlignment?: PhilosophyAlignment;
  isActive?: boolean;
  criticalIssues?: number;
}

export interface PhilosophyAlignment {
  overallScore: number;
  principles: Record<string, number>;
  recommendations: string[];
}

// ============================================================================
// üéõÔ∏è Dashboard Core Types
// ============================================================================

/**
 * Configuraci√≥n principal del dashboard
 */
export interface DashboardConfig {
  /** Intervalo de actualizaci√≥n autom√°tica en milisegundos */
  refreshIntervalMs: number;
  /** Configuraci√≥n visual del tema */
  theme: DashboardTheme;
  /** Configuraci√≥n de alertas */
  alerts: AlertConfiguration;
  /** Configuraci√≥n de m√©tricas visibles */
  visibleMetrics: VisibleMetricsConfig;
  /** Configuraci√≥n de guardians activos */
  enabledGuardians: GuardianType[];
}

/**
 * Configuraci√≥n visual del dashboard
 */
export interface DashboardTheme {
  /** Color primario del tema */
  primaryColor: string;
  /** Color de acento */
  accentColor: string;
  /** Modo oscuro activado */
  darkMode: boolean;
  /** Configuraci√≥n de colores para estados */
  statusColors: StatusColorConfiguration;
  /** Configuraci√≥n de tipograf√≠a */
  typography: TypographyConfiguration;
}

/**
 * Configuraci√≥n de colores para diferentes estados
 */
export interface StatusColorConfiguration {
  excellent: string;
  good: string;
  warning: string;
  critical: string;
  neutral: string;
}

/**
 * Configuraci√≥n de tipograf√≠a
 */
export interface TypographyConfiguration {
  fontFamily: string;
  fontSize: {
    small: string;
    medium: string;
    large: string;
    xlarge: string;
  };
  fontWeight: {
    light: number;
    normal: number;
    bold: number;
  };
}

// ============================================================================
// üîî Alert and Notification Types
// ============================================================================

/**
 * Configuraci√≥n de alertas del sistema
 */
export interface AlertConfiguration {
  /** Habilitar alertas cr√≠ticas */
  enableCriticalAlerts: boolean;
  /** Habilitar alertas de advertencia */
  enableWarningAlerts: boolean;
  /** Umbral para alertas de score bajo */
  lowScoreThreshold: number;
  /** Umbral para alertas de problemas cr√≠ticos */
  criticalIssuesThreshold: number;
  /** Configuraci√≥n de sonidos */
  soundSettings: AlertSoundSettings;
}

/**
 * Configuraci√≥n de sonidos de alerta
 */
export interface AlertSoundSettings {
  enableSounds: boolean;
  criticalAlertSound: string;
  warningAlertSound: string;
  volume: number; // 0-1
}

/**
 * Alerta cr√≠tica del sistema
 */
export interface CriticalAlert {
  /** ID √∫nico de la alerta */
  id: string;
  /** Tipo de guardian que gener√≥ la alerta */
  guardianType: GuardianType;
  /** Nivel de severidad */
  severity: AlertSeverity;
  /** Mensaje descriptivo */
  message: string;
  /** Timestamp de cuando ocurri√≥ */
  timestamp: Date;
  /** Contexto adicional */
  context?: AlertContext;
  /** Si la alerta ha sido reconocida */
  acknowledged: boolean;
  /** Usuario que reconoci√≥ la alerta */
  acknowledgedBy?: string;
  /** Timestamp del reconocimiento */
  acknowledgedAt?: Date;
}

/**
 * Niveles de severidad de alertas
 */
export type AlertSeverity = 'critical' | 'high' | 'medium' | 'low' | 'info';

/**
 * Contexto adicional para alertas
 */
export interface AlertContext {
  /** Componente espec√≠fico afectado */
  component?: string;
  /** Archivo o m√≥dulo relacionado */
  file?: string;
  /** L√≠nea de c√≥digo si aplica */
  line?: number;
  /** M√©tricas relacionadas */
  relatedMetrics?: Record<string, number>;
  /** Recomendaciones espec√≠ficas */
  recommendations?: string[];
}

// ============================================================================
// üìä Metrics and Data Types
// ============================================================================

/**
 * Configuraci√≥n de m√©tricas visibles en el dashboard
 */
export interface VisibleMetricsConfig {
  /** Mostrar m√©tricas de salud general */
  showOverallHealth: boolean;
  /** Mostrar alineaci√≥n filos√≥fica */
  showPhilosophyAlignment: boolean;
  /** Mostrar m√©tricas de performance */
  showPerformanceMetrics: boolean;
  /** Mostrar m√©tricas de UX */
  showUXMetrics: boolean;
  /** Mostrar m√©tricas de arquitectura */
  showArchitectureMetrics: boolean;
  /** Mostrar tendencias hist√≥ricas */
  showTrends: boolean;
  /** Mostrar recomendaciones */
  showRecommendations: boolean;
}

/**
 * M√©tricas de salud del sistema completo
 */
export interface SystemHealthMetrics {
  /** Score general del sistema (0-1) */
  overallScore: number;
  /** N√∫mero de guardians activos */
  guardiansActive: number;
  /** Total de recomendaciones pendientes */
  totalRecommendations: number;
  /** N√∫mero de problemas cr√≠ticos */
  criticalIssues: number;
  /** √öltima evoluci√≥n del sistema */
  lastEvolution: Date | null;
  /** Nivel de alineaci√≥n filos√≥fica */
  philosophyAlignment: number;
  /** Tendencia de salud (comparado con periodo anterior) */
  healthTrend: TrendData;
  /** Tiempo de actividad del sistema */
  uptime: number; // en milisegundos
}

/**
 * Datos de tendencia para m√©tricas
 */
export interface TrendData {
  /** Direcci√≥n de la tendencia */
  direction: 'up' | 'down' | 'stable';
  /** Porcentaje de cambio */
  percentage: number;
  /** Si el cambio es significativo */
  isSignificant: boolean;
  /** Periodo de comparaci√≥n */
  comparisonPeriod: string;
}

/**
 * Colecci√≥n de reportes de todos los guardians
 */
export interface GuardianReportsCollection {
  philosophy?: AnalysisReport;
  architecture?: AnalysisReport;
  ux?: AnalysisReport;
  performance?: AnalysisReport;
}

// ============================================================================
// üõ°Ô∏è Guardian Status Types
// ============================================================================

/**
 * Estado detallado de un guardian espec√≠fico
 */
export interface GuardianStatusData {
  /** Tipo de guardian */
  type: GuardianType;
  /** Nombre legible del guardian */
  name: string;
  /** Score actual (0-1) */
  score: number;
  /** Estado de salud general */
  status: GuardianHealthStatus;
  /** √öltima vez que se ejecut√≥ an√°lisis */
  lastAnalysis: Date | null;
  /** N√∫mero de problemas cr√≠ticos detectados */
  criticalIssues: number;
  /** N√∫mero de advertencias */
  warnings: number;
  /** Si el guardian est√° activo */
  isActive: boolean;
  /** Tiempo promedio de an√°lisis */
  averageAnalysisTime: number; // en milisegundos
  /** Tendencia del score */
  scoreTrend: TrendData;
  /** Configuraci√≥n espec√≠fica del guardian */
  configuration: GuardianConfiguration;
}

/**
 * Estados de salud de un guardian
 */
export type GuardianHealthStatus = 'excellent' | 'good' | 'warning' | 'critical' | 'inactive';

/**
 * Configuraci√≥n espec√≠fica de un guardian
 */
export interface GuardianConfiguration {
  /** Intervalo de an√°lisis en milisegundos */
  analysisInterval: number;
  /** Umbrales personalizados */
  thresholds: GuardianThresholds;
  /** Configuraci√≥n espec√≠fica del tipo de guardian */
  specificConfig: Record<string, any>;
  /** Si est√° habilitado para an√°lisis autom√°tico */
  autoAnalysisEnabled: boolean;
}

/**
 * Umbrales configurables para guardians
 */
export interface GuardianThresholds {
  /** Umbral para estado excelente */
  excellentThreshold: number;
  /** Umbral para estado bueno */
  goodThreshold: number;
  /** Umbral para estado de advertencia */
  warningThreshold: number;
  /** Umbral para estado cr√≠tico */
  criticalThreshold: number;
}

// ============================================================================
// üé® UI Component Types
// ============================================================================

/**
 * Props para el componente principal del dashboard
 */
export interface CosmicDashboardProps {
  /** Configuraci√≥n del dashboard */
  config: DashboardConfig;
  /** Callback para cambios de configuraci√≥n */
  onConfigChange?: (config: DashboardConfig) => void;
  /** Callback para alertas cr√≠ticas */
  onCriticalAlert?: (alert: CriticalAlert) => void;
  /** Callback para navegaci√≥n a vista detallada */
  onNavigateToDetail?: (guardianType: GuardianType) => void;
  /** Datos iniciales (opcional) */
  initialData?: DashboardInitialData;
  /** Modo de solo lectura */
  readOnly?: boolean;
}

/**
 * Datos iniciales para el dashboard
 */
export interface DashboardInitialData {
  guardianReports?: GuardianReportsCollection;
  systemHealth?: SystemHealthMetrics;
  philosophyAlignment?: PhilosophyAlignment;
  alerts?: CriticalAlert[];
}

/**
 * Props para tarjetas de guardian
 */
export interface GuardianCardProps {
  /** Datos del guardian */
  guardianData: GuardianStatusData;
  /** Configuraci√≥n de tema */
  theme: DashboardTheme;
  /** Callback para click en la tarjeta */
  onClick?: (guardianType: GuardianType) => void;
  /** Si mostrar detalles expandidos */
  expanded?: boolean;
  /** Configuraci√≥n de m√©tricas visibles */
  visibleMetrics: VisibleMetricsConfig;
}

/**
 * Props para gr√°ficos de m√©tricas
 */
export interface MetricsChartProps {
  /** Datos para el gr√°fico */
  data: ChartDataPoint[];
  /** Tipo de gr√°fico */
  chartType: ChartType;
  /** Configuraci√≥n de colores */
  colors: string[];
  /** T√≠tulo del gr√°fico */
  title: string;
  /** Descripci√≥n opcional */
  description?: string;
  /** Altura del gr√°fico */
  height?: number;
  /** Si mostrar leyenda */
  showLegend?: boolean;
}

/**
 * Tipos de gr√°ficos disponibles
 */
export type ChartType = 'line' | 'bar' | 'pie' | 'donut' | 'area' | 'radar';

/**
 * Punto de datos para gr√°ficos
 */
export interface ChartDataPoint {
  /** Etiqueta del punto */
  label: string;
  /** Valor num√©rico */
  value: number;
  /** Color espec√≠fico (opcional) */
  color?: string;
  /** Metadatos adicionales */
  metadata?: Record<string, any>;
}

// ============================================================================
// üîÑ State Management Types
// ============================================================================

/**
 * Estado global del dashboard
 */
export interface DashboardState {
  /** Configuraci√≥n actual */
  config: DashboardConfig;
  /** Datos de guardians */
  guardianData: Record<GuardianType, GuardianStatusData>;
  /** M√©tricas del sistema */
  systemMetrics: SystemHealthMetrics;
  /** Alertas activas */
  activeAlerts: CriticalAlert[];
  /** Estado de carga */
  loading: DashboardLoadingState;
  /** Errores actuales */
  errors: DashboardError[];
  /** √öltima actualizaci√≥n */
  lastUpdate: Date | null;
  /** Configuraci√≥n de auto-refresh */
  autoRefresh: AutoRefreshState;
}

/**
 * Estados de carga del dashboard
 */
export interface DashboardLoadingState {
  /** Carga inicial */
  initialLoad: boolean;
  /** Carga de datos de guardians */
  guardianData: boolean;
  /** Carga de m√©tricas del sistema */
  systemMetrics: boolean;
  /** Carga de configuraci√≥n */
  configuration: boolean;
}

/**
 * Error del dashboard
 */
export interface DashboardError {
  /** ID √∫nico del error */
  id: string;
  /** Tipo de error */
  type: DashboardErrorType;
  /** Mensaje del error */
  message: string;
  /** Timestamp del error */
  timestamp: Date;
  /** Contexto del error */
  context?: Record<string, any>;
  /** Si el error ha sido reconocido */
  acknowledged: boolean;
}

/**
 * Tipos de errores del dashboard
 */
export type DashboardErrorType =
  | 'data_fetch_error'
  | 'configuration_error'
  | 'guardian_error'
  | 'network_error'
  | 'validation_error'
  | 'unknown_error';

/**
 * Estado del auto-refresh
 */
export interface AutoRefreshState {
  /** Si est√° habilitado */
  enabled: boolean;
  /** Intervalo en milisegundos */
  interval: number;
  /** Tiempo restante hasta pr√≥xima actualizaci√≥n */
  nextUpdateIn: number;
  /** Si est√° pausado temporalmente */
  paused: boolean;
}

// ============================================================================
// üì° API and Data Fetching Types
// ============================================================================

/**
 * Respuesta de la API para datos del dashboard
 */
export interface DashboardAPIResponse {
  /** Datos de guardians */
  guardians: GuardianReportsCollection;
  /** M√©tricas del sistema */
  systemHealth: SystemHealthMetrics;
  /** Alineaci√≥n filos√≥fica */
  philosophyAlignment: PhilosophyAlignment;
  /** Alertas activas */
  alerts: CriticalAlert[];
  /** Timestamp de la respuesta */
  timestamp: Date;
  /** Versi√≥n de la API */
  apiVersion: string;
}

/**
 * Par√°metros para obtener datos del dashboard
 */
export interface DashboardDataParams {
  /** Guardians espec√≠ficos a incluir */
  includeGuardians?: GuardianType[];
  /** Si incluir datos hist√≥ricos */
  includeHistory?: boolean;
  /** Rango de tiempo para datos hist√≥ricos */
  timeRange?: TimeRange;
  /** Nivel de detalle */
  detailLevel?: 'basic' | 'detailed' | 'comprehensive';
}

/**
 * Rango de tiempo para consultas
 */
export interface TimeRange {
  /** Fecha de inicio */
  start: Date;
  /** Fecha de fin */
  end: Date;
  /** Granularidad de los datos */
  granularity?: 'minute' | 'hour' | 'day' | 'week' | 'month';
}

// ============================================================================
// üéØ Philosophy-Specific Types
// ============================================================================

/**
 * M√©tricas espec√≠ficas de alineaci√≥n filos√≥fica Coom√únity
 */
export interface CoomUnityPhilosophyMetrics {
  /** Bien Com√∫n - Priorizaci√≥n del bien com√∫n sobre el particular */
  bienComun: PhilosophyPrincipleMetric;
  /** Ayni - Reciprocidad y equilibrio */
  ayni: PhilosophyPrincipleMetric;
  /** Cooperaci√≥n sobre Competici√≥n */
  cooperacion: PhilosophyPrincipleMetric;
  /** Econom√≠a Sagrada */
  economiaSagrada: PhilosophyPrincipleMetric;
  /** Metan√∂ia - Transformaci√≥n consciente */
  metanoia: PhilosophyPrincipleMetric;
  /** Neguentrop√≠a - Orden consciente */
  neguentropia: PhilosophyPrincipleMetric;
  /** Vocaci√≥n - Prop√≥sito aut√©ntico */
  vocacion: PhilosophyPrincipleMetric;
}

/**
 * M√©trica de un principio filos√≥fico espec√≠fico
 */
export interface PhilosophyPrincipleMetric {
  /** Score del principio (0-1) */
  score: number;
  /** Peso del principio en el c√°lculo general */
  weight: number;
  /** Nivel de implementaci√≥n */
  implementationLevel: ImplementationLevel;
  /** Recomendaciones espec√≠ficas */
  recommendations: string[];
  /** Ejemplos de buenas pr√°cticas encontradas */
  goodPractices: string[];
  /** Antipatrones detectados */
  antiPatterns: string[];
}

/**
 * Niveles de implementaci√≥n de principios
 */
export type ImplementationLevel =
  | 'not_implemented'
  | 'basic_implementation'
  | 'good_implementation'
  | 'excellent_implementation'
  | 'exemplary_implementation';

// ============================================================================
// üîß Utility and Helper Types
// ============================================================================

/**
 * Resultado de validaci√≥n
 */
export interface ValidationResult {
  /** Si la validaci√≥n fue exitosa */
  isValid: boolean;
  /** Lista de errores encontrados */
  errors: string[];
  /** Lista de advertencias */
  warnings: string[];
  /** Contexto adicional */
  context?: Record<string, any>;
}

/**
 * Configuraci√≥n de exportaci√≥n de datos
 */
export interface ExportConfiguration {
  /** Formato de exportaci√≥n */
  format: ExportFormat;
  /** Datos a incluir */
  includeData: ExportDataSelection;
  /** Configuraci√≥n de filtros */
  filters: ExportFilters;
  /** Configuraci√≥n de formato */
  formatOptions: ExportFormatOptions;
}

/**
 * Formatos de exportaci√≥n disponibles
 */
export type ExportFormat = 'json' | 'csv' | 'xlsx' | 'pdf' | 'xml';

/**
 * Selecci√≥n de datos para exportar
 */
export interface ExportDataSelection {
  guardianReports: boolean;
  systemMetrics: boolean;
  alerts: boolean;
  configuration: boolean;
  historicalData: boolean;
}

/**
 * Filtros para exportaci√≥n
 */
export interface ExportFilters {
  timeRange?: TimeRange;
  guardianTypes?: GuardianType[];
  severityLevels?: AlertSeverity[];
  includeAcknowledged?: boolean;
}

/**
 * Opciones de formato para exportaci√≥n
 */
export interface ExportFormatOptions {
  includeHeaders?: boolean;
  dateFormat?: string;
  numberFormat?: string;
  encoding?: string;
  compression?: boolean;
}

// ============================================================================
// üîç Automated Validation Engine Types
// ============================================================================

/**
 * Regla de validaci√≥n configurable
 */
export interface ValidationRule {
  /** ID √∫nico de la regla */
  id: string;
  /** Nombre descriptivo */
  name: string;
  /** Descripci√≥n detallada */
  description: string;
  /** Tipo de guardian al que aplica */
  guardianType: GuardianType;
  /** Prioridad de la regla */
  priority: ValidationPriority;
  /** Si la regla est√° habilitada */
  enabled: boolean;
  /** Si permite auto-correcci√≥n */
  autoFix: boolean;
  /** Configuraci√≥n de programaci√≥n */
  schedule?: ValidationScheduleConfig;
  /** Par√°metros espec√≠ficos */
  parameters: Record<string, any>;
  /** Metadatos de la regla */
  metadata: ValidationRuleMetadata;
}

/**
 * Prioridades de validaci√≥n
 */
export type ValidationPriority = 'low' | 'medium' | 'high' | 'critical';

/**
 * Configuraci√≥n de programaci√≥n para validaciones
 */
export interface ValidationScheduleConfig {
  /** Tipo de programaci√≥n */
  type: ScheduleType;
  /** Valor de la programaci√≥n */
  value: string | number;
  /** Zona horaria */
  timezone?: string;
  /** Condiciones adicionales */
  conditions?: ScheduleCondition[];
  /** Pol√≠tica de reintentos */
  retryPolicy?: RetryPolicy;
}

/**
 * Tipos de programaci√≥n disponibles
 */
export type ScheduleType = 'interval' | 'cron' | 'daily' | 'weekly' | 'monthly' | 'trigger';

/**
 * Condici√≥n para programaci√≥n
 */
export interface ScheduleCondition {
  /** Tipo de condici√≥n */
  type: ConditionType;
  /** Valor de la condici√≥n */
  value: any;
  /** Operador de comparaci√≥n */
  operator: ConditionOperator;
}

/**
 * Tipos de condiciones
 */
export type ConditionType = 'time_range' | 'day_of_week' | 'file_change' | 'git_commit' | 'system_load';

/**
 * Operadores de condici√≥n
 */
export type ConditionOperator = 'equals' | 'contains' | 'greater_than' | 'less_than' | 'between';

/**
 * Pol√≠tica de reintentos
 */
export interface RetryPolicy {
  /** M√°ximo n√∫mero de reintentos */
  maxRetries: number;
  /** Multiplicador de backoff */
  backoffMultiplier: number;
  /** Tiempo m√°ximo de backoff */
  maxBackoffTime: number;
}

/**
 * Metadatos de regla de validaci√≥n
 */
export interface ValidationRuleMetadata {
  /** Fecha de creaci√≥n */
  createdAt: Date;
  /** Fecha de √∫ltima actualizaci√≥n */
  updatedAt: Date;
  /** Autor de la regla */
  author: string;
  /** Versi√≥n de la regla */
  version: string;
  /** Tags descriptivos */
  tags?: string[];
  /** Documentaci√≥n adicional */
  documentation?: string;
}

/**
 * Ejecuci√≥n de validaci√≥n
 */
export interface ValidationExecution {
  /** ID √∫nico de la ejecuci√≥n */
  id: string;
  /** ID de la regla ejecutada */
  ruleId: string;
  /** Nombre de la regla */
  ruleName: string;
  /** Tipo de guardian */
  guardianType: GuardianType;
  /** Estado de la ejecuci√≥n */
  status: ValidationExecutionStatus;
  /** Tiempo de inicio */
  startTime: Date;
  /** Tiempo de fin */
  endTime?: Date;
  /** Duraci√≥n en milisegundos */
  duration?: number;
  /** Resultado de la validaci√≥n */
  result?: ValidationResult;
  /** Progreso (0-100) */
  progress: number;
  /** Logs de la ejecuci√≥n */
  logs: string[];
  /** Si se aplic√≥ auto-correcci√≥n */
  autoFixApplied?: boolean;
  /** M√©tricas de la validaci√≥n */
  metrics?: ValidationExecutionMetrics;
}

/**
 * Estados de ejecuci√≥n de validaci√≥n
 */
export type ValidationExecutionStatus = 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';

/**
 * M√©tricas de ejecuci√≥n de validaci√≥n
 */
export interface ValidationExecutionMetrics {
  /** Total de verificaciones realizadas */
  totalChecks: number;
  /** Verificaciones exitosas */
  passedChecks: number;
  /** Verificaciones fallidas */
  failedChecks: number;
  /** Verificaciones con advertencias */
  warningChecks: number;
  /** Porcentaje de cobertura */
  coveragePercentage: number;
  /** Impacto en performance */
  performanceImpact: number;
  /** Puntuaci√≥n de calidad */
  qualityScore: number;
}

/**
 * Programaci√≥n de validaci√≥n
 */
export interface ScheduledValidation {
  /** ID √∫nico de la programaci√≥n */
  id: string;
  /** Nombre descriptivo */
  name: string;
  /** Descripci√≥n */
  description: string;
  /** IDs de reglas incluidas */
  ruleIds: string[];
  /** Configuraci√≥n de programaci√≥n */
  schedule: ValidationScheduleConfig;
  /** Si est√° habilitada */
  enabled: boolean;
  /** √öltima ejecuci√≥n */
  lastRun?: Date;
  /** Pr√≥xima ejecuci√≥n */
  nextRun?: Date;
  /** Total de ejecuciones */
  totalRuns: number;
  /** Ejecuciones exitosas */
  successfulRuns: number;
  /** Ejecuciones fallidas */
  failedRuns: number;
  /** Duraci√≥n promedio */
  averageDuration: number;
  /** Metadatos */
  metadata: ScheduledValidationMetadata;
}

/**
 * Metadatos de programaci√≥n de validaci√≥n
 */
export interface ScheduledValidationMetadata {
  /** Fecha de creaci√≥n */
  createdAt: Date;
  /** Fecha de √∫ltima actualizaci√≥n */
  updatedAt: Date;
  /** Creador */
  createdBy: string;
  /** √öltima modificaci√≥n por */
  lastModifiedBy?: string;
  /** Tags descriptivos */
  tags?: string[];
}

/**
 * Configuraci√≥n del motor de validaci√≥n
 */
export interface ValidationEngineConfig {
  /** Configuraci√≥n de intervalos por defecto */
  defaultIntervals: Record<GuardianType, number>;
  /** Pol√≠tica de reintentos por defecto */
  defaultRetryPolicy: RetryPolicy;
  /** Configuraci√≥n de notificaciones */
  notificationConfig: ValidationNotificationConfig;
  /** L√≠mites del sistema */
  systemLimits: ValidationSystemLimits;
  /** Configuraci√≥n de auto-correcci√≥n */
  autoFixConfig: AutoFixConfig;
}

/**
 * Configuraci√≥n de notificaciones de validaci√≥n
 */
export interface ValidationNotificationConfig {
  /** Notificar errores cr√≠ticos */
  criticalErrors: boolean;
  /** Notificar advertencias */
  warnings: boolean;
  /** Notificar ejecuciones exitosas */
  successfulRuns: boolean;
  /** Notificar cambios de programaci√≥n */
  scheduleChanges: boolean;
  /** Canales de notificaci√≥n */
  channels: NotificationChannel[];
}

/**
 * Canales de notificaci√≥n
 */
export type NotificationChannel = 'email' | 'slack' | 'webhook' | 'in_app';

/**
 * L√≠mites del sistema de validaci√≥n
 */
export interface ValidationSystemLimits {
  /** M√°ximo de validaciones concurrentes */
  maxConcurrentValidations: number;
  /** Duraci√≥n m√°xima de validaci√≥n */
  maxValidationDuration: number;
  /** M√°ximo de reglas por programaci√≥n */
  maxRulesPerSchedule: number;
  /** M√°ximo de programaciones por usuario */
  maxSchedulesPerUser: number;
  /** Tama√±o m√°ximo de logs */
  maxLogSize: number;
}

/**
 * Configuraci√≥n de auto-correcci√≥n
 */
export interface AutoFixConfig {
  /** Si est√° habilitada globalmente */
  enabled: boolean;
  /** Tipos de problemas que se pueden auto-corregir */
  allowedFixTypes: AutoFixType[];
  /** Requiere confirmaci√≥n para auto-correcci√≥n */
  requireConfirmation: boolean;
  /** Crear backup antes de auto-correcci√≥n */
  createBackup: boolean;
}

/**
 * Tipos de auto-correcci√≥n
 */
export type AutoFixType = 'formatting' | 'imports' | 'linting' | 'dependencies' | 'security' | 'performance';

/**
 * Resultado de auto-correcci√≥n
 */
export interface AutoFixResult {
  /** Si la correcci√≥n fue exitosa */
  success: boolean;
  /** Cambios aplicados */
  changesApplied: string[];
  /** Archivos modificados */
  modifiedFiles: string[];
  /** Backup creado */
  backupPath?: string;
  /** Errores durante la correcci√≥n */
  errors?: string[];
}

// All types are already exported above as interfaces and types
