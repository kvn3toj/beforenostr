/**
 * üåå Configuraci√≥n del Sistema IA C√≥smica
 *
 * Define los par√°metros operacionales del CosmicBrain para auto-evoluci√≥n,
 * predicci√≥n de patrones y an√°lisis de armon√≠a del equipo.
 *
 * Filosof√≠a Coom√únity: Los valores por defecto priorizan el Bien Com√∫n,
 * la colaboraci√≥n armoniosa y la evoluci√≥n sostenible del sistema.
 */

// Removed import - using local interface definition

export const DEFAULT_COSMIC_CONFIG: CosmicConfig = {
  // üîÑ Intervalos de evoluci√≥n (en minutos)
  evolutionInterval: 60, // 1 hora - permite evoluci√≥n constante sin ser intrusivo

  // üîÆ Horizonte de predicci√≥n (en d√≠as)
  predictionHorizon: 14, // 2 semanas - balance entre planificaci√≥n y adaptabilidad

  // üìä An√°lisis de armon√≠a (en minutos)
  harmonyAnalysisInterval: 30, // 30 minutos - monitoreo frecuente del bienestar del equipo

  // üéØ Asignaci√≥n de misiones (en minutos)
  missionAssignmentInterval: 120, // 2 horas - tiempo suficiente para completar tareas

  // üåü Peso de la filosof√≠a en decisiones (0-1)
  philosophyWeight: 0.7, // 70% - prioriza fuertemente la filosof√≠a Coom√únity

  // ü§ñ Auto-evoluci√≥n habilitada
  autoEvolutionEnabled: true, // Sistema vivo que se mejora continuamente

  // üêõ Modo debug
  debugMode: false // Deshabilitado por defecto para producci√≥n
};

/**
 * üéØ Configuraci√≥n para desarrollo
 * Intervalos m√°s frecuentes para testing y debugging
 */
export const DEVELOPMENT_COSMIC_CONFIG: CosmicConfig = {
  ...DEFAULT_COSMIC_CONFIG,
  evolutionInterval: 10, // 10 minutos - evoluci√≥n r√°pida para desarrollo
  harmonyAnalysisInterval: 5, // 5 minutos - monitoreo frecuente
  missionAssignmentInterval: 15, // 15 minutos - asignaciones r√°pidas
  debugMode: true // Logs detallados para desarrollo
};

/**
 * üè≠ Configuraci√≥n para producci√≥n
 * Intervalos optimizados para estabilidad y rendimiento
 */
export const PRODUCTION_COSMIC_CONFIG: CosmicConfig = {
  ...DEFAULT_COSMIC_CONFIG,
  evolutionInterval: 240, // 4 horas - evoluci√≥n m√°s conservadora
  harmonyAnalysisInterval: 60, // 1 hora - monitoreo balanceado
  missionAssignmentInterval: 480, // 8 horas - asignaciones planificadas
  debugMode: false // Sin logs de debug en producci√≥n
};

/**
 * üß™ Configuraci√≥n para testing
 * Intervalos m√≠nimos para pruebas automatizadas
 */
export const TESTING_COSMIC_CONFIG: CosmicConfig = {
  ...DEFAULT_COSMIC_CONFIG,
  evolutionInterval: 1, // 1 minuto - evoluci√≥n inmediata para tests
  harmonyAnalysisInterval: 1, // 1 minuto - an√°lisis inmediato
  missionAssignmentInterval: 1, // 1 minuto - asignaci√≥n inmediata
  predictionHorizon: 1, // 1 d√≠a - predicciones a corto plazo para tests
  autoEvolutionEnabled: false, // Evoluci√≥n manual en tests
  debugMode: true // Logs completos para debugging de tests
};

/**
 * üå± Configuraci√≥n para equipo peque√±o (1-3 desarrolladores)
 */
export const SMALL_TEAM_CONFIG: CosmicConfig = {
  ...DEFAULT_COSMIC_CONFIG,
  evolutionInterval: 30, // 30 minutos - evoluci√≥n √°gil
  harmonyAnalysisInterval: 15, // 15 minutos - monitoreo cercano
  missionAssignmentInterval: 60, // 1 hora - asignaciones frecuentes
  philosophyWeight: 0.8 // 80% - mayor peso a filosof√≠a en equipos peque√±os
};

/**
 * üè¢ Configuraci√≥n para equipo grande (10+ desarrolladores)
 */
export const LARGE_TEAM_CONFIG: CosmicConfig = {
  ...DEFAULT_COSMIC_CONFIG,
  evolutionInterval: 180, // 3 horas - evoluci√≥n m√°s estable
  harmonyAnalysisInterval: 45, // 45 minutos - an√°lisis balanceado
  missionAssignmentInterval: 360, // 6 horas - asignaciones planificadas
  philosophyWeight: 0.6 // 60% - balance con consideraciones t√©cnicas
};

/**
 * üé® Configuraci√≥n para proyectos creativos
 * Enfocada en innovaci√≥n y experimentaci√≥n
 */
export const CREATIVE_PROJECT_CONFIG: CosmicConfig = {
  ...DEFAULT_COSMIC_CONFIG,
  evolutionInterval: 45, // 45 minutos - evoluci√≥n creativa frecuente
  harmonyAnalysisInterval: 20, // 20 minutos - monitoreo del flow creativo
  missionAssignmentInterval: 90, // 1.5 horas - tiempo para exploraci√≥n
  philosophyWeight: 0.9, // 90% - m√°xima prioridad a la filosof√≠a creativa
  predictionHorizon: 7 // 1 semana - predicciones √°giles para creatividad
};

/**
 * üõ°Ô∏è Configuraci√≥n para proyectos cr√≠ticos
 * Enfocada en estabilidad y confiabilidad
 */
export const CRITICAL_PROJECT_CONFIG: CosmicConfig = {
  ...DEFAULT_COSMIC_CONFIG,
  evolutionInterval: 480, // 8 horas - evoluci√≥n muy conservadora
  harmonyAnalysisInterval: 120, // 2 horas - monitoreo estable
  missionAssignmentInterval: 720, // 12 horas - asignaciones muy planificadas
  philosophyWeight: 0.5, // 50% - balance con consideraciones de seguridad
  predictionHorizon: 30, // 1 mes - predicciones a largo plazo
  autoEvolutionEnabled: false // Evoluci√≥n manual para m√°ximo control
};

/**
 * üåü Funci√≥n para obtener configuraci√≥n seg√∫n el entorno
 */
export function getCosmicConfig(environment: string = 'default'): CosmicConfig {
  switch (environment.toLowerCase()) {
    case 'development':
    case 'dev':
      return DEVELOPMENT_COSMIC_CONFIG;

    case 'production':
    case 'prod':
      return PRODUCTION_COSMIC_CONFIG;

    case 'testing':
    case 'test':
      return TESTING_COSMIC_CONFIG;

    case 'small-team':
      return SMALL_TEAM_CONFIG;

    case 'large-team':
      return LARGE_TEAM_CONFIG;

    case 'creative':
      return CREATIVE_PROJECT_CONFIG;

    case 'critical':
      return CRITICAL_PROJECT_CONFIG;

    default:
      return DEFAULT_COSMIC_CONFIG;
  }
}

/**
 * üîß Funci√≥n para validar configuraci√≥n personalizada
 */
export function validateCosmicConfig(config: Partial<CosmicConfig>): string[] {
  const errors: string[] = [];

  if (config.evolutionInterval !== undefined && config.evolutionInterval < 1) {
    errors.push('evolutionInterval debe ser al menos 1 minuto');
  }

  if (config.predictionHorizon !== undefined && config.predictionHorizon < 1) {
    errors.push('predictionHorizon debe ser al menos 1 d√≠a');
  }

  if (config.harmonyAnalysisInterval !== undefined && config.harmonyAnalysisInterval < 1) {
    errors.push('harmonyAnalysisInterval debe ser al menos 1 minuto');
  }

  if (config.missionAssignmentInterval !== undefined && config.missionAssignmentInterval < 1) {
    errors.push('missionAssignmentInterval debe ser al menos 1 minuto');
  }

  if (config.philosophyWeight !== undefined && (config.philosophyWeight < 0 || config.philosophyWeight > 1)) {
    errors.push('philosophyWeight debe estar entre 0 y 1');
  }

  return errors;
}

/**
 * üåà Funci√≥n para crear configuraci√≥n personalizada con validaci√≥n
 */
export function createCosmicConfig(baseConfig: CosmicConfig, overrides: Partial<CosmicConfig>): CosmicConfig {
  const errors = validateCosmicConfig(overrides);
  if (errors.length > 0) {
    throw new Error(`Configuraci√≥n inv√°lida: ${errors.join(', ')}`);
  }

  return { ...baseConfig, ...overrides };
}

/**
 * üåå Cosmic Brain Configuration Interface
 */
export interface CosmicConfig {
  evolutionInterval: number; // minutes
  predictionHorizon: number; // days
  harmonyAnalysisInterval: number; // minutes
  missionAssignmentInterval: number; // minutes
  philosophyWeight: number; // 0-1, how much philosophy influences decisions
  autoEvolutionEnabled: boolean;
  debugMode: boolean;
}
