import { test, expect } from '@playwright/test';

test.describe('üîß VERIFICACI√ìN: Correcciones del Men√∫ de Navegaci√≥n', () => {
  test.beforeEach(async ({ page }) => {
    console.log('üîê Iniciando sesi√≥n como administrador...');
    
    // Navegar a login
    await page.goto('/login');
    await page.waitForLoadState('networkidle');
    
    // Llenar credenciales
    await page.fill('input[name="email"]', 'admin@gamifier.com');
    await page.fill('input[name="password"]', 'admin123');
    await page.click('button[type="submit"]');
    
    // Esperar redirecci√≥n
    await page.waitForURL('**/');
    
    // Verificar login exitoso (m√©todo robusto)
    try {
      await page.waitForSelector('nav, [role="navigation"], button[aria-label*="menu"]', { timeout: 5000 });
      console.log('‚úÖ Login exitoso - Navegaci√≥n detectada');
    } catch {
      const currentUrl = page.url();
      if (!currentUrl.includes('/login')) {
        console.log('‚úÖ Login exitoso - Verificado por URL');
      } else {
        throw new Error('Login fall√≥');
      }
    }
  });

  test('üéØ VERIFICAR: Enlaces de Services funcionan correctamente', async ({ page }) => {
    console.log('üìã Verificando enlaces del men√∫ Services...');
    
    // Buscar y expandir el men√∫ Services
    try {
      await page.click('text=Services', { timeout: 5000 });
      console.log('‚úÖ Men√∫ Services expandido');
    } catch {
      console.log('‚ö†Ô∏è Intentando expandir men√∫ Services de forma alternativa...');
      await page.click('[role="button"]:has-text("Services")');
    }
    
    await page.waitForTimeout(1000);
    
    // Verificar que √úMarket navega a /marketplace
    try {
      await page.click('text=√úMarket');
      await page.waitForLoadState('networkidle');
      await page.waitForTimeout(2000);
      
      const currentUrl = page.url();
      expect(currentUrl).toContain('/marketplace');
      console.log('‚úÖ √úMarket navega correctamente a /marketplace');
      
      // Verificar que la p√°gina se carga sin errores
      try {
        await page.waitForSelector('text=Marketplace', { timeout: 5000 });
        console.log('‚úÖ P√°gina Marketplace cargada');
      } catch {
        console.log('‚ö†Ô∏è P√°gina Marketplace puede no tener contenido visible');
      }
    } catch (error) {
      console.log('‚ùå Error navegando a √úMarket:', error);
    }
    
    // Regresar al home para probar siguiente enlace
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    
    // Expandir Services nuevamente
    try {
      await page.click('text=Services');
    } catch {
      await page.click('[role="button"]:has-text("Services")');
    }
    await page.waitForTimeout(1000);
    
    // Verificar que √úSocial navega a /social
    try {
      await page.click('text=√úSocial');
      await page.waitForLoadState('networkidle');
      await page.waitForTimeout(2000);
      
      const currentUrl = page.url();
      expect(currentUrl).toContain('/social');
      console.log('‚úÖ √úSocial navega correctamente a /social');
      
      try {
        await page.waitForSelector('text=Social', { timeout: 5000 });
        console.log('‚úÖ P√°gina Social cargada');
      } catch {
        console.log('‚ö†Ô∏è P√°gina Social puede no tener contenido visible');
      }
    } catch (error) {
      console.log('‚ùå Error navegando a √úSocial:', error);
    }
    
    // Regresar al home para probar CoPs
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    
    // Expandir Services nuevamente
    try {
      await page.click('text=Services');
    } catch {
      await page.click('[role="button"]:has-text("Services")');
    }
    await page.waitForTimeout(1000);
    
    // Verificar que CoPs navega a /groups
    try {
      await page.click('text=CoPs');
      await page.waitForLoadState('networkidle');
      await page.waitForTimeout(2000);
      
      const currentUrl = page.url();
      expect(currentUrl).toContain('/groups');
      console.log('‚úÖ CoPs navega correctamente a /groups');
      
      try {
        await page.waitForSelector('text=Comunidades', { timeout: 5000 });
        console.log('‚úÖ P√°gina CoPs (Comunidades de Pr√°ctica) cargada');
      } catch {
        console.log('‚ö†Ô∏è P√°gina CoPs puede no tener contenido visible con "Comunidades"');
      }
    } catch (error) {
      console.log('‚ùå Error navegando a CoPs:', error);
    }
  });

  test('‚öôÔ∏è VERIFICAR: Configuraci√≥n navega correctamente', async ({ page }) => {
    console.log('üìã Verificando enlace de Configuraci√≥n...');
    
    // Buscar y expandir el men√∫ Administration
    try {
      await page.click('text=Administraci√≥n', { timeout: 5000 });
      console.log('‚úÖ Men√∫ Administraci√≥n expandido');
    } catch {
      console.log('‚ö†Ô∏è Intentando expandir men√∫ Administraci√≥n de forma alternativa...');
      await page.click('[role="button"]:has-text("Administraci√≥n")');
    }
    
    await page.waitForTimeout(1000);
    
    // Verificar que Configuraci√≥n navega a /settings y no al home
    try {
      await page.click('text=Configuraci√≥n');
      await page.waitForLoadState('networkidle');
      await page.waitForTimeout(2000);
      
      const currentUrl = page.url();
      expect(currentUrl).toContain('/settings');
      expect(currentUrl).not.toBe('/');
      console.log('‚úÖ Configuraci√≥n navega correctamente a /settings (no al home)');
      
      try {
        await page.waitForSelector('text=Configuraci√≥n del Sistema', { timeout: 5000 });
        console.log('‚úÖ P√°gina de Configuraci√≥n cargada');
      } catch {
        console.log('‚ö†Ô∏è P√°gina de Configuraci√≥n puede tener restricciones de acceso');
      }
    } catch (error) {
      console.log('‚ùå Error navegando a Configuraci√≥n:', error);
    }
  });

  test('üìã VERIFICAR: Audit Logs no causa pantalla negra', async ({ page }) => {
    console.log('üìã Verificando que Audit Logs funcione...');
    
    const consoleErrors: string[] = [];
    page.on('console', (msg) => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
        console.log('üî¥ Console Error:', msg.text());
      }
    });
    
    // Buscar y expandir el men√∫ Administration
    try {
      await page.click('text=Administraci√≥n', { timeout: 5000 });
    } catch {
      await page.click('[role="button"]:has-text("Administraci√≥n")');
    }
    
    await page.waitForTimeout(1000);
    
    // Navegar a Audit Logs
    try {
      await page.click('text=Audit Logs');
      await page.waitForLoadState('networkidle');
      await page.waitForTimeout(3000);
      
      const currentUrl = page.url();
      expect(currentUrl).toContain('/audit-logs');
      console.log('‚úÖ Audit Logs navega correctamente a /audit-logs');
      
      // Verificar que no hay pantalla completamente negra
      const bodyColor = await page.evaluate(() => {
        const body = document.body;
        const computed = window.getComputedStyle(body);
        return computed.backgroundColor;
      });
      
      console.log('üìä Color de fondo del body:', bodyColor);
      
      // Verificar que hay contenido visible o al menos un mensaje de error apropiado
      const hasContent = await page.locator('body *').count();
      expect(hasContent).toBeGreaterThan(0);
      console.log(`‚úÖ P√°gina tiene ${hasContent} elementos, no est√° completamente vac√≠a`);
      
      // Capturar screenshot para inspecci√≥n
      await page.screenshot({ 
        path: 'audit-logs-verification.png',
        fullPage: true 
      });
      
      console.log('‚úÖ Audit Logs no causa pantalla negra completa');
      
    } catch (error) {
      console.log('‚ùå Error navegando a Audit Logs:', error);
      await page.screenshot({ 
        path: 'audit-logs-error.png',
        fullPage: true 
      });
    }
    
    console.log(`üîç Total errores de consola: ${consoleErrors.length}`);
  });

  test('üìä VERIFICAR: P√°ginas de gamificaci√≥n est√°n en el men√∫', async ({ page }) => {
    console.log('üìã Verificando p√°ginas de gamificaci√≥n en el men√∫...');
    
    // Buscar y expandir el men√∫ Gamificaci√≥n
    try {
      await page.click('text=Gamificaci√≥n', { timeout: 5000 });
      console.log('‚úÖ Men√∫ Gamificaci√≥n expandido');
    } catch {
      console.log('‚ö†Ô∏è Intentando expandir men√∫ Gamificaci√≥n de forma alternativa...');
      await page.click('[role="button"]:has-text("Gamificaci√≥n")');
    }
    
    await page.waitForTimeout(1000);
    
    // Verificar enlaces de gamificaci√≥n
    const gamificationLinks = [
      { text: 'Tokens', path: '/tokens' },
      { text: 'Wallet', path: '/wallet' },
      { text: 'M√©ritos', path: '/merits' },
      { text: 'Desaf√≠os', path: '/challenges' },
      { text: 'Invitaciones', path: '/invitations' },
      { text: 'Personalidades', path: '/personalities' }
    ];
    
    for (const link of gamificationLinks) {
      try {
        // Expandir men√∫ nuevamente si es necesario
        const menuVisible = await page.isVisible(`text=${link.text}`);
        if (!menuVisible) {
          await page.click('text=Gamificaci√≥n');
          await page.waitForTimeout(500);
        }
        
        await page.click(`text=${link.text}`);
        await page.waitForLoadState('networkidle');
        await page.waitForTimeout(1000);
        
        const currentUrl = page.url();
        expect(currentUrl).toContain(link.path);
        console.log(`‚úÖ ${link.text} navega correctamente a ${link.path}`);
        
        // Regresar al home para siguiente enlace
        await page.goto('/');
        await page.waitForLoadState('networkidle');
        
      } catch (error) {
        console.log(`‚ùå Error navegando a ${link.text}:`, error);
      }
    }
  });
}); 