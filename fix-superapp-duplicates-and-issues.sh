#!/bin/bash

echo "üîç ESCANEO Y CORRECCI√ìN: Duplicados y Problemas que Bloquean Cambios Visuales"
echo "=============================================================================="
echo "üìÖ Fecha: $(date)"
echo "üìç Directorio: $(pwd)"
echo ""

# CONTADORES
declare -i issues_found=0
declare -i issues_fixed=0
declare -i grid_warnings=0
declare -i reward_issues=0
declare -i duplicate_files=0

echo "üîé FASE 1: DETECCI√ìN DE PROBLEMAS CR√çTICOS"
echo "============================================"

# 1. DETECCI√ìN: Material UI Grid v7 Warnings
echo "1Ô∏è‚É£ Escaneando warnings Material UI Grid v7..."
grid_count=$(find Demo/apps/superapp-unified/src -name "*.tsx" -exec grep -l "Grid item" {} \; | wc -l)
if [ $grid_count -gt 0 ]; then
    echo "   ‚ö†Ô∏è ENCONTRADOS: $grid_count archivos con sintaxis Grid obsoleta"
    ((issues_found++))
    ((grid_warnings=grid_count))
    echo "   üìã Archivos afectados:"
    find Demo/apps/superapp-unified/src -name "*.tsx" -exec grep -l "Grid item" {} \; | head -10
else
    echo "   ‚úÖ No se encontraron warnings de Grid"
fi

# 2. DETECCI√ìN: Accesos inseguros a .rewards
echo "2Ô∏è‚É£ Escaneando accesos inseguros a .rewards..."
unsafe_rewards=$(find Demo/apps/superapp-unified/src -name "*.tsx" -exec grep -n "\.rewards\." {} \; | grep -v "\.rewards\?" | wc -l)
if [ $unsafe_rewards -gt 0 ]; then
    echo "   ‚ö†Ô∏è ENCONTRADOS: $unsafe_rewards accesos potencialmente inseguros a .rewards"
    ((issues_found++))
    ((reward_issues=unsafe_rewards))
    echo "   üìã Ejemplos encontrados:"
    find Demo/apps/superapp-unified/src -name "*.tsx" -exec grep -n "\.rewards\." {} \; | grep -v "\.rewards\?" | head -5
else
    echo "   ‚úÖ Todos los accesos a .rewards son seguros"
fi

# 3. DETECCI√ìN: Archivos duplicados o problem√°ticos
echo "3Ô∏è‚É£ Escaneando archivos duplicados y obsoletos..."

# Buscar archivos .bak, .backup, .old
duplicate_files_found=$(find Demo/apps/superapp-unified/src -name "*.bak*" -o -name "*.backup*" -o -name "*.old*" | wc -l)
if [ $duplicate_files_found -gt 0 ]; then
    echo "   ‚ö†Ô∏è ENCONTRADOS: $duplicate_files_found archivos de backup que pueden causar conflictos"
    ((issues_found++))
    ((duplicate_files=duplicate_files_found))
    echo "   üìã Archivos encontrados:"
    find Demo/apps/superapp-unified/src -name "*.bak*" -o -name "*.backup*" -o -name "*.old*"
else
    echo "   ‚úÖ No se encontraron archivos de backup problem√°ticos"
fi

# Buscar p√°ginas duplicadas en diferentes directorios
echo "4Ô∏è‚É£ Verificando p√°ginas duplicadas..."
duplicate_pages=0

# Verificar si hay UPlayGamifiedDashboard duplicado
uplay_dashboards=$(find Demo/apps/superapp-unified/src -name "*UPlayGamifiedDashboard*" | wc -l)
if [ $uplay_dashboards -gt 1 ]; then
    echo "   ‚ö†Ô∏è ENCONTRADOS: $uplay_dashboards archivos UPlayGamifiedDashboard (esperado: 1)"
    ((duplicate_pages++))
    find Demo/apps/superapp-unified/src -name "*UPlayGamifiedDashboard*"
fi

# Verificar HomePage duplicada
home_pages=$(find Demo/apps/superapp-unified/src -name "*HomePage*" -o -name "*Home.tsx*" | wc -l)
if [ $home_pages -gt 2 ]; then  # Esperamos Home.tsx y HomePage.tsx
    echo "   ‚ö†Ô∏è ENCONTRADOS: $home_pages archivos Home (esperado: m√°ximo 2)"
    ((duplicate_pages++))
    find Demo/apps/superapp-unified/src -name "*HomePage*" -o -name "*Home.tsx*"
fi

if [ $duplicate_pages -gt 0 ]; then
    ((issues_found++))
else
    echo "   ‚úÖ No se encontraron p√°ginas duplicadas problem√°ticas"
fi

# 5. DETECCI√ìN: CSS de override problem√°tico
echo "5Ô∏è‚É£ Escaneando CSS de override que puede bloquear cambios..."
problematic_css=$(find Demo/apps/superapp-unified/src -name "*.css" -exec grep -l "background-color.*rgb(41, 37, 36)" {} \; | wc -l)
if [ $problematic_css -gt 0 ]; then
    echo "   ‚ö†Ô∏è ENCONTRADOS: $problematic_css archivos CSS con overrides de color oscuro"
    ((issues_found++))
    echo "   üìã Archivos CSS problem√°ticos:"
    find Demo/apps/superapp-unified/src -name "*.css" -exec grep -l "background-color.*rgb(41, 37, 36)" {} \;
else
    echo "   ‚úÖ No se encontraron CSS problem√°ticos"
fi

echo ""
echo "üìä RESUMEN DE DETECCI√ìN:"
echo "   üîç Issues totales encontrados: $issues_found"
echo "   ‚ö†Ô∏è Warnings Grid MUI: $grid_warnings archivos"
echo "   üéØ Accesos rewards inseguros: $reward_issues"
echo "   üìÅ Archivos duplicados: $duplicate_files"
echo "   üìÑ P√°ginas duplicadas: $duplicate_pages"
echo ""

if [ $issues_found -eq 0 ]; then
    echo "üéâ ¬°EXCELENTE! No se encontraron problemas cr√≠ticos."
    echo "   Los cambios visuales deber√≠an ser completamente visibles."
    exit 0
fi

echo "üîß FASE 2: CORRECCI√ìN AUTOM√ÅTICA DE PROBLEMAS"
echo "============================================="

# CORRECCI√ìN 1: Material UI Grid v7
if [ $grid_warnings -gt 0 ]; then
    echo "üîß Corrigiendo warnings Material UI Grid v7..."
    
    # Crear backup de seguridad
    mkdir -p backups/grid-fixes-$(date +%Y%m%d_%H%M%S)
    
    # Lista de archivos a corregir
    grid_files=$(find Demo/apps/superapp-unified/src -name "*.tsx" -exec grep -l "Grid item" {} \;)
    
    for file in $grid_files; do
        if [ -f "$file" ]; then
            echo "   üìù Corrigiendo: $file"
            
            # Backup individual
            cp "$file" "backups/grid-fixes-$(date +%Y%m%d_%H%M%S)/$(basename $file).bak"
            
            # Aplicar correcciones con sed
            sed -i.tmp 's/<Grid item xs=\([0-9]*\) sm=\([0-9]*\) md=\([0-9]*\) lg=\([0-9]*\)>/<Grid size={{ xs: \1, sm: \2, md: \3, lg: \4 }}>/g' "$file"
            sed -i.tmp 's/<Grid item xs=\([0-9]*\) sm=\([0-9]*\) md=\([0-9]*\)>/<Grid size={{ xs: \1, sm: \2, md: \3 }}>/g' "$file"
            sed -i.tmp 's/<Grid item xs=\([0-9]*\) md=\([0-9]*\)>/<Grid size={{ xs: \1, md: \2 }}>/g' "$file"
            sed -i.tmp 's/<Grid item xs=\([0-9]*\)>/<Grid size={{ xs: \1 }}>/g' "$file"
            sed -i.tmp 's/<Grid item>/<Grid>/g' "$file"
            
            # Limpiar archivos temporales
            rm -f "$file.tmp"
            
            ((issues_fixed++))
        fi
    done
    
    echo "   ‚úÖ Grid warnings corregidos en $grid_warnings archivos"
fi

# CORRECCI√ìN 2: Accesos inseguros a .rewards
if [ $reward_issues -gt 0 ]; then
    echo "üîß Corrigiendo accesos inseguros a .rewards..."
    
    # Buscar y corregir patrones espec√≠ficos
    find Demo/apps/superapp-unified/src -name "*.tsx" -exec grep -l "\.rewards\." {} \; | while read file; do
        if grep -q "\.rewards\." "$file" && ! grep -q "\.rewards\?" "$file"; then
            echo "   üìù Revisando: $file"
            
            # Crear backup
            cp "$file" "$file.$(date +%Y%m%d_%H%M%S).bak"
            
            # Aplicar correcci√≥n de optional chaining
            sed -i.tmp 's/\([a-zA-Z0-9_]*\)\.rewards\.meritos/\1.rewards?.meritos || 0/g' "$file"
            sed -i.tmp 's/\([a-zA-Z0-9_]*\)\.rewards\.ondas/\1.rewards?.ondas || 0/g' "$file"
            sed -i.tmp 's/\([a-zA-Z0-9_]*\)\.rewards\.xp/\1.rewards?.xp || 0/g' "$file"
            sed -i.tmp 's/\([a-zA-Z0-9_]*\)\.rewards\.currency/\1.rewards?.currency || 0/g' "$file"
            
            rm -f "$file.tmp"
            echo "   ‚úÖ Corregido: $file"
            ((issues_fixed++))
        fi
    done
fi

# CORRECCI√ìN 3: Eliminar archivos duplicados
if [ $duplicate_files -gt 0 ]; then
    echo "üîß Eliminando archivos duplicados problem√°ticos..."
    
    # Mover archivos duplicados a carpeta temporal
    mkdir -p backups/removed-duplicates-$(date +%Y%m%d_%H%M%S)
    
    find Demo/apps/superapp-unified/src -name "*.bak*" -o -name "*.backup*" -o -name "*.old*" | while read file; do
        echo "   üóëÔ∏è Moviendo: $file"
        mv "$file" "backups/removed-duplicates-$(date +%Y%m%d_%H%M%S)/"
        ((issues_fixed++))
    done
    
    echo "   ‚úÖ Archivos duplicados movidos a backup"
fi

# CORRECCI√ìN 4: Optimizar CSS problem√°tico
if [ $problematic_css -gt 0 ]; then
    echo "üîß Optimizando CSS que bloquea cambios visuales..."
    
    # Comentar overrides problem√°ticos en lugar de eliminarlos
    find Demo/apps/superapp-unified/src -name "*.css" -exec grep -l "background-color.*rgb(41, 37, 36)" {} \; | while read file; do
        echo "   üìù Comentando overrides problem√°ticos en: $file"
        
        # Backup
        cp "$file" "$file.$(date +%Y%m%d_%H%M%S).bak"
        
        # Comentar l√≠neas problem√°ticas
        sed -i.tmp 's/\(.*background-color.*rgb(41, 37, 36).*\)/\/\* COMMENTED FOR VISUAL FIXES: \1 \*\//' "$file"
        sed -i.tmp 's/\(.*backgroundColor.*rgb(41, 37, 36).*\)/\/\* COMMENTED FOR VISUAL FIXES: \1 \*\//' "$file"
        
        rm -f "$file.tmp"
        ((issues_fixed++))
    done
    
    echo "   ‚úÖ CSS problem√°tico comentado temporalmente"
fi

echo ""
echo "üßπ FASE 3: LIMPIEZA Y OPTIMIZACI√ìN"
echo "=================================="

# Limpiar node_modules/.vite cache que puede estar causando problemas
echo "üßπ Limpiando cach√© de Vite..."
if [ -d "Demo/apps/superapp-unified/node_modules/.vite" ]; then
    rm -rf Demo/apps/superapp-unified/node_modules/.vite
    echo "   ‚úÖ Cach√© de Vite limpiado"
    ((issues_fixed++))
else
    echo "   ‚ÑπÔ∏è No se encontr√≥ cach√© de Vite para limpiar"
fi

# Verificar que no hay procesos m√∫ltiples ejecut√°ndose
echo "üßπ Verificando procesos m√∫ltiples..."
multiple_vite=$(ps aux | grep -E "(vite|npm run dev)" | grep -v grep | wc -l)
if [ $multiple_vite -gt 1 ]; then
    echo "   ‚ö†Ô∏è ENCONTRADOS: $multiple_vite procesos Vite/npm ejecut√°ndose"
    echo "   üí° RECOMENDACI√ìN: Ejecutar 'pkill -f vite' antes de reiniciar"
    ((issues_found++))
else
    echo "   ‚úÖ Solo un proceso de desarrollo ejecut√°ndose"
fi

echo ""
echo "üéØ FASE 4: VERIFICACI√ìN POST-CORRECCI√ìN"
echo "======================================="

# Re-verificar Grid warnings
echo "üîç Re-verificando Grid warnings..."
remaining_grid=$(find Demo/apps/superapp-unified/src -name "*.tsx" -exec grep -l "Grid item" {} \; | wc -l)
if [ $remaining_grid -eq 0 ]; then
    echo "   ‚úÖ Todos los Grid warnings corregidos"
else
    echo "   ‚ö†Ô∏è A√∫n quedan $remaining_grid archivos con Grid warnings"
fi

# Re-verificar accesos rewards
echo "üîç Re-verificando accesos a .rewards..."
remaining_rewards=$(find Demo/apps/superapp-unified/src -name "*.tsx" -exec grep -n "\.rewards\." {} \; | grep -v "\.rewards\?" | wc -l)
if [ $remaining_rewards -eq 0 ]; then
    echo "   ‚úÖ Todos los accesos a .rewards son seguros"
else
    echo "   ‚ö†Ô∏è A√∫n quedan $remaining_rewards accesos potencialmente inseguros"
fi

# Verificar servicios
echo "üîç Verificando servicios activos..."
backend_ok=$(curl -s http://localhost:3002/health >/dev/null && echo "‚úÖ" || echo "‚ùå")
superapp_ok=$(curl -s -I http://localhost:3001 | grep -q "200 OK" && echo "‚úÖ" || echo "‚ùå")

echo "   $backend_ok Backend (puerto 3002)"
echo "   $superapp_ok SuperApp (puerto 3001)"

echo ""
echo "üìä RESUMEN FINAL DE CORRECCIONES:"
echo "   üîß Issues corregidos: $issues_fixed"
echo "   ‚ö†Ô∏è Issues restantes: $((issues_found - issues_fixed))"

correction_percentage=$((issues_fixed * 100 / (issues_found == 0 ? 1 : issues_found)))
echo "   üìà Porcentaje de correcci√≥n: $correction_percentage%"

echo ""
echo "üéØ RECOMENDACIONES PARA VERIFICAR CAMBIOS:"
echo "   1. üîÑ Reiniciar servidor de desarrollo: 'pkill -f vite && npm run dev:superapp'"
echo "   2. üßπ Limpiar cach√© del navegador (Ctrl+Shift+R)"
echo "   3. üåê Verificar √úPlay: http://localhost:3001/uplay"
echo "   4. üè† Verificar Home: http://localhost:3001/"
echo "   5. üõçÔ∏è Verificar Marketplace: http://localhost:3001/marketplace"

if [ $correction_percentage -ge 80 ]; then
    echo ""
    echo "üéâ ¬°CORRECCIONES MAYORITARIAMENTE EXITOSAS!"
    echo "   Los cambios visuales implementados ahora deber√≠an ser completamente visibles."
    echo "   Se recomienda reiniciar el servidor para aplicar todos los cambios."
    exit 0
elif [ $correction_percentage -ge 50 ]; then
    echo ""
    echo "‚úÖ CORRECCIONES PARCIALMENTE EXITOSAS"
    echo "   La mayor√≠a de problemas fueron corregidos."
    echo "   Se recomienda revisar manualmente los issues restantes."
    exit 0
else
    echo ""
    echo "‚ö†Ô∏è CORRECCIONES LIMITADAS"
    echo "   Se recomiedan correcciones manuales adicionales."
    echo "   Revisar backups creados para referencias."
    exit 1
fi 