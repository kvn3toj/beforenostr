import { test, expect } from '@playwright/test';

/**
 * Test simple para verificar la presencia de la secci√≥n "Gesti√≥n Coom√únity" y el "Portal Kanban C√≥smico"
 */
test('Verificar presencia de Gesti√≥n Coom√únity y Portal Kanban C√≥smico', async ({ page }) => {
  // Configurar timeout
  test.setTimeout(30000);

  // Paso 1: Navegar a la p√°gina de login
  await page.goto('http://localhost:3000/login');
  console.log('‚úÖ Navegando a la p√°gina de login');

  // Esperar a que la p√°gina se cargue completamente
  await page.waitForLoadState('networkidle');

  // Paso 2: Realizar login con JavaScript directo para evitar problemas con los selectores
  await page.evaluate(() => {
    // Buscar los campos de email y password por sus atributos
    const emailInput = document.querySelector('input[type="email"]');
    const passwordInput = document.querySelector('input[type="password"]');
    const loginButton = document.querySelector('button[type="submit"]');

    // Rellenar los campos si existen
    if (emailInput) (emailInput as HTMLInputElement).value = 'admin@gamifier.com';
    if (passwordInput) (passwordInput as HTMLInputElement).value = 'admin123';

    // Activar el bot√≥n si existe
    if (loginButton) {
      // Habilitar el bot√≥n si est√° deshabilitado
      if (loginButton.hasAttribute('disabled')) {
        loginButton.removeAttribute('disabled');
      }
      (loginButton as HTMLButtonElement).click();
    }
  });

  console.log('‚úÖ Login realizado mediante JavaScript directo');

  // Esperar a la redirecci√≥n despu√©s del login (puede ser a la p√°gina principal)
  await page.waitForURL('http://localhost:3000/**');
  console.log('‚úÖ Redirecci√≥n despu√©s del login completada');

  // Tomar screenshot de la p√°gina despu√©s del login
  await page.screenshot({ path: './test-results/after-login.png' });

  // Paso 3: Verificar si existe la secci√≥n "Gesti√≥n Coom√únity" en el men√∫
  // Primero capturamos todo el HTML del men√∫ para an√°lisis
  const menuHTML = await page.evaluate(() => {
    const menu = document.querySelector('nav');
    return menu ? menu.outerHTML : 'No se encontr√≥ el men√∫';
  });

  console.log('üîç Analizando HTML del men√∫...');
  console.log(menuHTML.substring(0, 500) + '...'); // Mostrar parte del HTML para an√°lisis

  // Verificar si existe el texto "Gesti√≥n Coom√únity" en el men√∫
  const hasGestionCoomunity = await page.evaluate(() => {
    const menuText = document.body.innerText;
    return menuText.includes('Gesti√≥n Coom√únity');
  });

  console.log(`‚úÖ ¬øExiste "Gesti√≥n Coom√únity" en el men√∫? ${hasGestionCoomunity}`);

  // Verificar si existe el texto "Portal Kanban C√≥smico" en el men√∫
  const hasPortalKanban = await page.evaluate(() => {
    const menuText = document.body.innerText;
    return menuText.includes('Portal Kanban C√≥smico');
  });

  console.log(`‚úÖ ¬øExiste "Portal Kanban C√≥smico" en el men√∫? ${hasPortalKanban}`);

  // Intentar hacer clic en la secci√≥n "Gesti√≥n Coom√únity" si existe
  if (hasGestionCoomunity) {
    try {
      // Buscar y hacer clic en el elemento que contiene "Gesti√≥n Coom√únity"
      await page.evaluate(() => {
        const elements = Array.from(document.querySelectorAll('*'));
        const gestionElement = elements.find(el =>
          el.textContent && el.textContent.includes('Gesti√≥n Coom√únity')
        );
        if (gestionElement) {
          (gestionElement as HTMLElement).click();
        }
      });

      console.log('‚úÖ Clic en "Gesti√≥n Coom√únity" realizado');

      // Esperar un momento para que se expanda el men√∫
      await page.waitForTimeout(1000);

      // Tomar screenshot despu√©s de hacer clic en la secci√≥n
      await page.screenshot({ path: './test-results/after-click-gestion.png' });

      // Intentar hacer clic en "Portal Kanban C√≥smico" si existe
      if (hasPortalKanban) {
        await page.evaluate(() => {
          const elements = Array.from(document.querySelectorAll('*'));
          const kanbanElement = elements.find(el =>
            el.textContent && el.textContent.includes('Portal Kanban C√≥smico')
          );
          if (kanbanElement) {
            (kanbanElement as HTMLElement).click();
          }
        });

        console.log('‚úÖ Clic en "Portal Kanban C√≥smico" realizado');

        // Esperar a que se cargue la p√°gina del Portal Kanban C√≥smico
        await page.waitForURL('http://localhost:3000/cosmic-kanban');

        // Tomar screenshot de la p√°gina del Portal Kanban C√≥smico
        await page.screenshot({ path: './test-results/cosmic-kanban-page.png' });
      }
    } catch (error) {
      console.error('‚ùå Error al hacer clic en los elementos del men√∫:', error);
    }
  }

  // Verificaciones finales
  expect(hasGestionCoomunity).toBeTruthy();
  expect(hasPortalKanban).toBeTruthy();
});
