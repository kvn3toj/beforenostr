import { apiService } from './api.service';
import { Category } from '../types/category.types';

// TODO: Reemplazar con datos reales una vez que el backend implemente los endpoints de categor√≠as
const MOCK_CATEGORIES: Category[] = [
  { id: '1', name: 'Educaci√≥n', created_at: new Date().toISOString() },
  { id: '2', name: 'Entretenimiento', created_at: new Date().toISOString() },
  { id: '3', name: 'Tecnolog√≠a', created_at: new Date().toISOString() },
  { id: '4', name: 'Ciencia', created_at: new Date().toISOString() },
];

// üöÄ Backend NestJS habilitado - Migraci√≥n Fase 2.4
const BACKEND_CATEGORIES_ENABLED = typeof window !== 'undefined' && 
  (globalThis as any)?.process?.env?.VITE_ENABLE_REAL_BACKEND !== 'false' ||
  true; // Por defecto habilitado para migraci√≥n

export const fetchCategories = async (): Promise<Category[]> => {
  if (!BACKEND_CATEGORIES_ENABLED) {
    console.info('[Categories] Usando datos mock - backend deshabilitado por configuraci√≥n');
    return MOCK_CATEGORIES;
  }
  
  try {
    console.info('[Categories] Conectando al backend NestJS en puerto 3002...');
    const response: any = await apiService.get('/categories');
    console.info('[Categories] ‚úÖ Datos obtenidos del backend real');
    return response.data || response; // Manejar diferentes formatos de respuesta
  } catch (error: any) {
    console.warn('[Categories] ‚ö†Ô∏è Backend no disponible, usando fallback a datos mock:', error);
    return MOCK_CATEGORIES;
  }
};

export const createCategory = async (name: string): Promise<Category> => {
  if (!BACKEND_CATEGORIES_ENABLED) {
    console.info('[Categories] Simulando creaci√≥n de categor√≠a - backend deshabilitado por configuraci√≥n');
    const newCategory: Category = {
      id: Date.now().toString(),
      name,
      created_at: new Date().toISOString()
    };
    MOCK_CATEGORIES.push(newCategory);
    return newCategory;
  }

  try {
    console.info('[Categories] Creando categor√≠a en backend NestJS...');
    const response: any = await apiService.post('/categories', { name });
    console.info('[Categories] ‚úÖ Categor√≠a creada en backend real');
    return response.data || response;
  } catch (error: any) {
    console.error('[Categories] ‚ùå Error al crear categor√≠a en backend:', error);
    throw new Error(`Error al crear categor√≠a: ${error?.message || 'Error desconocido'}`);
  }
};

export const updateCategory = async (id: string, categoryData: any): Promise<Category> => {
  if (!BACKEND_CATEGORIES_ENABLED) {
    console.info('[Categories] Simulando actualizaci√≥n de categor√≠a - backend deshabilitado por configuraci√≥n');
    const category = MOCK_CATEGORIES.find(c => c.id === id);
    if (category) {
      category.name = categoryData.name || category.name;
      return category;
    }
    throw new Error('Categor√≠a no encontrada');
  }

  try {
    console.info('[Categories] Actualizando categor√≠a en backend NestJS...');
    const response: any = await apiService.put(`/categories/${id}`, categoryData);
    console.info('[Categories] ‚úÖ Categor√≠a actualizada en backend real');
    return response.data || response;
  } catch (error: any) {
    console.error('[Categories] ‚ùå Error al actualizar categor√≠a en backend:', error);
    throw new Error(`Error al actualizar categor√≠a: ${error?.message || 'Error desconocido'}`);
  }
};

export const deleteCategory = async (id: string): Promise<void> => {
  if (!BACKEND_CATEGORIES_ENABLED) {
    console.info('[Categories] Simulando eliminaci√≥n de categor√≠a - backend deshabilitado por configuraci√≥n');
    const index = MOCK_CATEGORIES.findIndex(c => c.id === id);
    if (index !== -1) {
      MOCK_CATEGORIES.splice(index, 1);
    }
    return;
  }

  try {
    console.info('[Categories] Eliminando categor√≠a en backend NestJS...');
    await apiService.delete(`/categories/${id}`);
    console.info('[Categories] ‚úÖ Categor√≠a eliminada en backend real');
  } catch (error: any) {
    console.error('[Categories] ‚ùå Error al eliminar categor√≠a en backend:', error);
    throw new Error(`Error al eliminar categor√≠a: ${error?.message || 'Error desconocido'}`);
  }
};

// Obtener los IDs de categor√≠as asignadas a un item espec√≠fico
export const fetchItemCategoryIds = async (itemId: string): Promise<string[]> => {
  if (!BACKEND_CATEGORIES_ENABLED) {
    console.info('[Categories] Simulando categor√≠as de item - endpoints de backend no implementados');
    // Retornar algunas categor√≠as mock para demostraci√≥n
    return ['1', '2'];
  }

  try {
    const data = await apiService.get(`/items/${itemId}/categories`);
    return data || [];
  } catch (error) {
    console.warn('[Categories] Backend no disponible para obtener categor√≠as del item');
    return [];
  }
};

// Asignar m√∫ltiples categor√≠as a un item (reemplazando las existentes)
export const setItemCategories = async (itemId: string, categoryIds: string[]): Promise<void> => {
  if (!BACKEND_CATEGORIES_ENABLED) {
    console.info('[Categories] Simulando asignaci√≥n de categor√≠as - endpoints de backend no implementados');
    return;
  }

  try {
    await apiService.put(`/items/${itemId}/categories`, { categoryIds });
  } catch (error) {
    console.warn('[Categories] Backend no disponible para asignar categor√≠as');
    throw error;
  }
}; 