
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ActivitiesScalarFieldEnum = {
  id: 'id',
  experienceId: 'experienceId',
  title: 'title',
  description: 'description',
  type: 'type',
  multimediaType: 'multimediaType',
  contentUrl: 'contentUrl',
  duration: 'duration',
  order: 'order',
  status: 'status',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  videoItemId: 'videoItemId'
};

exports.Prisma.Activity_questionsScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  type: 'type',
  questionType: 'questionType',
  questionText: 'questionText',
  options: 'options',
  correctAnswer: 'correctAnswer',
  ondasList: 'ondasList',
  displayTimeSeconds: 'displayTimeSeconds',
  optionalDisplaySeconds: 'optionalDisplaySeconds',
  createdAt: 'createdAt'
};

exports.Prisma.Analytics_dataScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  videoItemId: 'videoItemId',
  playlistId: 'playlistId',
  mundoId: 'mundoId',
  sessionId: 'sessionId',
  eventData: 'eventData',
  metadata: 'metadata',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.Answer_optionsScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  text: 'text',
  isCorrect: 'isCorrect',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Challenge_rewardsScalarFieldEnum = {
  id: 'id',
  challengeId: 'challengeId',
  type: 'type',
  amount: 'amount',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ChallengesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  config: 'config',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  publicationId: 'publicationId',
  activityId: 'activityId',
  text: 'text',
  createdAt: 'createdAt'
};

exports.Prisma.ConfigurationsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  type: 'type',
  updatedAt: 'updatedAt'
};

exports.Prisma.Content_itemsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  content: 'content',
  playlistId: 'playlistId',
  itemTypeId: 'itemTypeId',
  order: 'order',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExperiencesScalarFieldEnum = {
  id: 'id',
  stageId: 'stageId',
  title: 'title',
  description: 'description',
  type: 'type',
  gamificationFramework: 'gamificationFramework',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Feedback_reportsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  description: 'description',
  priority: 'priority',
  category: 'category',
  status: 'status',
  elementContext: 'elementContext',
  technicalContext: 'technicalContext',
  codeAnalysis: 'codeAnalysis',
  aiSuggestions: 'aiSuggestions',
  adminResponse: 'adminResponse',
  adminUserId: 'adminUserId',
  resolvedAt: 'resolvedAt',
  upvotes: 'upvotes',
  downvotes: 'downvotes',
  duplicateOf: 'duplicateOf',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Gamified_playlistsScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  playlistId: 'playlistId',
  name: 'name',
  type: 'type',
  sequenceType: 'sequenceType',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Gift_cardsScalarFieldEnum = {
  id: 'id',
  inviterId: 'inviterId',
  invitedName: 'invitedName',
  invitedEmail: 'invitedEmail',
  token: 'token',
  unitsAmount: 'unitsAmount',
  suggestions: 'suggestions',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.GroupsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  ownerId: 'ownerId',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Invitation_templatesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  content: 'content',
  creatorId: 'creatorId',
  createdAt: 'createdAt'
};

exports.Prisma.Item_typesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LikesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  publicationId: 'publicationId',
  createdAt: 'createdAt'
};

exports.Prisma.LogsScalarFieldEnum = {
  id: 'id',
  level: 'level',
  message: 'message',
  context: 'context',
  timestamp: 'timestamp',
  metadata: 'metadata'
};

exports.Prisma.Marketplace_itemsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  fullDescription: 'fullDescription',
  itemType: 'itemType',
  price: 'price',
  priceToins: 'priceToins',
  currency: 'currency',
  category: 'category',
  tags: 'tags',
  images: 'images',
  stock: 'stock',
  rating: 'rating',
  reviewCount: 'reviewCount',
  location: 'location',
  status: 'status',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  viewCount: 'viewCount',
  favoriteCount: 'favoriteCount',
  sellerId: 'sellerId',
  metadata: 'metadata'
};

exports.Prisma.Marketplace_matchesScalarFieldEnum = {
  id: 'id',
  marketplaceItemId: 'marketplaceItemId',
  buyerId: 'buyerId',
  sellerId: 'sellerId',
  buyerConfirmed: 'buyerConfirmed',
  sellerConfirmed: 'sellerConfirmed',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Match_messagesScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  senderId: 'senderId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.MeritsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  type: 'type',
  source: 'source',
  relatedEntityId: 'relatedEntityId',
  createdAt: 'createdAt'
};

exports.Prisma.MundosScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  version: 'version'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  message: 'message',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.PermissionsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PersonalitiesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  traits: 'traits',
  createdAt: 'createdAt'
};

exports.Prisma.PlaylistsScalarFieldEnum = {
  id: 'id',
  mundoId: 'mundoId',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  orderInMundo: 'orderInMundo',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  version: 'version'
};

exports.Prisma.ProfilesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bio: 'bio',
  location: 'location',
  website: 'website',
  skills: 'skills',
  interests: 'interests',
  isEmprendedorConfiable: 'isEmprendedorConfiable',
  socialLinks: 'socialLinks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  avatar: 'avatar'
};

exports.Prisma.PublicationsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  content: 'content',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionsScalarFieldEnum = {
  id: 'id',
  videoItemId: 'videoItemId',
  timestamp: 'timestamp',
  type: 'type',
  text: 'text',
  languageCode: 'languageCode',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  endTimestamp: 'endTimestamp'
};

exports.Prisma.RankingsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  period: 'period',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.ReportsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  parameters: 'parameters',
  generatedAt: 'generatedAt',
  data: 'data',
  creatorId: 'creatorId'
};

exports.Prisma.ReviewsScalarFieldEnum = {
  id: 'id',
  marketplaceItemId: 'marketplaceItemId',
  userId: 'userId',
  rating: 'rating',
  comment: 'comment',
  communication: 'communication',
  quality: 'quality',
  delivery: 'delivery',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Role_permissionsScalarFieldEnum = {
  roleId: 'roleId',
  permissionId: 'permissionId',
  assignedAt: 'assignedAt',
  assignedById: 'assignedById'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StagesScalarFieldEnum = {
  id: 'id',
  worldId: 'worldId',
  name: 'name',
  order: 'order',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Study_room_messagesScalarFieldEnum = {
  id: 'id',
  studyRoomId: 'studyRoomId',
  userId: 'userId',
  message: 'message',
  messageType: 'messageType',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.Study_room_participantsScalarFieldEnum = {
  id: 'id',
  studyRoomId: 'studyRoomId',
  userId: 'userId',
  isHost: 'isHost',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isActive: 'isActive'
};

exports.Prisma.Study_roomsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  videoId: 'videoId',
  hostId: 'hostId',
  maxParticipants: 'maxParticipants',
  status: 'status',
  currentTime: 'currentTime',
  isPaused: 'isPaused',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubtitlesScalarFieldEnum = {
  id: 'id',
  videoItemId: 'videoItemId',
  languageCode: 'languageCode',
  format: 'format',
  content: 'content',
  contentUrl: 'contentUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokensScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  type: 'type',
  status: 'status',
  caducityDate: 'caducityDate',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  id: 'id',
  fromUserId: 'fromUserId',
  toUserId: 'toUserId',
  amount: 'amount',
  tokenType: 'tokenType',
  type: 'type',
  status: 'status',
  description: 'description',
  createdAt: 'createdAt',
  metadata: 'metadata'
};

exports.Prisma.Ui_component_templatesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  templateJson: 'templateJson',
  creatorId: 'creatorId',
  createdAt: 'createdAt'
};

exports.Prisma.User_answersScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  activityQuestionId: 'activityQuestionId',
  answerGiven: 'answerGiven',
  isCorrect: 'isCorrect',
  ondasEarned: 'ondasEarned',
  createdAt: 'createdAt'
};

exports.Prisma.User_challengesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  challengeId: 'challengeId',
  status: 'status',
  progress: 'progress',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  metadata: 'metadata'
};

exports.Prisma.User_groupsScalarFieldEnum = {
  userId: 'userId',
  groupId: 'groupId',
  roleInGroup: 'roleInGroup',
  joinedAt: 'joinedAt'
};

exports.Prisma.User_invitationsScalarFieldEnum = {
  id: 'id',
  giftCardId: 'giftCardId',
  invitedUserId: 'invitedUserId',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.User_rolesScalarFieldEnum = {
  userId: 'userId',
  roleId: 'roleId',
  assignedAt: 'assignedAt',
  assignedById: 'assignedById'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  avatarUrl: 'avatarUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  documentType: 'documentType',
  documentNumber: 'documentNumber',
  phone: 'phone',
  country: 'country',
  address: 'address',
  status: 'status',
  topUserCount: 'topUserCount',
  personalityId: 'personalityId',
  currentStage: 'currentStage'
};

exports.Prisma.Video_itemsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  content: 'content',
  url: 'url',
  platform: 'platform',
  externalId: 'externalId',
  playlistId: 'playlistId',
  itemTypeId: 'itemTypeId',
  order: 'order',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  duration: 'duration',
  categories: 'categories',
  language: 'language',
  quality: 'quality',
  tags: 'tags',
  thumbnailUrl: 'thumbnailUrl'
};

exports.Prisma.Video_permissionsScalarFieldEnum = {
  id: 'id',
  videoItemId: 'videoItemId',
  showWaveCount: 'showWaveCount',
  showVideos: 'showVideos',
  showVideoSubtitles: 'showVideoSubtitles',
  showComments: 'showComments',
  showPublishDate: 'showPublishDate',
  showVideoDuration: 'showVideoDuration',
  showLikeButton: 'showLikeButton',
  allowRewindForward: 'allowRewindForward',
  allowViewComments: 'allowViewComments',
  allowMakeComments: 'allowMakeComments',
  showLikeComments: 'showLikeComments',
  sortCommentsByAffinity: 'sortCommentsByAffinity',
  showCommenterName: 'showCommenterName',
  playlistPosition: 'playlistPosition',
  isDraft: 'isDraft',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.WalletsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  blockchainAddress: 'blockchainAddress',
  balanceUnits: 'balanceUnits',
  balanceToins: 'balanceToins',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorldsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  creatorId: 'creatorId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  mundoId: 'mundoId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.FeedbackType = exports.$Enums.FeedbackType = {
  BUG: 'BUG',
  IMPROVEMENT: 'IMPROVEMENT',
  MISSING_FEATURE: 'MISSING_FEATURE',
  PERFORMANCE: 'PERFORMANCE',
  UX_ISSUE: 'UX_ISSUE',
  CODE_ANALYSIS: 'CODE_ANALYSIS'
};

exports.FeedbackPriority = exports.$Enums.FeedbackPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.FeedbackStatus = exports.$Enums.FeedbackStatus = {
  SUBMITTED: 'SUBMITTED',
  REVIEWING: 'REVIEWING',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  REJECTED: 'REJECTED',
  DUPLICATE: 'DUPLICATE'
};

exports.MarketplaceItemType = exports.$Enums.MarketplaceItemType = {
  PRODUCT: 'PRODUCT',
  SERVICE: 'SERVICE',
  EXPERIENCE: 'EXPERIENCE',
  SKILL_EXCHANGE: 'SKILL_EXCHANGE',
  DIGITAL_CONTENT: 'DIGITAL_CONTENT'
};

exports.Currency = exports.$Enums.Currency = {
  LUKAS: 'LUKAS',
  USD: 'USD',
  EUR: 'EUR',
  BTC: 'BTC',
  ETH: 'ETH'
};

exports.MarketplaceItemStatus = exports.$Enums.MarketplaceItemStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SOLD: 'SOLD',
  EXPIRED: 'EXPIRED',
  SUSPENDED: 'SUSPENDED'
};

exports.MatchStatus = exports.$Enums.MatchStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.StudyRoomStatus = exports.$Enums.StudyRoomStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  ENDED: 'ENDED'
};

exports.Prisma.ModelName = {
  activities: 'activities',
  activity_questions: 'activity_questions',
  analytics_data: 'analytics_data',
  answer_options: 'answer_options',
  challenge_rewards: 'challenge_rewards',
  challenges: 'challenges',
  comments: 'comments',
  configurations: 'configurations',
  content_items: 'content_items',
  experiences: 'experiences',
  feedback_reports: 'feedback_reports',
  gamified_playlists: 'gamified_playlists',
  gift_cards: 'gift_cards',
  groups: 'groups',
  invitation_templates: 'invitation_templates',
  item_types: 'item_types',
  likes: 'likes',
  logs: 'logs',
  marketplace_items: 'marketplace_items',
  marketplace_matches: 'marketplace_matches',
  match_messages: 'match_messages',
  merits: 'merits',
  mundos: 'mundos',
  notifications: 'notifications',
  permissions: 'permissions',
  personalities: 'personalities',
  playlists: 'playlists',
  profiles: 'profiles',
  publications: 'publications',
  questions: 'questions',
  rankings: 'rankings',
  reports: 'reports',
  reviews: 'reviews',
  role_permissions: 'role_permissions',
  roles: 'roles',
  stages: 'stages',
  study_room_messages: 'study_room_messages',
  study_room_participants: 'study_room_participants',
  study_rooms: 'study_rooms',
  subtitles: 'subtitles',
  tokens: 'tokens',
  transactions: 'transactions',
  ui_component_templates: 'ui_component_templates',
  user_answers: 'user_answers',
  user_challenges: 'user_challenges',
  user_groups: 'user_groups',
  user_invitations: 'user_invitations',
  user_roles: 'user_roles',
  users: 'users',
  video_items: 'video_items',
  video_permissions: 'video_permissions',
  wallets: 'wallets',
  worlds: 'worlds'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
